; ModuleID = 'blackscholes.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct.FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct.OptionData = type { float, float, float, float, float, float, i8, float, float }
%struct._IO_marker = type { %struct._IO_marker*, %struct.FILE*, i32 }
%struct.pthread_attr_t = type { i64, [48 x i8] }
%struct.pthread_mutexattr_t = type { i32 }

@_M4_threadsTable = global [128 x i64] zeroinitializer, align 32
@.str = private constant [8 x i8] c"%s: %f\0A\00", align 1
@.str1 = private constant [35 x i8] c"PARSEC Benchmark Suite Version 2.1\00", align 8
@.str2 = private constant [48 x i8] c"Usage:\0A\09%s <nthreads> <inputFile> <outputFile>\0A\00", align 8
@nThreads = global i32 0
@.str3 = private constant [2 x i8] c"r\00", align 1
@.str4 = private constant [32 x i8] c"ERROR: Unable to open file %s.\0A\00", align 8
@.str5 = private constant [3 x i8] c"%i\00", align 1
@numOptions = global i32 0
@.str6 = private constant [37 x i8] c"ERROR: Unable to read from file %s.\0A\00", align 8
@.str7 = private constant [81 x i8] c"WARNING: Not enough work, reducing number of threads to match number of options.\00", align 8
@data = global %struct.OptionData* null
@prices = global float* null
@.str8 = private constant [27 x i8] c"%f %f %f %f %f %f %c %f %f\00", align 1
@.str9 = private constant [33 x i8] c"ERROR: Unable to close file %s.\0A\00", align 8
@_M4_normalMutexAttr = global %struct.pthread_mutexattr_t zeroinitializer
@_M4_numThreads = global i32 128
@.str10 = private constant [20 x i8] c"Num of Options: %d\0A\00", align 1
@.str11 = private constant [17 x i8] c"Num of Runs: %d\0A\00", align 1
@sptprice = global float* null
@strike = global float* null
@rate = global float* null
@volatility = global float* null
@otime = global float* null
@otype = global i32* null
@.str12 = private constant [18 x i8] c"Size of data: %d\0A\00", align 1
@.str13 = private constant [2 x i8] c"w\00", align 1
@.str14 = private constant [4 x i8] c"%i\0A\00", align 1
@.str15 = private constant [36 x i8] c"ERROR: Unable to write to file %s.\0A\00", align 8
@.str16 = private constant [7 x i8] c"%.18f\0A\00", align 1
@numError = global i32 0

define void @_Z9print_xmmfPc(float %in, i8* %s) nounwind {
entry:
  %in_addr = alloca float
  %s_addr = alloca i8*
  %"alloca point" = bitcast i32 0 to i32
  store float %in, float* %in_addr
  store i8* %s, i8** %s_addr
  %0 = load float* %in_addr, align 4
  %1 = fpext float %0 to double
  %2 = load i8** %s_addr, align 8
  %3 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i8* %2, double %1) nounwind
  br label %return

return:                                           ; preds = %entry
  ret void
}

declare i32 @printf(i8* noalias, ...)

define i32 @main(i32 %argc, i8** %argv) nounwind {
entry:
  %argc_addr = alloca i32
  %argv_addr = alloca i8**
  %retval = alloca i32
  %_M4_ret = alloca i8*
  %_M4_i = alloca i32
  %_M4_i1 = alloca i32
  %_M4_i2 = alloca i32
  %outputFile = alloca i8*
  %inputFile = alloca i8*
  %rv = alloca i32
  %buffer2 = alloca i32*
  %buffer = alloca float*
  %loopnum = alloca i32
  %i = alloca i32
  %file = alloca %struct.FILE*
  %saved_stack.74 = alloca i8*
  %0 = alloca i32
  %tids.60 = alloca [0 x i32]*
  %1 = alloca i64
  %iftmp.46 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store i32 %argc, i32* %argc_addr
  store i8** %argv, i8*** %argv_addr
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack.74, align 8
  %3 = call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @.str1, i64 0, i64 0)) nounwind
  %4 = call i32 @fflush(%struct.FILE* null) nounwind
  %5 = load i32* %argc_addr, align 4
  %6 = icmp ne i32 %5, 4
  br i1 %6, label %bb, label %bb3

bb:                                               ; preds = %entry
  %7 = load i8*** %argv_addr, align 8
  %8 = getelementptr inbounds i8** %7, i64 0
  %9 = load i8** %8, align 1
  %10 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([48 x i8]* @.str2, i64 0, i64 0), i8* %9) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb3:                                              ; preds = %entry
  %11 = load i8*** %argv_addr, align 8
  %12 = getelementptr inbounds i8** %11, i64 1
  %13 = load i8** %12, align 1
  %14 = call i32 @atoi(i8* %13) nounwind readonly
  store i32 %14, i32* @nThreads, align 4
  %15 = load i8*** %argv_addr, align 8
  %16 = getelementptr inbounds i8** %15, i64 2
  %17 = load i8** %16, align 1
  store i8* %17, i8** %inputFile, align 8
  %18 = load i8*** %argv_addr, align 8
  %19 = getelementptr inbounds i8** %18, i64 3
  %20 = load i8** %19, align 1
  store i8* %20, i8** %outputFile, align 8
  %21 = load i8** %inputFile, align 8
  %22 = call %struct.FILE* @fopen(i8* noalias %21, i8* noalias getelementptr inbounds ([2 x i8]* @.str3, i64 0, i64 0)) nounwind
  store %struct.FILE* %22, %struct.FILE** %file, align 8
  %23 = load %struct.FILE** %file, align 8
  %24 = icmp eq %struct.FILE* %23, null
  br i1 %24, label %bb4, label %bb5

bb4:                                              ; preds = %bb3
  %25 = load i8** %inputFile, align 8
  %26 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([32 x i8]* @.str4, i64 0, i64 0), i8* %25) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb5:                                              ; preds = %bb3
  %27 = load %struct.FILE** %file, align 8
  %28 = call i32 (%struct.FILE*, i8*, ...)* @fscanf(%struct.FILE* noalias %27, i8* noalias getelementptr inbounds ([3 x i8]* @.str5, i64 0, i64 0), i32* @numOptions) nounwind
  store i32 %28, i32* %rv, align 4
  %29 = load i32* %rv, align 4
  %30 = icmp ne i32 %29, 1
  br i1 %30, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %31 = load i8** %inputFile, align 8
  %32 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([37 x i8]* @.str6, i64 0, i64 0), i8* %31) nounwind
  %33 = load %struct.FILE** %file, align 8
  %34 = call i32 @fclose(%struct.FILE* %33) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb7:                                              ; preds = %bb5
  %35 = load i32* @nThreads, align 4
  %36 = load i32* @numOptions, align 4
  %37 = icmp sgt i32 %35, %36
  br i1 %37, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %38 = call i32 @puts(i8* getelementptr inbounds ([81 x i8]* @.str7, i64 0, i64 0)) nounwind
  %39 = load i32* @numOptions, align 4
  store i32 %39, i32* @nThreads, align 4
  br label %bb9

bb9:                                              ; preds = %bb8, %bb7
  %40 = load i32* @numOptions, align 4
  %41 = sext i32 %40 to i64
  %42 = mul i64 %41, 36
  %43 = call noalias i8* @malloc(i64 %42) nounwind
  %44 = bitcast i8* %43 to %struct.OptionData*
  store %struct.OptionData* %44, %struct.OptionData** @data, align 8
  %45 = load i32* @numOptions, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 %46, 4
  %48 = call noalias i8* @malloc(i64 %47) nounwind
  %49 = bitcast i8* %48 to float*
  store float* %49, float** @prices, align 8
  store i32 0, i32* %loopnum, align 4
  br label %bb13

bb10:                                             ; preds = %bb13
  %50 = load %struct.OptionData** @data, align 8
  %51 = load i32* %loopnum, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.OptionData* %50, i64 %52
  %54 = getelementptr inbounds %struct.OptionData* %53, i32 0, i32 8
  %55 = load %struct.OptionData** @data, align 8
  %56 = load i32* %loopnum, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.OptionData* %55, i64 %57
  %59 = getelementptr inbounds %struct.OptionData* %58, i32 0, i32 7
  %60 = load %struct.OptionData** @data, align 8
  %61 = load i32* %loopnum, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.OptionData* %60, i64 %62
  %64 = getelementptr inbounds %struct.OptionData* %63, i32 0, i32 6
  %65 = load %struct.OptionData** @data, align 8
  %66 = load i32* %loopnum, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.OptionData* %65, i64 %67
  %69 = getelementptr inbounds %struct.OptionData* %68, i32 0, i32 5
  %70 = load %struct.OptionData** @data, align 8
  %71 = load i32* %loopnum, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.OptionData* %70, i64 %72
  %74 = getelementptr inbounds %struct.OptionData* %73, i32 0, i32 4
  %75 = load %struct.OptionData** @data, align 8
  %76 = load i32* %loopnum, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.OptionData* %75, i64 %77
  %79 = getelementptr inbounds %struct.OptionData* %78, i32 0, i32 3
  %80 = load %struct.OptionData** @data, align 8
  %81 = load i32* %loopnum, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct.OptionData* %80, i64 %82
  %84 = getelementptr inbounds %struct.OptionData* %83, i32 0, i32 2
  %85 = load %struct.OptionData** @data, align 8
  %86 = load i32* %loopnum, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.OptionData* %85, i64 %87
  %89 = getelementptr inbounds %struct.OptionData* %88, i32 0, i32 1
  %90 = load %struct.OptionData** @data, align 8
  %91 = load i32* %loopnum, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.OptionData* %90, i64 %92
  %94 = getelementptr inbounds %struct.OptionData* %93, i32 0, i32 0
  %95 = load %struct.FILE** %file, align 8
  %96 = call i32 (%struct.FILE*, i8*, ...)* @fscanf(%struct.FILE* noalias %95, i8* noalias getelementptr inbounds ([27 x i8]* @.str8, i64 0, i64 0), float* %94, float* %89, float* %84, float* %79, float* %74, float* %69, i8* %64, float* %59, float* %54) nounwind
  store i32 %96, i32* %rv, align 4
  %97 = load i32* %rv, align 4
  %98 = icmp ne i32 %97, 9
  br i1 %98, label %bb11, label %bb12

bb11:                                             ; preds = %bb10
  %99 = load i8** %inputFile, align 8
  %100 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([37 x i8]* @.str6, i64 0, i64 0), i8* %99) nounwind
  %101 = load %struct.FILE** %file, align 8
  %102 = call i32 @fclose(%struct.FILE* %101) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb12:                                             ; preds = %bb10
  %103 = load i32* %loopnum, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %loopnum, align 4
  br label %bb13

bb13:                                             ; preds = %bb12, %bb9
  %105 = load i32* @numOptions, align 4
  %106 = load i32* %loopnum, align 4
  %107 = icmp slt i32 %106, %105
  br i1 %107, label %bb10, label %bb14

bb14:                                             ; preds = %bb13
  %108 = load %struct.FILE** %file, align 8
  %109 = call i32 @fclose(%struct.FILE* %108) nounwind
  store i32 %109, i32* %rv, align 4
  %110 = load i32* %rv, align 4
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %bb15, label %bb16

bb15:                                             ; preds = %bb14
  %112 = load i8** %inputFile, align 8
  %113 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([33 x i8]* @.str9, i64 0, i64 0), i8* %112) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb16:                                             ; preds = %bb14
  %114 = call i32 @pthread_mutexattr_init(%struct.pthread_mutexattr_t* @_M4_normalMutexAttr) nounwind
  %115 = load i32* @nThreads, align 4
  store i32 %115, i32* @_M4_numThreads, align 4
  store i32 0, i32* %_M4_i2, align 4
  br label %bb18

bb17:                                             ; preds = %bb18
  %116 = load i32* %_M4_i2, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [128 x i64]* @_M4_threadsTable, i64 0, i64 %117
  store i64 -1, i64* %118, align 8
  %119 = load i32* %_M4_i2, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %_M4_i2, align 4
  br label %bb18

bb18:                                             ; preds = %bb17, %bb16
  %121 = load i32* %_M4_i2, align 4
  %122 = icmp sle i32 %121, 127
  br i1 %122, label %bb17, label %bb19

bb19:                                             ; preds = %bb18
  %123 = load i32* @numOptions, align 4
  %124 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([20 x i8]* @.str10, i64 0, i64 0), i32 %123) nounwind
  %125 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([17 x i8]* @.str11, i64 0, i64 0), i32 100) nounwind
  %126 = load i32* @numOptions, align 4
  %127 = sext i32 %126 to i64
  %128 = mul i64 %127, 20
  %129 = add i64 %128, 256
  %130 = call noalias i8* @malloc(i64 %129) nounwind
  %131 = bitcast i8* %130 to float*
  store float* %131, float** %buffer, align 8
  %132 = load float** %buffer, align 8
  %133 = ptrtoint float* %132 to i64
  %134 = add i64 %133, 256
  %135 = and i64 %134, -64
  %136 = inttoptr i64 %135 to float*
  store float* %136, float** @sptprice, align 8
  %137 = load float** @sptprice, align 8
  %138 = load i32* @numOptions, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds float* %137, i64 %139
  store float* %140, float** @strike, align 8
  %141 = load float** @strike, align 8
  %142 = load i32* @numOptions, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float* %141, i64 %143
  store float* %144, float** @rate, align 8
  %145 = load float** @rate, align 8
  %146 = load i32* @numOptions, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float* %145, i64 %147
  store float* %148, float** @volatility, align 8
  %149 = load float** @volatility, align 8
  %150 = load i32* @numOptions, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float* %149, i64 %151
  store float* %152, float** @otime, align 8
  %153 = load i32* @numOptions, align 4
  %154 = sext i32 %153 to i64
  %155 = mul i64 %154, 4
  %156 = add i64 %155, 256
  %157 = call noalias i8* @malloc(i64 %156) nounwind
  %158 = bitcast i8* %157 to i32*
  store i32* %158, i32** %buffer2, align 8
  %159 = load i32** %buffer2, align 8
  %160 = ptrtoint i32* %159 to i64
  %161 = add i64 %160, 256
  %162 = and i64 %161, -64
  %163 = inttoptr i64 %162 to i32*
  store i32* %163, i32** @otype, align 8
  store i32 0, i32* %i, align 4
  br label %bb24

bb20:                                             ; preds = %bb24
  %164 = load i32** @otype, align 8
  %165 = load %struct.OptionData** @data, align 8
  %166 = load i32* %i, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds %struct.OptionData* %165, i64 %167
  %169 = getelementptr inbounds %struct.OptionData* %168, i32 0, i32 6
  %170 = load i8* %169, align 4
  %171 = icmp eq i8 %170, 80
  br i1 %171, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 1, i32* %iftmp.46, align 4
  br label %bb23

bb22:                                             ; preds = %bb20
  store i32 0, i32* %iftmp.46, align 4
  br label %bb23

bb23:                                             ; preds = %bb22, %bb21
  %172 = load i32* %i, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32* %164, i64 %173
  %175 = load i32* %iftmp.46, align 4
  store i32 %175, i32* %174, align 1
  %176 = load float** @sptprice, align 8
  %177 = load %struct.OptionData** @data, align 8
  %178 = load i32* %i, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds %struct.OptionData* %177, i64 %179
  %181 = getelementptr inbounds %struct.OptionData* %180, i32 0, i32 0
  %182 = load float* %181, align 4
  %183 = load i32* %i, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float* %176, i64 %184
  store float %182, float* %185, align 1
  %186 = load float** @strike, align 8
  %187 = load %struct.OptionData** @data, align 8
  %188 = load i32* %i, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.OptionData* %187, i64 %189
  %191 = getelementptr inbounds %struct.OptionData* %190, i32 0, i32 1
  %192 = load float* %191, align 4
  %193 = load i32* %i, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float* %186, i64 %194
  store float %192, float* %195, align 1
  %196 = load float** @rate, align 8
  %197 = load %struct.OptionData** @data, align 8
  %198 = load i32* %i, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds %struct.OptionData* %197, i64 %199
  %201 = getelementptr inbounds %struct.OptionData* %200, i32 0, i32 2
  %202 = load float* %201, align 4
  %203 = load i32* %i, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float* %196, i64 %204
  store float %202, float* %205, align 1
  %206 = load float** @volatility, align 8
  %207 = load %struct.OptionData** @data, align 8
  %208 = load i32* %i, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.OptionData* %207, i64 %209
  %211 = getelementptr inbounds %struct.OptionData* %210, i32 0, i32 4
  %212 = load float* %211, align 4
  %213 = load i32* %i, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float* %206, i64 %214
  store float %212, float* %215, align 1
  %216 = load float** @otime, align 8
  %217 = load %struct.OptionData** @data, align 8
  %218 = load i32* %i, align 4
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds %struct.OptionData* %217, i64 %219
  %221 = getelementptr inbounds %struct.OptionData* %220, i32 0, i32 5
  %222 = load float* %221, align 4
  %223 = load i32* %i, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds float* %216, i64 %224
  store float %222, float* %225, align 1
  %226 = load i32* %i, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %i, align 4
  br label %bb24

bb24:                                             ; preds = %bb23, %bb19
  %228 = load i32* @numOptions, align 4
  %229 = load i32* %i, align 4
  %230 = icmp slt i32 %229, %228
  br i1 %230, label %bb20, label %bb25

bb25:                                             ; preds = %bb24
  %231 = load i32* @numOptions, align 4
  %232 = sext i32 %231 to i64
  %233 = mul i64 %232, 40
  %234 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([18 x i8]* @.str12, i64 0, i64 0), i64 %233) nounwind
  %235 = load i32* @nThreads, align 4
  %236 = sext i32 %235 to i64
  %237 = sub i64 %236, 1
  store i64 %237, i64* %1, align 8
  %238 = load i64* %1, align 8
  %239 = load i64* %1, align 8
  %240 = add i64 %239, 1
  %241 = mul i64 %240, 32
  %242 = load i64* %1, align 8
  %243 = add i64 %242, 1
  %244 = mul i64 %243, 4
  %245 = load i64* %1, align 8
  %246 = add i64 %245, 1
  %247 = mul i64 %246, 32
  %248 = load i64* %1, align 8
  %249 = add i64 %248, 1
  %250 = mul i64 %249, 4
  %251 = trunc i64 %250 to i32
  %252 = alloca i8, i32 %251
  %253 = bitcast i8* %252 to [0 x i32]*
  store [0 x i32]* %253, [0 x i32]** %tids.60, align 8
  store i32 0, i32* %i, align 4
  br label %bb31

bb26:                                             ; preds = %bb31
  %254 = load i32* %i, align 4
  %255 = load [0 x i32]** %tids.60, align 8
  %256 = sext i32 %254 to i64
  %257 = getelementptr inbounds [0 x i32]* %255, i64 0, i64 %256
  %258 = load i32* %i, align 4
  store i32 %258, i32* %257, align 4
  store i32 0, i32* %_M4_i1, align 4
  br label %bb29

bb27:                                             ; preds = %bb29
  %259 = load i32* %_M4_i1, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [128 x i64]* @_M4_threadsTable, i64 0, i64 %260
  %262 = load i64* %261, align 8
  %263 = icmp eq i64 %262, -1
  br i1 %263, label %bb30, label %bb28

bb28:                                             ; preds = %bb27
  %264 = load i32* %_M4_i1, align 4
  %265 = add nsw i32 %264, 1
  store i32 %265, i32* %_M4_i1, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %bb26
  %266 = load i32* %_M4_i1, align 4
  %267 = icmp sle i32 %266, 127
  br i1 %267, label %bb27, label %bb30

bb30:                                             ; preds = %bb29, %bb27
  %268 = load i32* %i, align 4
  %269 = load [0 x i32]** %tids.60, align 8
  %270 = sext i32 %268 to i64
  %271 = getelementptr inbounds [0 x i32]* %269, i64 0, i64 %270
  %272 = load i32* %_M4_i1, align 4
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [128 x i64]* @_M4_threadsTable, i64 0, i64 %273
  %275 = bitcast i32* %271 to i8*
  %276 = call i32 @pthread_create(i64* noalias %274, %struct.pthread_attr_t* noalias null, i8* (i8*)* bitcast (i32 (i8*)* @_Z9bs_threadPv to i8* (i8*)*), i8* noalias %275) nounwind
  %277 = load i32* %i, align 4
  %278 = add nsw i32 %277, 1
  store i32 %278, i32* %i, align 4
  br label %bb31

bb31:                                             ; preds = %bb30, %bb25
  %279 = load i32* @nThreads, align 4
  %280 = load i32* %i, align 4
  %281 = icmp slt i32 %280, %279
  br i1 %281, label %bb26, label %bb32

bb32:                                             ; preds = %bb31
  store i32 0, i32* %_M4_i, align 4
  br label %bb35

bb33:                                             ; preds = %bb35
  %282 = load i32* %_M4_i, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds [128 x i64]* @_M4_threadsTable, i64 0, i64 %283
  %285 = load i64* %284, align 8
  %286 = icmp eq i64 %285, -1
  br i1 %286, label %bb36, label %bb34

bb34:                                             ; preds = %bb33
  %287 = load i32* %_M4_i, align 4
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds [128 x i64]* @_M4_threadsTable, i64 0, i64 %288
  %290 = load i64* %289, align 8
  %291 = call i32 @pthread_join(i64 %290, i8** %_M4_ret) nounwind
  %292 = load i32* %_M4_i, align 4
  %293 = add nsw i32 %292, 1
  store i32 %293, i32* %_M4_i, align 4
  br label %bb35

bb35:                                             ; preds = %bb34, %bb32
  %294 = load i32* %_M4_i, align 4
  %295 = icmp sle i32 %294, 127
  br i1 %295, label %bb33, label %bb36

bb36:                                             ; preds = %bb35, %bb33
  %296 = load i8** %outputFile, align 8
  %297 = call %struct.FILE* @fopen(i8* noalias %296, i8* noalias getelementptr inbounds ([2 x i8]* @.str13, i64 0, i64 0)) nounwind
  store %struct.FILE* %297, %struct.FILE** %file, align 8
  %298 = load %struct.FILE** %file, align 8
  %299 = icmp eq %struct.FILE* %298, null
  br i1 %299, label %bb37, label %bb38

bb37:                                             ; preds = %bb36
  %300 = load i8** %outputFile, align 8
  %301 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([32 x i8]* @.str4, i64 0, i64 0), i8* %300) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb38:                                             ; preds = %bb36
  %302 = load i32* @numOptions, align 4
  %303 = load %struct.FILE** %file, align 8
  %304 = call i32 (%struct.FILE*, i8*, ...)* @fprintf(%struct.FILE* noalias %303, i8* noalias getelementptr inbounds ([4 x i8]* @.str14, i64 0, i64 0), i32 %302) nounwind
  store i32 %304, i32* %rv, align 4
  %305 = load i32* %rv, align 4
  %306 = icmp slt i32 %305, 0
  br i1 %306, label %bb39, label %bb40

bb39:                                             ; preds = %bb38
  %307 = load i8** %outputFile, align 8
  %308 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([36 x i8]* @.str15, i64 0, i64 0), i8* %307) nounwind
  %309 = load %struct.FILE** %file, align 8
  %310 = call i32 @fclose(%struct.FILE* %309) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb40:                                             ; preds = %bb38
  store i32 0, i32* %i, align 4
  br label %bb44

bb41:                                             ; preds = %bb44
  %311 = load float** @prices, align 8
  %312 = load i32* %i, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds float* %311, i64 %313
  %315 = load float* %314, align 1
  %316 = fpext float %315 to double
  %317 = load %struct.FILE** %file, align 8
  %318 = call i32 (%struct.FILE*, i8*, ...)* @fprintf(%struct.FILE* noalias %317, i8* noalias getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0), double %316) nounwind
  store i32 %318, i32* %rv, align 4
  %319 = load i32* %rv, align 4
  %320 = icmp slt i32 %319, 0
  br i1 %320, label %bb42, label %bb43

bb42:                                             ; preds = %bb41
  %321 = load i8** %outputFile, align 8
  %322 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([36 x i8]* @.str15, i64 0, i64 0), i8* %321) nounwind
  %323 = load %struct.FILE** %file, align 8
  %324 = call i32 @fclose(%struct.FILE* %323) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb43:                                             ; preds = %bb41
  %325 = load i32* %i, align 4
  %326 = add nsw i32 %325, 1
  store i32 %326, i32* %i, align 4
  br label %bb44

bb44:                                             ; preds = %bb43, %bb40
  %327 = load i32* @numOptions, align 4
  %328 = load i32* %i, align 4
  %329 = icmp slt i32 %328, %327
  br i1 %329, label %bb41, label %bb45

bb45:                                             ; preds = %bb44
  %330 = load %struct.FILE** %file, align 8
  %331 = call i32 @fclose(%struct.FILE* %330) nounwind
  store i32 %331, i32* %rv, align 4
  %332 = load i32* %rv, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %bb46, label %bb47

bb46:                                             ; preds = %bb45
  %334 = load i8** %outputFile, align 8
  %335 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([33 x i8]* @.str9, i64 0, i64 0), i8* %334) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb47:                                             ; preds = %bb45
  %336 = load %struct.OptionData** @data, align 8
  %337 = bitcast %struct.OptionData* %336 to i8*
  call void @free(i8* %337) nounwind
  %338 = load float** @prices, align 8
  %339 = bitcast float* %338 to i8*
  call void @free(i8* %339) nounwind
  store i32 0, i32* %0, align 4
  %340 = load i8** %saved_stack.74, align 8
  call void @llvm.stackrestore(i8* %340)
  %341 = load i32* %0, align 4
  store i32 %341, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb47
  %retval48 = load i32* %retval
  ret i32 %retval48
}

declare i8* @llvm.stacksave() nounwind

declare i32 @puts(i8*)

declare i32 @fflush(%struct.FILE*)

declare void @exit(i32) noreturn nounwind

declare i32 @atoi(i8*) nounwind readonly

declare %struct.FILE* @fopen(i8* noalias, i8* noalias)

declare i32 @fscanf(%struct.FILE* noalias, i8* noalias, ...)

declare i32 @fclose(%struct.FILE*)

declare noalias i8* @malloc(i64) nounwind

declare i32 @pthread_mutexattr_init(%struct.pthread_mutexattr_t*) nounwind

define i32 @_Z9bs_threadPv(i8* %tid_ptr) nounwind {
entry:
  %tid_ptr_addr = alloca i8*
  %retval = alloca i32
  %end = alloca i32
  %start = alloca i32
  %tid = alloca i32
  %priceDelta = alloca float
  %price = alloca float
  %j = alloca i32
  %i = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store i8* %tid_ptr, i8** %tid_ptr_addr
  %1 = load i8** %tid_ptr_addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  store i32 %3, i32* %tid, align 4
  %4 = load i32* @numOptions, align 4
  %5 = load i32* @nThreads, align 4
  %6 = sdiv i32 %4, %5
  %7 = load i32* %tid, align 4
  %8 = mul i32 %6, %7
  store i32 %8, i32* %start, align 4
  %9 = load i32* @numOptions, align 4
  %10 = load i32* @nThreads, align 4
  %11 = sdiv i32 %9, %10
  %12 = load i32* %start, align 4
  %13 = add nsw i32 %11, %12
  store i32 %13, i32* %end, align 4
  store i32 0, i32* %j, align 4
  br label %bb4

bb:                                               ; preds = %bb4
  %14 = load i32* %start, align 4
  store i32 %14, i32* %i, align 4
  br label %bb2

bb1:                                              ; preds = %bb2
  %15 = load i32** @otype, align 8
  %16 = load i32* %i, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32* %15, i64 %17
  %19 = load i32* %18, align 1
  %20 = load float** @otime, align 8
  %21 = load i32* %i, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds float* %20, i64 %22
  %24 = load float* %23, align 1
  %25 = load float** @volatility, align 8
  %26 = load i32* %i, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float* %25, i64 %27
  %29 = load float* %28, align 1
  %30 = load float** @rate, align 8
  %31 = load i32* %i, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds float* %30, i64 %32
  %34 = load float* %33, align 1
  %35 = load float** @strike, align 8
  %36 = load i32* %i, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float* %35, i64 %37
  %39 = load float* %38, align 1
  %40 = load float** @sptprice, align 8
  %41 = load i32* %i, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float* %40, i64 %42
  %44 = load float* %43, align 1
  %45 = call float @_Z19BlkSchlsEqEuroNoDivfffffif(float %44, float %39, float %34, float %29, float %24, i32 %19, float 0.000000e+00) nounwind
  store float %45, float* %price, align 4
  %46 = load float** @prices, align 8
  %47 = load i32* %i, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float* %46, i64 %48
  %50 = load float* %price, align 4
  store float %50, float* %49, align 1
  %51 = load i32* %i, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %i, align 4
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %53 = load i32* %i, align 4
  %54 = load i32* %end, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %bb1, label %bb3

bb3:                                              ; preds = %bb2
  %56 = load i32* %j, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %j, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %entry
  %58 = load i32* %j, align 4
  %59 = icmp sle i32 %58, 99
  br i1 %59, label %bb, label %bb5

bb5:                                              ; preds = %bb4
  store i32 0, i32* %0, align 4
  %60 = load i32* %0, align 4
  store i32 %60, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb5
  %retval6 = load i32* %retval
  ret i32 %retval6
}

declare i32 @pthread_create(i64* noalias, %struct.pthread_attr_t* noalias, i8* (i8*)*, i8* noalias) nounwind

declare i32 @pthread_join(i64, i8**)

declare i32 @fprintf(%struct.FILE* noalias, i8* noalias, ...)

declare void @free(i8*) nounwind

declare void @llvm.stackrestore(i8*) nounwind

define float @_Z4CNDFf(float %InputX) nounwind {
entry:
  %InputX_addr = alloca float
  %retval = alloca float
  %xLocal_3 = alloca float
  %xLocal_2 = alloca float
  %xLocal_1 = alloca float
  %xLocal = alloca float
  %xK2_5 = alloca float
  %xK2_4 = alloca float
  %xK2_3 = alloca float
  %xK2_2 = alloca float
  %xK2 = alloca float
  %expValues = alloca float
  %xNPrimeofX = alloca float
  %xInput = alloca float
  %OutputX = alloca float
  %sign = alloca i32
  %0 = alloca float
  %"alloca point" = bitcast i32 0 to i32
  store float %InputX, float* %InputX_addr
  %1 = load float* %InputX_addr, align 4
  %2 = fcmp olt float %1, 0.000000e+00
  br i1 %2, label %bb, label %bb1

bb:                                               ; preds = %entry
  %3 = load float* %InputX_addr, align 4
  %4 = fsub float -0.000000e+00, %3
  store float %4, float* %InputX_addr, align 4
  store i32 1, i32* %sign, align 4
  br label %bb2

bb1:                                              ; preds = %entry
  store i32 0, i32* %sign, align 4
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %5 = load float* %InputX_addr, align 4
  store float %5, float* %xInput, align 4
  %6 = load float* %InputX_addr, align 4
  %7 = fmul float %6, -5.000000e-01
  %8 = load float* %InputX_addr, align 4
  %9 = fmul float %7, %8
  %10 = fpext float %9 to double
  %11 = call double @llvm.exp.f64(double %10)
  %12 = fptrunc double %11 to float
  store float %12, float* %expValues, align 4
  %13 = load float* %expValues, align 4
  store float %13, float* %xNPrimeofX, align 4
  %14 = load float* %xNPrimeofX, align 4
  %15 = fpext float %14 to double
  %16 = fmul double %15, 0x3FD9884533D43651
  %17 = fptrunc double %16 to float
  store float %17, float* %xNPrimeofX, align 4
  %18 = load float* %xInput, align 4
  %19 = fpext float %18 to double
  %20 = fmul double %19, 2.316419e-01
  %21 = fptrunc double %20 to float
  store float %21, float* %xK2, align 4
  %22 = load float* %xK2, align 4
  %23 = fadd float %22, 1.000000e+00
  store float %23, float* %xK2, align 4
  %24 = load float* %xK2, align 4
  %25 = fdiv float 1.000000e+00, %24
  store float %25, float* %xK2, align 4
  %26 = load float* %xK2, align 4
  %27 = load float* %xK2, align 4
  %28 = fmul float %26, %27
  store float %28, float* %xK2_2, align 4
  %29 = load float* %xK2_2, align 4
  %30 = load float* %xK2, align 4
  %31 = fmul float %29, %30
  store float %31, float* %xK2_3, align 4
  %32 = load float* %xK2_3, align 4
  %33 = load float* %xK2, align 4
  %34 = fmul float %32, %33
  store float %34, float* %xK2_4, align 4
  %35 = load float* %xK2_4, align 4
  %36 = load float* %xK2, align 4
  %37 = fmul float %35, %36
  store float %37, float* %xK2_5, align 4
  %38 = load float* %xK2, align 4
  %39 = fpext float %38 to double
  %40 = fmul double %39, 0x3FD470BF3A92F8EC
  %41 = fptrunc double %40 to float
  store float %41, float* %xLocal_1, align 4
  %42 = load float* %xK2_2, align 4
  %43 = fpext float %42 to double
  %44 = fmul double %43, 0xBFD6D1F0E5A8325B
  %45 = fptrunc double %44 to float
  store float %45, float* %xLocal_2, align 4
  %46 = load float* %xK2_3, align 4
  %47 = fpext float %46 to double
  %48 = fmul double %47, 0x3FFC80EF025F5E68
  %49 = fptrunc double %48 to float
  store float %49, float* %xLocal_3, align 4
  %50 = load float* %xLocal_2, align 4
  %51 = load float* %xLocal_3, align 4
  %52 = fadd float %50, %51
  store float %52, float* %xLocal_2, align 4
  %53 = load float* %xK2_4, align 4
  %54 = fpext float %53 to double
  %55 = fmul double %54, 0xBFFD23DD4EF278D0
  %56 = fptrunc double %55 to float
  store float %56, float* %xLocal_3, align 4
  %57 = load float* %xLocal_2, align 4
  %58 = load float* %xLocal_3, align 4
  %59 = fadd float %57, %58
  store float %59, float* %xLocal_2, align 4
  %60 = load float* %xK2_5, align 4
  %61 = fpext float %60 to double
  %62 = fmul double %61, 0x3FF548CDD6F42943
  %63 = fptrunc double %62 to float
  store float %63, float* %xLocal_3, align 4
  %64 = load float* %xLocal_2, align 4
  %65 = load float* %xLocal_3, align 4
  %66 = fadd float %64, %65
  store float %66, float* %xLocal_2, align 4
  %67 = load float* %xLocal_2, align 4
  %68 = load float* %xLocal_1, align 4
  %69 = fadd float %67, %68
  store float %69, float* %xLocal_1, align 4
  %70 = load float* %xLocal_1, align 4
  %71 = load float* %xNPrimeofX, align 4
  %72 = fmul float %70, %71
  store float %72, float* %xLocal, align 4
  %73 = load float* %xLocal, align 4
  %74 = fsub float 1.000000e+00, %73
  store float %74, float* %xLocal, align 4
  %75 = load float* %xLocal, align 4
  store float %75, float* %OutputX, align 4
  %76 = load i32* %sign, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %bb3, label %bb4

bb3:                                              ; preds = %bb2
  %78 = load float* %OutputX, align 4
  %79 = fsub float 1.000000e+00, %78
  store float %79, float* %OutputX, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %bb2
  %80 = load float* %OutputX, align 4
  store float %80, float* %0, align 4
  %81 = load float* %0, align 4
  store float %81, float* %retval, align 4
  br label %return

return:                                           ; preds = %bb4
  %retval5 = load float* %retval
  ret float %retval5
}

declare double @llvm.exp.f64(double) nounwind readonly

define float @_Z19BlkSchlsEqEuroNoDivfffffif(float %sptprice, float %strike, float %rate, float %volatility, float %time, i32 %otype, float %timet) nounwind {
entry:
  %sptprice_addr = alloca float
  %strike_addr = alloca float
  %rate_addr = alloca float
  %volatility_addr = alloca float
  %time_addr = alloca float
  %otype_addr = alloca i32
  %timet_addr = alloca float
  %retval = alloca float
  %NegNofXd2 = alloca float
  %NegNofXd1 = alloca float
  %NofXd2 = alloca float
  %NofXd1 = alloca float
  %FutureValueX = alloca float
  %d2 = alloca float
  %d1 = alloca float
  %xDen = alloca float
  %xPowerTerm = alloca float
  %xD2 = alloca float
  %xD1 = alloca float
  %xLogTerm = alloca float
  %logValues = alloca float
  %xSqrtTime = alloca float
  %xTime = alloca float
  %xVolatility = alloca float
  %xRiskFreeRate = alloca float
  %xStrikePrice = alloca float
  %xStockPrice = alloca float
  %OptionPrice = alloca float
  %0 = alloca float
  %"alloca point" = bitcast i32 0 to i32
  store float %sptprice, float* %sptprice_addr
  store float %strike, float* %strike_addr
  store float %rate, float* %rate_addr
  store float %volatility, float* %volatility_addr
  store float %time, float* %time_addr
  store i32 %otype, i32* %otype_addr
  store float %timet, float* %timet_addr
  %1 = load float* %sptprice_addr, align 4
  store float %1, float* %xStockPrice, align 4
  %2 = load float* %strike_addr, align 4
  store float %2, float* %xStrikePrice, align 4
  %3 = load float* %rate_addr, align 4
  store float %3, float* %xRiskFreeRate, align 4
  %4 = load float* %volatility_addr, align 4
  store float %4, float* %xVolatility, align 4
  %5 = load float* %time_addr, align 4
  store float %5, float* %xTime, align 4
  %6 = load float* %xTime, align 4
  %7 = fpext float %6 to double
  %8 = call double @llvm.sqrt.f64(double %7)
  %9 = fptrunc double %8 to float
  store float %9, float* %xSqrtTime, align 4
  %10 = load float* %sptprice_addr, align 4
  %11 = load float* %strike_addr, align 4
  %12 = fdiv float %10, %11
  %13 = fpext float %12 to double
  %14 = call double @llvm.log.f64(double %13)
  %15 = fptrunc double %14 to float
  store float %15, float* %logValues, align 4
  %16 = load float* %logValues, align 4
  store float %16, float* %xLogTerm, align 4
  %17 = load float* %xVolatility, align 4
  %18 = load float* %xVolatility, align 4
  %19 = fmul float %17, %18
  store float %19, float* %xPowerTerm, align 4
  %20 = load float* %xPowerTerm, align 4
  %21 = fmul float %20, 5.000000e-01
  store float %21, float* %xPowerTerm, align 4
  %22 = load float* %xRiskFreeRate, align 4
  %23 = load float* %xPowerTerm, align 4
  %24 = fadd float %22, %23
  store float %24, float* %xD1, align 4
  %25 = load float* %xD1, align 4
  %26 = load float* %xTime, align 4
  %27 = fmul float %25, %26
  store float %27, float* %xD1, align 4
  %28 = load float* %xD1, align 4
  %29 = load float* %xLogTerm, align 4
  %30 = fadd float %28, %29
  store float %30, float* %xD1, align 4
  %31 = load float* %xVolatility, align 4
  %32 = load float* %xSqrtTime, align 4
  %33 = fmul float %31, %32
  store float %33, float* %xDen, align 4
  %34 = load float* %xD1, align 4
  %35 = load float* %xDen, align 4
  %36 = fdiv float %34, %35
  store float %36, float* %xD1, align 4
  %37 = load float* %xD1, align 4
  %38 = load float* %xDen, align 4
  %39 = fsub float %37, %38
  store float %39, float* %xD2, align 4
  %40 = load float* %xD1, align 4
  store float %40, float* %d1, align 4
  %41 = load float* %xD2, align 4
  store float %41, float* %d2, align 4
  %42 = load float* %d1, align 4
  %43 = call float @_Z4CNDFf(float %42) nounwind
  store float %43, float* %NofXd1, align 4
  %44 = load float* %d2, align 4
  %45 = call float @_Z4CNDFf(float %44) nounwind
  store float %45, float* %NofXd2, align 4
  %46 = load float* %strike_addr, align 4
  %47 = fpext float %46 to double
  %48 = load float* %rate_addr, align 4
  %49 = fsub float -0.000000e+00, %48
  %50 = load float* %time_addr, align 4
  %51 = fmul float %49, %50
  %52 = fpext float %51 to double
  %53 = call double @llvm.exp.f64(double %52)
  %54 = fmul double %47, %53
  %55 = fptrunc double %54 to float
  store float %55, float* %FutureValueX, align 4
  %56 = load i32* %otype_addr, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %bb, label %bb1

bb:                                               ; preds = %entry
  %58 = load float* %sptprice_addr, align 4
  %59 = load float* %NofXd1, align 4
  %60 = fmul float %58, %59
  %61 = load float* %FutureValueX, align 4
  %62 = load float* %NofXd2, align 4
  %63 = fmul float %61, %62
  %64 = fsub float %60, %63
  store float %64, float* %OptionPrice, align 4
  br label %bb2

bb1:                                              ; preds = %entry
  %65 = load float* %NofXd1, align 4
  %66 = fsub float 1.000000e+00, %65
  store float %66, float* %NegNofXd1, align 4
  %67 = load float* %NofXd2, align 4
  %68 = fsub float 1.000000e+00, %67
  store float %68, float* %NegNofXd2, align 4
  %69 = load float* %FutureValueX, align 4
  %70 = load float* %NegNofXd2, align 4
  %71 = fmul float %69, %70
  %72 = load float* %sptprice_addr, align 4
  %73 = load float* %NegNofXd1, align 4
  %74 = fmul float %72, %73
  %75 = fsub float %71, %74
  store float %75, float* %OptionPrice, align 4
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %76 = load float* %OptionPrice, align 4
  store float %76, float* %0, align 4
  %77 = load float* %0, align 4
  store float %77, float* %retval, align 4
  br label %return

return:                                           ; preds = %bb2
  %retval3 = load float* %retval
  ret float %retval3
}

declare double @llvm.sqrt.f64(double) nounwind readonly

declare double @llvm.log.f64(double) nounwind readonly
