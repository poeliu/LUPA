; ModuleID = 'swaptions.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32, void ()* }
%struct..0__pthread_mutex_s = type { i32, i32, i32, i32, i32, i32, %struct.__pthread_list_t }
%struct.FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct.FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct.FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct.FILE*, i32 }
%struct.__pthread_list_t = type { %struct.__pthread_list_t*, %struct.__pthread_list_t* }
%struct.parm = type { i32, double, double, double, double, double, double, double, i32, double, i32, double*, double** }
%struct.pthread_attr_t = type { i64, [48 x i8] }
%struct.pthread_mutex_t = type { %struct..0__pthread_mutex_s }
%struct.pthread_mutexattr_t = type { i32 }
%"struct.std::ios_base::Init" = type <{ i8 }>

@_ZL1a = internal global [4 x double] [double 0x40040D931B28620D, double 0xC0329D70AE54A3DE, double 0x4044B212C473C6FC, double 0xC03970E957377778], align 32
@_ZL1b = internal global [4 x double] [double 0xC020F2700655072D, double 0x403715579181502C, double 0xC0350FEF0701E57D, double 0x40090BF020558A47], align 32
@_ZL1c = internal global [9 x double] [double 0x3FD59932C3E40368, double 0x3FEF3CC6CF8BC12D, double 0x3FC4950726690682, double 0x3F9C4EAD73E44237, double 0x3F6F7643E53E6785, double 0x3F39E62EA0A98846, double 0x3F00DEB205F58208, double 0x3E9361D5709B7B56, double 0x3E9A93C50A02D5AD], align 32
@stderr = external global %struct.FILE*
@.str = private constant [37 x i8] c"Numerical Recipes run-time error...\0A\00", align 8
@.str1 = private constant [4 x i8] c"%s\0A\00", align 1
@.str2 = private constant [29 x i8] c"...now exiting to system...\0A\00", align 1
@.str3 = private constant [34 x i8] c"allocation failure 1 in dmatrix()\00", align 8
@.str4 = private constant [34 x i8] c"allocation failure 2 in dmatrix()\00", align 8
@.str5 = private constant [32 x i8] c"allocation failure in dvector()\00", align 8
@.str6 = private constant [32 x i8] c"allocation failure in ivector()\00", align 8
@.str7 = private constant [26 x i8] c"gaussj: Singular Matrix-1\00", align 1
@.str8 = private constant [26 x i8] c"gaussj: Singular Matrix-2\00", align 1
@NUM_TRIALS = global i32 102400
@_ZStL8__ioinit = internal global %"struct.std::ios_base::Init" zeroinitializer
@__dso_handle = external global i8*
@.str9 = private constant [35 x i8] c"PARSEC Benchmark Suite Version 2.1\00", align 8
@.str110 = private constant [122 x i8] c" usage: \0A\09-ns [number of swaptions (should be > number of threads]\0A\09-sm [number of simulations]\0A\09-nt [number of threads]\0A\00", align 8
@.str211 = private constant [4 x i8] c"-sm\00", align 1
@.str312 = private constant [4 x i8] c"-nt\00", align 1
@nThreads = global i32 1
@.str413 = private constant [4 x i8] c"-ns\00", align 1
@nSwaptions = global i32 1
@.str514 = private constant [75 x i8] c"Number of Simulations: %d,  Number of threads: %d Number of swaptions: %d\0A\00", align 8
@.str615 = private constant [45 x i8] c"Number of threads must be between 1 and %d.\0A\00", align 8
@iN = global i32 11
@iFactors = global i32 3
@swaptions = global %struct.parm* null
@dYears = global double 5.500000e+00
@.str716 = private constant [55 x i8] c"Swaption%d: [SwaptionPrice: %.10lf StdError: %.10lf] \0A\00", align 8
@.str817 = private constant [14 x i8] c"iSuccess == 1\00", align 1
@.str918 = private constant [19 x i8] c"HJM_Securities.cpp\00", align 1
@_ZZ6workerPvE19__PRETTY_FUNCTION__ = internal constant [20 x i8] c"void* worker(void*)\00", align 16
@dSumSimSwaptionPrice_global_ptr = global double* null
@dSumSquareSimSwaptionPrice_global_ptr = global double* null
@chunksize = global i32 0
@llvm.global_ctors = appending global [1 x %0] [%0 { i32 65535, void ()* @_GLOBAL__I_NUM_TRIALS }]

@_ZL20__gthrw_pthread_oncePiPFvvE = alias weak i32 (i32*, void ()*)* @pthread_once
@_ZL27__gthrw_pthread_getspecificj = alias weak i8* (i32)* @pthread_getspecific
@_ZL27__gthrw_pthread_setspecificjPKv = alias weak i32 (i32, i8*)* @pthread_setspecific
@_ZL22__gthrw_pthread_createPmPK14pthread_attr_tPFPvS3_ES3_ = alias weak i32 (i64*, %struct.pthread_attr_t*, i8* (i8*)*, i8*)* @pthread_create
@_ZL22__gthrw_pthread_cancelm = alias weak i32 (i64)* @pthread_cancel
@_ZL26__gthrw_pthread_mutex_lockP15pthread_mutex_t = alias weak i32 (%struct.pthread_mutex_t*)* @pthread_mutex_lock
@_ZL29__gthrw_pthread_mutex_trylockP15pthread_mutex_t = alias weak i32 (%struct.pthread_mutex_t*)* @pthread_mutex_trylock
@_ZL28__gthrw_pthread_mutex_unlockP15pthread_mutex_t = alias weak i32 (%struct.pthread_mutex_t*)* @pthread_mutex_unlock
@_ZL26__gthrw_pthread_mutex_initP15pthread_mutex_tPK19pthread_mutexattr_t = alias weak i32 (%struct.pthread_mutex_t*, %struct.pthread_mutexattr_t*)* @pthread_mutex_init
@_ZL26__gthrw_pthread_key_createPjPFvPvE = alias weak i32 (i32*, void (i8*)*)* @pthread_key_create
@_ZL26__gthrw_pthread_key_deletej = alias weak i32 (i32)* @pthread_key_delete
@_ZL30__gthrw_pthread_mutexattr_initP19pthread_mutexattr_t = alias weak i32 (%struct.pthread_mutexattr_t*)* @pthread_mutexattr_init
@_ZL33__gthrw_pthread_mutexattr_settypeP19pthread_mutexattr_ti = alias weak i32 (%struct.pthread_mutexattr_t*, i32)* @pthread_mutexattr_settype
@_ZL33__gthrw_pthread_mutexattr_destroyP19pthread_mutexattr_t = alias weak i32 (%struct.pthread_mutexattr_t*)* @pthread_mutexattr_destroy

define double @_Z12CumNormalInvd(double %u) nounwind {
entry:
  %u_addr = alloca double
  %retval = alloca double
  %r = alloca double
  %x = alloca double
  %0 = alloca double
  %"alloca point" = bitcast i32 0 to i32
  store double %u, double* %u_addr
  %1 = load double* %u_addr, align 8
  %2 = fsub double %1, 5.000000e-01
  store double %2, double* %x, align 8
  %3 = load double* %x, align 8
  %4 = call double @fabs(double %3) nounwind readnone
  %5 = fcmp olt double %4, 4.200000e-01
  br i1 %5, label %bb, label %bb1

bb:                                               ; preds = %entry
  %6 = load double* %x, align 8
  %7 = load double* %x, align 8
  %8 = fmul double %6, %7
  store double %8, double* %r, align 8
  %9 = load double* getelementptr inbounds ([4 x double]* @_ZL1a, i64 0, i64 3), align 8
  %10 = load double* %r, align 8
  %11 = fmul double %9, %10
  %12 = load double* getelementptr inbounds ([4 x double]* @_ZL1a, i64 0, i64 2), align 8
  %13 = fadd double %11, %12
  %14 = load double* %r, align 8
  %15 = fmul double %13, %14
  %16 = load double* getelementptr inbounds ([4 x double]* @_ZL1a, i64 0, i64 1), align 8
  %17 = fadd double %15, %16
  %18 = load double* %r, align 8
  %19 = fmul double %17, %18
  %20 = load double* getelementptr inbounds ([4 x double]* @_ZL1a, i64 0, i64 0), align 8
  %21 = fadd double %19, %20
  %22 = load double* %x, align 8
  %23 = fmul double %21, %22
  %24 = load double* getelementptr inbounds ([4 x double]* @_ZL1b, i64 0, i64 3), align 8
  %25 = load double* %r, align 8
  %26 = fmul double %24, %25
  %27 = load double* getelementptr inbounds ([4 x double]* @_ZL1b, i64 0, i64 2), align 8
  %28 = fadd double %26, %27
  %29 = load double* %r, align 8
  %30 = fmul double %28, %29
  %31 = load double* getelementptr inbounds ([4 x double]* @_ZL1b, i64 0, i64 1), align 8
  %32 = fadd double %30, %31
  %33 = load double* %r, align 8
  %34 = fmul double %32, %33
  %35 = load double* getelementptr inbounds ([4 x double]* @_ZL1b, i64 0, i64 0), align 8
  %36 = fadd double %34, %35
  %37 = load double* %r, align 8
  %38 = fmul double %36, %37
  %39 = fadd double %38, 1.000000e+00
  %40 = fdiv double %23, %39
  store double %40, double* %r, align 8
  %41 = load double* %r, align 8
  store double %41, double* %0, align 8
  br label %bb6

bb1:                                              ; preds = %entry
  %42 = load double* %u_addr, align 8
  store double %42, double* %r, align 8
  %43 = load double* %x, align 8
  %44 = fcmp ogt double %43, 0.000000e+00
  br i1 %44, label %bb2, label %bb3

bb2:                                              ; preds = %bb1
  %45 = load double* %u_addr, align 8
  %46 = fsub double 1.000000e+00, %45
  store double %46, double* %r, align 8
  br label %bb3

bb3:                                              ; preds = %bb2, %bb1
  %47 = load double* %r, align 8
  %48 = call double @llvm.log.f64(double %47)
  %49 = fsub double -0.000000e+00, %48
  %50 = call double @llvm.log.f64(double %49)
  store double %50, double* %r, align 8
  %51 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 0), align 8
  %52 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 1), align 8
  %53 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 2), align 8
  %54 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 3), align 8
  %55 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 4), align 8
  %56 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 5), align 8
  %57 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 6), align 8
  %58 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 7), align 8
  %59 = load double* getelementptr inbounds ([9 x double]* @_ZL1c, i64 0, i64 8), align 8
  %60 = load double* %r, align 8
  %61 = fmul double %59, %60
  %62 = fadd double %58, %61
  %63 = load double* %r, align 8
  %64 = fmul double %62, %63
  %65 = fadd double %57, %64
  %66 = load double* %r, align 8
  %67 = fmul double %65, %66
  %68 = fadd double %56, %67
  %69 = load double* %r, align 8
  %70 = fmul double %68, %69
  %71 = fadd double %55, %70
  %72 = load double* %r, align 8
  %73 = fmul double %71, %72
  %74 = fadd double %54, %73
  %75 = load double* %r, align 8
  %76 = fmul double %74, %75
  %77 = fadd double %53, %76
  %78 = load double* %r, align 8
  %79 = fmul double %77, %78
  %80 = fadd double %52, %79
  %81 = load double* %r, align 8
  %82 = fmul double %80, %81
  %83 = fadd double %51, %82
  store double %83, double* %r, align 8
  %84 = load double* %x, align 8
  %85 = fcmp olt double %84, 0.000000e+00
  br i1 %85, label %bb4, label %bb5

bb4:                                              ; preds = %bb3
  %86 = load double* %r, align 8
  %87 = fsub double -0.000000e+00, %86
  store double %87, double* %r, align 8
  br label %bb5

bb5:                                              ; preds = %bb4, %bb3
  %88 = load double* %r, align 8
  store double %88, double* %0, align 8
  br label %bb6

bb6:                                              ; preds = %bb5, %bb
  %89 = load double* %0, align 8
  store double %89, double* %retval, align 8
  br label %return

return:                                           ; preds = %bb6
  %retval7 = load double* %retval
  ret double %retval7
}

declare double @fabs(double)

declare double @llvm.log.f64(double) nounwind readonly

define double @_Z4dMaxdd(double %dA, double %dB) nounwind {
entry:
  %dA_addr = alloca double
  %dB_addr = alloca double
  %retval = alloca double
  %iftmp.0 = alloca double
  %0 = alloca double
  %"alloca point" = bitcast i32 0 to i32
  store double %dA, double* %dA_addr
  store double %dB, double* %dB_addr
  %1 = load double* %dA_addr, align 8
  %2 = load double* %dB_addr, align 8
  %3 = fcmp ogt double %1, %2
  br i1 %3, label %bb, label %bb1

bb:                                               ; preds = %entry
  %4 = load double* %dA_addr, align 8
  store double %4, double* %iftmp.0, align 8
  br label %bb2

bb1:                                              ; preds = %entry
  %5 = load double* %dB_addr, align 8
  store double %5, double* %iftmp.0, align 8
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %6 = load double* %iftmp.0, align 8
  store double %6, double* %0, align 8
  %7 = load double* %0, align 8
  store double %7, double* %retval, align 8
  br label %return

return:                                           ; preds = %bb2
  %retval3 = load double* %retval
  ret double %retval3
}

define double @_Z7RanUnifPl(i64* %s) nounwind {
entry:
  %s_addr = alloca i64*
  %retval = alloca double
  %dRes = alloca double
  %k1 = alloca i64
  %ix = alloca i64
  %0 = alloca double
  %"alloca point" = bitcast i32 0 to i32
  store i64* %s, i64** %s_addr
  %1 = load i64** %s_addr, align 8
  %2 = load i64* %1, align 8
  store i64 %2, i64* %ix, align 8
  %3 = load i64* %ix, align 8
  %4 = sdiv i64 %3, 127773
  store i64 %4, i64* %k1, align 8
  %5 = load i64* %k1, align 8
  %6 = mul i64 %5, 127773
  %7 = load i64* %ix, align 8
  %8 = sub i64 %7, %6
  %9 = mul i64 %8, 16807
  %10 = load i64* %k1, align 8
  %11 = mul i64 %10, 2836
  %12 = sub i64 %9, %11
  store i64 %12, i64* %ix, align 8
  %13 = load i64* %ix, align 8
  %14 = icmp slt i64 %13, 0
  br i1 %14, label %bb, label %bb1

bb:                                               ; preds = %entry
  %15 = load i64* %ix, align 8
  %16 = add nsw i64 %15, 2147483647
  store i64 %16, i64* %ix, align 8
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %17 = load i64** %s_addr, align 8
  %18 = load i64* %ix, align 8
  store i64 %18, i64* %17, align 8
  %19 = load i64* %ix, align 8
  %20 = sitofp i64 %19 to double
  %21 = fmul double %20, 0x3E000000001C5F68
  store double %21, double* %dRes, align 8
  %22 = load double* %dRes, align 8
  store double %22, double* %0, align 8
  %23 = load double* %0, align 8
  store double %23, double* %retval, align 8
  br label %return

return:                                           ; preds = %bb1
  %retval2 = load double* %retval
  ret double %retval2
}

define i32 @_Z6choldcPPdi(double** %a, i32 %n) nounwind {
entry:
  %a_addr = alloca double**
  %n_addr = alloca i32
  %retval = alloca i32
  %sum = alloca double
  %k = alloca i32
  %j = alloca i32
  %i = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %a, double*** %a_addr
  store i32 %n, i32* %n_addr
  store i32 1, i32* %i, align 4
  br label %bb12

bb:                                               ; preds = %bb12
  %1 = load i32* %i, align 4
  store i32 %1, i32* %j, align 4
  br label %bb10

bb1:                                              ; preds = %bb10
  %2 = load double*** %a_addr, align 8
  %3 = load i32* %i, align 4
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds double** %2, i64 %4
  %6 = load double** %5, align 1
  %7 = load i32* %j, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds double* %6, i64 %8
  %10 = load double* %9, align 1
  store double %10, double* %sum, align 8
  %11 = load i32* %i, align 4
  %12 = sub i32 %11, 1
  store i32 %12, i32* %k, align 4
  br label %bb3

bb2:                                              ; preds = %bb3
  %13 = load double*** %a_addr, align 8
  %14 = load i32* %i, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds double** %13, i64 %15
  %17 = load double** %16, align 1
  %18 = load i32* %k, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds double* %17, i64 %19
  %21 = load double* %20, align 1
  %22 = load double*** %a_addr, align 8
  %23 = load i32* %j, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds double** %22, i64 %24
  %26 = load double** %25, align 1
  %27 = load i32* %k, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds double* %26, i64 %28
  %30 = load double* %29, align 1
  %31 = fmul double %21, %30
  %32 = load double* %sum, align 8
  %33 = fsub double %32, %31
  store double %33, double* %sum, align 8
  %34 = load i32* %k, align 4
  %35 = sub i32 %34, 1
  store i32 %35, i32* %k, align 4
  br label %bb3

bb3:                                              ; preds = %bb2, %bb1
  %36 = load i32* %k, align 4
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %bb2, label %bb4

bb4:                                              ; preds = %bb3
  %38 = load i32* %i, align 4
  %39 = load i32* %j, align 4
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %bb5, label %bb8

bb5:                                              ; preds = %bb4
  %41 = load double* %sum, align 8
  %42 = fcmp ole double %41, 0.000000e+00
  br i1 %42, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  store i32 0, i32* %0, align 4
  br label %bb20

bb7:                                              ; preds = %bb5
  %43 = load double*** %a_addr, align 8
  %44 = load i32* %i, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double** %43, i64 %45
  %47 = load double** %46, align 1
  %48 = load double* %sum, align 8
  %49 = call double @llvm.sqrt.f64(double %48)
  %50 = load i32* %i, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double* %47, i64 %51
  store double %49, double* %52, align 1
  br label %bb9

bb8:                                              ; preds = %bb4
  %53 = load double*** %a_addr, align 8
  %54 = load i32* %j, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double** %53, i64 %55
  %57 = load double** %56, align 1
  %58 = load double*** %a_addr, align 8
  %59 = load i32* %i, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds double** %58, i64 %60
  %62 = load double** %61, align 1
  %63 = load i32* %i, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds double* %62, i64 %64
  %66 = load double* %65, align 1
  %67 = load double* %sum, align 8
  %68 = fdiv double %67, %66
  %69 = load i32* %i, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds double* %57, i64 %70
  store double %68, double* %71, align 1
  br label %bb9

bb9:                                              ; preds = %bb8, %bb7
  %72 = load i32* %j, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %j, align 4
  br label %bb10

bb10:                                             ; preds = %bb9, %bb
  %74 = load i32* %j, align 4
  %75 = load i32* %n_addr, align 4
  %76 = icmp sle i32 %74, %75
  br i1 %76, label %bb1, label %bb11

bb11:                                             ; preds = %bb10
  %77 = load i32* %i, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %i, align 4
  br label %bb12

bb12:                                             ; preds = %bb11, %entry
  %79 = load i32* %i, align 4
  %80 = load i32* %n_addr, align 4
  %81 = icmp sle i32 %79, %80
  br i1 %81, label %bb, label %bb13

bb13:                                             ; preds = %bb12
  store i32 1, i32* %i, align 4
  br label %bb18

bb14:                                             ; preds = %bb18
  %82 = load i32* %i, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %j, align 4
  br label %bb16

bb15:                                             ; preds = %bb16
  %84 = load double*** %a_addr, align 8
  %85 = load i32* %i, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double** %84, i64 %86
  %88 = load double** %87, align 1
  %89 = load i32* %j, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds double* %88, i64 %90
  store double 0.000000e+00, double* %91, align 1
  %92 = load i32* %j, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %j, align 4
  br label %bb16

bb16:                                             ; preds = %bb15, %bb14
  %94 = load i32* %j, align 4
  %95 = load i32* %n_addr, align 4
  %96 = icmp sle i32 %94, %95
  br i1 %96, label %bb15, label %bb17

bb17:                                             ; preds = %bb16
  %97 = load i32* %i, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %i, align 4
  br label %bb18

bb18:                                             ; preds = %bb17, %bb13
  %99 = load i32* %n_addr, align 4
  %100 = sub i32 %99, 1
  %101 = load i32* %i, align 4
  %102 = icmp sge i32 %100, %101
  br i1 %102, label %bb14, label %bb19

bb19:                                             ; preds = %bb18
  store i32 1, i32* %0, align 4
  br label %bb20

bb20:                                             ; preds = %bb19, %bb6
  %103 = load i32* %0, align 4
  store i32 %103, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb20
  %retval21 = load i32* %retval
  ret i32 %retval21
}

define void @_Z12free_dmatrixPPdllll(double** %m, i64 %nrl, i64 %nrh, i64 %ncl, i64 %nch) nounwind {
entry:
  %m_addr = alloca double**
  %nrl_addr = alloca i64
  %nrh_addr = alloca i64
  %ncl_addr = alloca i64
  %nch_addr = alloca i64
  %"alloca point" = bitcast i32 0 to i32
  store double** %m, double*** %m_addr
  store i64 %nrl, i64* %nrl_addr
  store i64 %nrh, i64* %nrh_addr
  store i64 %ncl, i64* %ncl_addr
  store i64 %nch, i64* %nch_addr
  %0 = load double*** %m_addr, align 8
  %1 = load i64* %nrl_addr, align 8
  %2 = getelementptr inbounds double** %0, i64 %1
  %3 = load double** %2, align 1
  %4 = load i64* %ncl_addr, align 8
  %5 = getelementptr inbounds double* %3, i64 %4
  %6 = getelementptr inbounds double* %5, i64 -1
  %7 = bitcast double* %6 to i8*
  call void @free(i8* %7) nounwind
  %8 = load double*** %m_addr, align 8
  %9 = load i64* %nrl_addr, align 8
  %10 = getelementptr inbounds double** %8, i64 %9
  %11 = getelementptr inbounds double** %10, i64 -1
  %12 = bitcast double** %11 to i8*
  call void @free(i8* %12) nounwind
  br label %return

return:                                           ; preds = %entry
  ret void
}

declare void @free(i8*) nounwind

define void @_Z12free_dvectorPdll(double* %v, i64 %nl, i64 %nh) nounwind {
entry:
  %v_addr = alloca double*
  %nl_addr = alloca i64
  %nh_addr = alloca i64
  %"alloca point" = bitcast i32 0 to i32
  store double* %v, double** %v_addr
  store i64 %nl, i64* %nl_addr
  store i64 %nh, i64* %nh_addr
  %0 = load double** %v_addr, align 8
  %1 = load i64* %nl_addr, align 8
  %2 = getelementptr inbounds double* %0, i64 %1
  %3 = getelementptr inbounds double* %2, i64 -1
  %4 = bitcast double* %3 to i8*
  call void @free(i8* %4) nounwind
  br label %return

return:                                           ; preds = %entry
  ret void
}

define void @_Z12free_ivectorPill(i32* %v, i64 %nl, i64 %nh) nounwind {
entry:
  %v_addr = alloca i32*
  %nl_addr = alloca i64
  %nh_addr = alloca i64
  %"alloca point" = bitcast i32 0 to i32
  store i32* %v, i32** %v_addr
  store i64 %nl, i64* %nl_addr
  store i64 %nh, i64* %nh_addr
  %0 = load i32** %v_addr, align 8
  %1 = load i64* %nl_addr, align 8
  %2 = getelementptr inbounds i32* %0, i64 %1
  %3 = getelementptr inbounds i32* %2, i64 -1
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4) nounwind
  br label %return

return:                                           ; preds = %entry
  ret void
}

define void @_Z7nrerrorPc(i8* %error_text) nounwind {
entry:
  %error_text_addr = alloca i8*
  %"alloca point" = bitcast i32 0 to i32
  store i8* %error_text, i8** %error_text_addr
  %0 = load %struct.FILE** @stderr, align 8
  %1 = call i64 @fwrite(i8* getelementptr inbounds ([37 x i8]* @.str, i64 0, i64 0), i64 1, i64 36, %struct.FILE* %0) nounwind
  %2 = load %struct.FILE** @stderr, align 8
  %3 = load i8** %error_text_addr, align 8
  %4 = call i32 (%struct.FILE*, i8*, ...)* @fprintf(%struct.FILE* noalias %2, i8* noalias getelementptr inbounds ([4 x i8]* @.str1, i64 0, i64 0), i8* %3) nounwind
  %5 = load %struct.FILE** @stderr, align 8
  %6 = call i64 @fwrite(i8* getelementptr inbounds ([29 x i8]* @.str2, i64 0, i64 0), i64 1, i64 28, %struct.FILE* %5) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

return:                                           ; No predecessors!
  ret void
}

declare i64 @fwrite(i8*, i64, i64, %struct.FILE*)

declare i32 @fprintf(%struct.FILE* noalias, i8* noalias, ...)

declare void @exit(i32) noreturn nounwind

define double** @_Z7dmatrixllll(i64 %nrl, i64 %nrh, i64 %ncl, i64 %nch) nounwind {
entry:
  %nrl_addr = alloca i64
  %nrh_addr = alloca i64
  %ncl_addr = alloca i64
  %nch_addr = alloca i64
  %retval = alloca double**
  %m = alloca double**
  %ncol = alloca i64
  %nrow = alloca i64
  %i = alloca i64
  %0 = alloca double**
  %"alloca point" = bitcast i32 0 to i32
  store i64 %nrl, i64* %nrl_addr
  store i64 %nrh, i64* %nrh_addr
  store i64 %ncl, i64* %ncl_addr
  store i64 %nch, i64* %nch_addr
  %1 = load i64* %nrh_addr, align 8
  %2 = load i64* %nrl_addr, align 8
  %3 = sub i64 %1, %2
  %4 = add nsw i64 %3, 1
  store i64 %4, i64* %nrow, align 8
  %5 = load i64* %nch_addr, align 8
  %6 = load i64* %ncl_addr, align 8
  %7 = sub i64 %5, %6
  %8 = add nsw i64 %7, 1
  store i64 %8, i64* %ncol, align 8
  %9 = load i64* %nrow, align 8
  %10 = add nsw i64 %9, 1
  %11 = mul i64 %10, 8
  %12 = call noalias i8* @malloc(i64 %11) nounwind
  %13 = bitcast i8* %12 to double**
  store double** %13, double*** %m, align 8
  %14 = load double*** %m, align 8
  %15 = icmp eq double** %14, null
  br i1 %15, label %bb, label %bb1

bb:                                               ; preds = %entry
  call void @_Z7nrerrorPc(i8* getelementptr inbounds ([34 x i8]* @.str3, i64 0, i64 0)) nounwind
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %16 = load double*** %m, align 8
  %17 = getelementptr inbounds double** %16, i64 1
  store double** %17, double*** %m, align 8
  %18 = load i64* %nrl_addr, align 8
  %19 = sub i64 0, %18
  %20 = load double*** %m, align 8
  %21 = getelementptr inbounds double** %20, i64 %19
  store double** %21, double*** %m, align 8
  %22 = load i64* %nrow, align 8
  %23 = load i64* %ncol, align 8
  %24 = mul i64 %22, %23
  %25 = add nsw i64 %24, 1
  %26 = mul i64 %25, 8
  %27 = call noalias i8* @malloc(i64 %26) nounwind
  %28 = bitcast i8* %27 to double*
  %29 = load double*** %m, align 8
  %30 = load i64* %nrl_addr, align 8
  %31 = getelementptr inbounds double** %29, i64 %30
  store double* %28, double** %31, align 1
  %32 = load double*** %m, align 8
  %33 = load i64* %nrl_addr, align 8
  %34 = getelementptr inbounds double** %32, i64 %33
  %35 = load double** %34, align 1
  %36 = icmp eq double* %35, null
  br i1 %36, label %bb2, label %bb3

bb2:                                              ; preds = %bb1
  call void @_Z7nrerrorPc(i8* getelementptr inbounds ([34 x i8]* @.str4, i64 0, i64 0)) nounwind
  br label %bb3

bb3:                                              ; preds = %bb2, %bb1
  %37 = load double*** %m, align 8
  %38 = load i64* %nrl_addr, align 8
  %39 = getelementptr inbounds double** %37, i64 %38
  %40 = load double** %39, align 1
  %41 = getelementptr inbounds double* %40, i64 1
  %42 = load double*** %m, align 8
  %43 = load i64* %nrl_addr, align 8
  %44 = getelementptr inbounds double** %42, i64 %43
  store double* %41, double** %44, align 1
  %45 = load double*** %m, align 8
  %46 = load i64* %nrl_addr, align 8
  %47 = getelementptr inbounds double** %45, i64 %46
  %48 = load double** %47, align 1
  %49 = load i64* %ncl_addr, align 8
  %50 = sub i64 0, %49
  %51 = getelementptr inbounds double* %48, i64 %50
  %52 = load double*** %m, align 8
  %53 = load i64* %nrl_addr, align 8
  %54 = getelementptr inbounds double** %52, i64 %53
  store double* %51, double** %54, align 1
  %55 = load i64* %nrl_addr, align 8
  %56 = add nsw i64 %55, 1
  store i64 %56, i64* %i, align 8
  br label %bb5

bb4:                                              ; preds = %bb5
  %57 = load i64* %i, align 8
  %58 = sub i64 %57, 1
  %59 = load double*** %m, align 8
  %60 = getelementptr inbounds double** %59, i64 %58
  %61 = load double** %60, align 1
  %62 = load i64* %ncol, align 8
  %63 = getelementptr inbounds double* %61, i64 %62
  %64 = load double*** %m, align 8
  %65 = load i64* %i, align 8
  %66 = getelementptr inbounds double** %64, i64 %65
  store double* %63, double** %66, align 1
  %67 = load i64* %i, align 8
  %68 = add nsw i64 %67, 1
  store i64 %68, i64* %i, align 8
  br label %bb5

bb5:                                              ; preds = %bb4, %bb3
  %69 = load i64* %i, align 8
  %70 = load i64* %nrh_addr, align 8
  %71 = icmp sle i64 %69, %70
  br i1 %71, label %bb4, label %bb6

bb6:                                              ; preds = %bb5
  %72 = load double*** %m, align 8
  store double** %72, double*** %0, align 8
  %73 = load double*** %0, align 8
  store double** %73, double*** %retval, align 8
  br label %return

return:                                           ; preds = %bb6
  %retval7 = load double*** %retval
  ret double** %retval7
}

declare noalias i8* @malloc(i64) nounwind

define double* @_Z7dvectorll(i64 %nl, i64 %nh) nounwind {
entry:
  %nl_addr = alloca i64
  %nh_addr = alloca i64
  %retval = alloca double*
  %v = alloca double*
  %0 = alloca double*
  %"alloca point" = bitcast i32 0 to i32
  store i64 %nl, i64* %nl_addr
  store i64 %nh, i64* %nh_addr
  %1 = load i64* %nh_addr, align 8
  %2 = load i64* %nl_addr, align 8
  %3 = sub i64 %1, %2
  %4 = mul i64 %3, 8
  %5 = add nsw i64 %4, 16
  %6 = call noalias i8* @malloc(i64 %5) nounwind
  %7 = bitcast i8* %6 to double*
  store double* %7, double** %v, align 8
  %8 = load double** %v, align 8
  %9 = icmp eq double* %8, null
  br i1 %9, label %bb, label %bb1

bb:                                               ; preds = %entry
  call void @_Z7nrerrorPc(i8* getelementptr inbounds ([32 x i8]* @.str5, i64 0, i64 0)) nounwind
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %10 = load i64* %nl_addr, align 8
  %11 = sub i64 0, %10
  %12 = load double** %v, align 8
  %13 = getelementptr inbounds double* %12, i64 %11
  %14 = getelementptr inbounds double* %13, i64 1
  store double* %14, double** %0, align 8
  %15 = load double** %0, align 8
  store double* %15, double** %retval, align 8
  br label %return

return:                                           ; preds = %bb1
  %retval2 = load double** %retval
  ret double* %retval2
}

define i32* @_Z7ivectorll(i64 %nl, i64 %nh) nounwind {
entry:
  %nl_addr = alloca i64
  %nh_addr = alloca i64
  %retval = alloca i32*
  %v = alloca i32*
  %0 = alloca i32*
  %"alloca point" = bitcast i32 0 to i32
  store i64 %nl, i64* %nl_addr
  store i64 %nh, i64* %nh_addr
  %1 = load i64* %nh_addr, align 8
  %2 = load i64* %nl_addr, align 8
  %3 = sub i64 %1, %2
  %4 = mul i64 %3, 4
  %5 = add nsw i64 %4, 8
  %6 = call noalias i8* @malloc(i64 %5) nounwind
  %7 = bitcast i8* %6 to i32*
  store i32* %7, i32** %v, align 8
  %8 = load i32** %v, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %bb, label %bb1

bb:                                               ; preds = %entry
  call void @_Z7nrerrorPc(i8* getelementptr inbounds ([32 x i8]* @.str6, i64 0, i64 0)) nounwind
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %10 = load i64* %nl_addr, align 8
  %11 = sub i64 0, %10
  %12 = load i32** %v, align 8
  %13 = getelementptr inbounds i32* %12, i64 %11
  %14 = getelementptr inbounds i32* %13, i64 1
  store i32* %14, i32** %0, align 8
  %15 = load i32** %0, align 8
  store i32* %15, i32** %retval, align 8
  br label %return

return:                                           ; preds = %bb1
  %retval2 = load i32** %retval
  ret i32* %retval2
}

define void @_Z6gaussjPPdiS0_i(double** %a, i32 %n, double** %b, i32 %m) nounwind {
entry:
  %a_addr = alloca double**
  %n_addr = alloca i32
  %b_addr = alloca double**
  %m_addr = alloca i32
  %temp = alloca double
  %pivinv = alloca double
  %dum = alloca double
  %big = alloca double
  %ll = alloca i32
  %l = alloca i32
  %k = alloca i32
  %j = alloca i32
  %irow = alloca i32
  %icol = alloca i32
  %i = alloca i32
  %ipiv = alloca i32*
  %indxr = alloca i32*
  %indxc = alloca i32*
  %"alloca point" = bitcast i32 0 to i32
  store double** %a, double*** %a_addr
  store i32 %n, i32* %n_addr
  store double** %b, double*** %b_addr
  store i32 %m, i32* %m_addr
  %0 = load i32* %n_addr, align 4
  %1 = sext i32 %0 to i64
  %2 = call i32* @_Z7ivectorll(i64 1, i64 %1) nounwind
  store i32* %2, i32** %indxc, align 8
  %3 = load i32* %n_addr, align 4
  %4 = sext i32 %3 to i64
  %5 = call i32* @_Z7ivectorll(i64 1, i64 %4) nounwind
  store i32* %5, i32** %indxr, align 8
  %6 = load i32* %n_addr, align 4
  %7 = sext i32 %6 to i64
  %8 = call i32* @_Z7ivectorll(i64 1, i64 %7) nounwind
  store i32* %8, i32** %ipiv, align 8
  store i32 -1, i32* %icol, align 4
  store i32 -1, i32* %irow, align 4
  store i32 1, i32* %j, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %9 = load i32** %ipiv, align 8
  %10 = load i32* %j, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32* %9, i64 %11
  store i32 0, i32* %12, align 1
  %13 = load i32* %j, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %j, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %15 = load i32* %j, align 4
  %16 = load i32* %n_addr, align 4
  %17 = icmp sle i32 %15, %16
  br i1 %17, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 1, i32* %i, align 4
  br label %bb42

bb3:                                              ; preds = %bb42
  store double 0.000000e+00, double* %big, align 8
  store i32 1, i32* %j, align 4
  br label %bb15

bb4:                                              ; preds = %bb15
  %18 = load i32** %ipiv, align 8
  %19 = load i32* %j, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32* %18, i64 %20
  %22 = load i32* %21, align 1
  %23 = icmp ne i32 %22, 1
  br i1 %23, label %bb5, label %bb14

bb5:                                              ; preds = %bb4
  store i32 1, i32* %k, align 4
  br label %bb13

bb6:                                              ; preds = %bb13
  %24 = load i32** %ipiv, align 8
  %25 = load i32* %k, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32* %24, i64 %26
  %28 = load i32* %27, align 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %bb7, label %bb10

bb7:                                              ; preds = %bb6
  %30 = load double*** %a_addr, align 8
  %31 = load i32* %j, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double** %30, i64 %32
  %34 = load double** %33, align 1
  %35 = load i32* %k, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds double* %34, i64 %36
  %38 = load double* %37, align 1
  %39 = call double @fabs(double %38) nounwind readnone
  %40 = load double* %big, align 8
  %41 = fcmp oge double %39, %40
  br i1 %41, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %42 = load double*** %a_addr, align 8
  %43 = load i32* %j, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double** %42, i64 %44
  %46 = load double** %45, align 1
  %47 = load i32* %k, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double* %46, i64 %48
  %50 = load double* %49, align 1
  %51 = call double @fabs(double %50) nounwind readnone
  store double %51, double* %big, align 8
  %52 = load i32* %j, align 4
  store i32 %52, i32* %irow, align 4
  %53 = load i32* %k, align 4
  store i32 %53, i32* %icol, align 4
  br label %bb9

bb9:                                              ; preds = %bb8, %bb7
  br label %bb12

bb10:                                             ; preds = %bb6
  %54 = load i32** %ipiv, align 8
  %55 = load i32* %k, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32* %54, i64 %56
  %58 = load i32* %57, align 1
  %59 = icmp sgt i32 %58, 1
  br i1 %59, label %bb11, label %bb12

bb11:                                             ; preds = %bb10
  call void @_Z7nrerrorPc(i8* getelementptr inbounds ([26 x i8]* @.str7, i64 0, i64 0)) nounwind
  br label %bb12

bb12:                                             ; preds = %bb11, %bb10, %bb9
  %60 = load i32* %k, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %k, align 4
  br label %bb13

bb13:                                             ; preds = %bb12, %bb5
  %62 = load i32* %k, align 4
  %63 = load i32* %n_addr, align 4
  %64 = icmp sle i32 %62, %63
  br i1 %64, label %bb6, label %bb14

bb14:                                             ; preds = %bb13, %bb4
  %65 = load i32* %j, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %j, align 4
  br label %bb15

bb15:                                             ; preds = %bb14, %bb3
  %67 = load i32* %j, align 4
  %68 = load i32* %n_addr, align 4
  %69 = icmp sle i32 %67, %68
  br i1 %69, label %bb4, label %bb16

bb16:                                             ; preds = %bb15
  %70 = load i32** %ipiv, align 8
  %71 = load i32* %icol, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32* %70, i64 %72
  %74 = load i32* %73, align 1
  %75 = add nsw i32 %74, 1
  %76 = load i32** %ipiv, align 8
  %77 = load i32* %icol, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32* %76, i64 %78
  store i32 %75, i32* %79, align 1
  %80 = load i32* %irow, align 4
  %81 = load i32* %icol, align 4
  %82 = icmp ne i32 %80, %81
  br i1 %82, label %bb17, label %bb23

bb17:                                             ; preds = %bb16
  store i32 1, i32* %l, align 4
  br label %bb19

bb18:                                             ; preds = %bb19
  %83 = load double*** %a_addr, align 8
  %84 = load i32* %irow, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double** %83, i64 %85
  %87 = load double** %86, align 1
  %88 = load i32* %l, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double* %87, i64 %89
  %91 = load double* %90, align 1
  store double %91, double* %temp, align 8
  %92 = load double*** %a_addr, align 8
  %93 = load i32* %irow, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds double** %92, i64 %94
  %96 = load double** %95, align 1
  %97 = load double*** %a_addr, align 8
  %98 = load i32* %icol, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds double** %97, i64 %99
  %101 = load double** %100, align 1
  %102 = load i32* %l, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds double* %101, i64 %103
  %105 = load double* %104, align 1
  %106 = load i32* %l, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds double* %96, i64 %107
  store double %105, double* %108, align 1
  %109 = load double*** %a_addr, align 8
  %110 = load i32* %icol, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds double** %109, i64 %111
  %113 = load double** %112, align 1
  %114 = load i32* %l, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double* %113, i64 %115
  %117 = load double* %temp, align 8
  store double %117, double* %116, align 1
  %118 = load i32* %l, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %l, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %bb17
  %120 = load i32* %l, align 4
  %121 = load i32* %n_addr, align 4
  %122 = icmp sle i32 %120, %121
  br i1 %122, label %bb18, label %bb20

bb20:                                             ; preds = %bb19
  store i32 1, i32* %l, align 4
  br label %bb22

bb21:                                             ; preds = %bb22
  %123 = load double*** %b_addr, align 8
  %124 = load i32* %irow, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds double** %123, i64 %125
  %127 = load double** %126, align 1
  %128 = load i32* %l, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds double* %127, i64 %129
  %131 = load double* %130, align 1
  store double %131, double* %temp, align 8
  %132 = load double*** %b_addr, align 8
  %133 = load i32* %irow, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double** %132, i64 %134
  %136 = load double** %135, align 1
  %137 = load double*** %b_addr, align 8
  %138 = load i32* %icol, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds double** %137, i64 %139
  %141 = load double** %140, align 1
  %142 = load i32* %l, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds double* %141, i64 %143
  %145 = load double* %144, align 1
  %146 = load i32* %l, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds double* %136, i64 %147
  store double %145, double* %148, align 1
  %149 = load double*** %b_addr, align 8
  %150 = load i32* %icol, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds double** %149, i64 %151
  %153 = load double** %152, align 1
  %154 = load i32* %l, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds double* %153, i64 %155
  %157 = load double* %temp, align 8
  store double %157, double* %156, align 1
  %158 = load i32* %l, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %l, align 4
  br label %bb22

bb22:                                             ; preds = %bb21, %bb20
  %160 = load i32* %l, align 4
  %161 = load i32* %m_addr, align 4
  %162 = icmp sle i32 %160, %161
  br i1 %162, label %bb21, label %bb23

bb23:                                             ; preds = %bb22, %bb16
  %163 = load i32** %indxr, align 8
  %164 = load i32* %i, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i32* %163, i64 %165
  %167 = load i32* %irow, align 4
  store i32 %167, i32* %166, align 1
  %168 = load i32** %indxc, align 8
  %169 = load i32* %i, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32* %168, i64 %170
  %172 = load i32* %icol, align 4
  store i32 %172, i32* %171, align 1
  %173 = load double*** %a_addr, align 8
  %174 = load i32* %icol, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds double** %173, i64 %175
  %177 = load double** %176, align 1
  %178 = load i32* %icol, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds double* %177, i64 %179
  %181 = load double* %180, align 1
  %182 = fcmp oeq double %181, 0.000000e+00
  br i1 %182, label %bb24, label %bb25

bb24:                                             ; preds = %bb23
  call void @_Z7nrerrorPc(i8* getelementptr inbounds ([26 x i8]* @.str8, i64 0, i64 0)) nounwind
  br label %bb25

bb25:                                             ; preds = %bb24, %bb23
  %183 = load double*** %a_addr, align 8
  %184 = load i32* %icol, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds double** %183, i64 %185
  %187 = load double** %186, align 1
  %188 = load i32* %icol, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds double* %187, i64 %189
  %191 = load double* %190, align 1
  %192 = fdiv double 1.000000e+00, %191
  store double %192, double* %pivinv, align 8
  %193 = load double*** %a_addr, align 8
  %194 = load i32* %icol, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds double** %193, i64 %195
  %197 = load double** %196, align 1
  %198 = load i32* %icol, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds double* %197, i64 %199
  store double 1.000000e+00, double* %200, align 1
  store i32 1, i32* %l, align 4
  br label %bb27

bb26:                                             ; preds = %bb27
  %201 = load double*** %a_addr, align 8
  %202 = load i32* %icol, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds double** %201, i64 %203
  %205 = load double** %204, align 1
  %206 = load double*** %a_addr, align 8
  %207 = load i32* %icol, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds double** %206, i64 %208
  %210 = load double** %209, align 1
  %211 = load i32* %l, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds double* %210, i64 %212
  %214 = load double* %213, align 1
  %215 = load double* %pivinv, align 8
  %216 = fmul double %214, %215
  %217 = load i32* %l, align 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds double* %205, i64 %218
  store double %216, double* %219, align 1
  %220 = load i32* %l, align 4
  %221 = add nsw i32 %220, 1
  store i32 %221, i32* %l, align 4
  br label %bb27

bb27:                                             ; preds = %bb26, %bb25
  %222 = load i32* %l, align 4
  %223 = load i32* %n_addr, align 4
  %224 = icmp sle i32 %222, %223
  br i1 %224, label %bb26, label %bb28

bb28:                                             ; preds = %bb27
  store i32 1, i32* %l, align 4
  br label %bb30

bb29:                                             ; preds = %bb30
  %225 = load double*** %b_addr, align 8
  %226 = load i32* %icol, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds double** %225, i64 %227
  %229 = load double** %228, align 1
  %230 = load double*** %b_addr, align 8
  %231 = load i32* %icol, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds double** %230, i64 %232
  %234 = load double** %233, align 1
  %235 = load i32* %l, align 4
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds double* %234, i64 %236
  %238 = load double* %237, align 1
  %239 = load double* %pivinv, align 8
  %240 = fmul double %238, %239
  %241 = load i32* %l, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds double* %229, i64 %242
  store double %240, double* %243, align 1
  %244 = load i32* %l, align 4
  %245 = add nsw i32 %244, 1
  store i32 %245, i32* %l, align 4
  br label %bb30

bb30:                                             ; preds = %bb29, %bb28
  %246 = load i32* %l, align 4
  %247 = load i32* %m_addr, align 4
  %248 = icmp sle i32 %246, %247
  br i1 %248, label %bb29, label %bb31

bb31:                                             ; preds = %bb30
  store i32 1, i32* %ll, align 4
  br label %bb40

bb32:                                             ; preds = %bb40
  %249 = load i32* %ll, align 4
  %250 = load i32* %icol, align 4
  %251 = icmp ne i32 %249, %250
  br i1 %251, label %bb33, label %bb39

bb33:                                             ; preds = %bb32
  %252 = load double*** %a_addr, align 8
  %253 = load i32* %ll, align 4
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds double** %252, i64 %254
  %256 = load double** %255, align 1
  %257 = load i32* %icol, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double* %256, i64 %258
  %260 = load double* %259, align 1
  store double %260, double* %dum, align 8
  %261 = load double*** %a_addr, align 8
  %262 = load i32* %ll, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds double** %261, i64 %263
  %265 = load double** %264, align 1
  %266 = load i32* %icol, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds double* %265, i64 %267
  store double 0.000000e+00, double* %268, align 1
  store i32 1, i32* %l, align 4
  br label %bb35

bb34:                                             ; preds = %bb35
  %269 = load double*** %a_addr, align 8
  %270 = load i32* %ll, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds double** %269, i64 %271
  %273 = load double** %272, align 1
  %274 = load double*** %a_addr, align 8
  %275 = load i32* %ll, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds double** %274, i64 %276
  %278 = load double** %277, align 1
  %279 = load i32* %l, align 4
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds double* %278, i64 %280
  %282 = load double* %281, align 1
  %283 = load double*** %a_addr, align 8
  %284 = load i32* %icol, align 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds double** %283, i64 %285
  %287 = load double** %286, align 1
  %288 = load i32* %l, align 4
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds double* %287, i64 %289
  %291 = load double* %290, align 1
  %292 = load double* %dum, align 8
  %293 = fmul double %291, %292
  %294 = fsub double %282, %293
  %295 = load i32* %l, align 4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds double* %273, i64 %296
  store double %294, double* %297, align 1
  %298 = load i32* %l, align 4
  %299 = add nsw i32 %298, 1
  store i32 %299, i32* %l, align 4
  br label %bb35

bb35:                                             ; preds = %bb34, %bb33
  %300 = load i32* %l, align 4
  %301 = load i32* %n_addr, align 4
  %302 = icmp sle i32 %300, %301
  br i1 %302, label %bb34, label %bb36

bb36:                                             ; preds = %bb35
  store i32 1, i32* %l, align 4
  br label %bb38

bb37:                                             ; preds = %bb38
  %303 = load double*** %b_addr, align 8
  %304 = load i32* %ll, align 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds double** %303, i64 %305
  %307 = load double** %306, align 1
  %308 = load double*** %b_addr, align 8
  %309 = load i32* %ll, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds double** %308, i64 %310
  %312 = load double** %311, align 1
  %313 = load i32* %l, align 4
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds double* %312, i64 %314
  %316 = load double* %315, align 1
  %317 = load double*** %b_addr, align 8
  %318 = load i32* %icol, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds double** %317, i64 %319
  %321 = load double** %320, align 1
  %322 = load i32* %l, align 4
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds double* %321, i64 %323
  %325 = load double* %324, align 1
  %326 = load double* %dum, align 8
  %327 = fmul double %325, %326
  %328 = fsub double %316, %327
  %329 = load i32* %l, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds double* %307, i64 %330
  store double %328, double* %331, align 1
  %332 = load i32* %l, align 4
  %333 = add nsw i32 %332, 1
  store i32 %333, i32* %l, align 4
  br label %bb38

bb38:                                             ; preds = %bb37, %bb36
  %334 = load i32* %l, align 4
  %335 = load i32* %m_addr, align 4
  %336 = icmp sle i32 %334, %335
  br i1 %336, label %bb37, label %bb39

bb39:                                             ; preds = %bb38, %bb32
  %337 = load i32* %ll, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %ll, align 4
  br label %bb40

bb40:                                             ; preds = %bb39, %bb31
  %339 = load i32* %ll, align 4
  %340 = load i32* %n_addr, align 4
  %341 = icmp sle i32 %339, %340
  br i1 %341, label %bb32, label %bb41

bb41:                                             ; preds = %bb40
  %342 = load i32* %i, align 4
  %343 = add nsw i32 %342, 1
  store i32 %343, i32* %i, align 4
  br label %bb42

bb42:                                             ; preds = %bb41, %bb2
  %344 = load i32* %i, align 4
  %345 = load i32* %n_addr, align 4
  %346 = icmp sle i32 %344, %345
  br i1 %346, label %bb3, label %bb43

bb43:                                             ; preds = %bb42
  %347 = load i32* %n_addr, align 4
  store i32 %347, i32* %l, align 4
  br label %bb49

bb44:                                             ; preds = %bb49
  %348 = load i32** %indxr, align 8
  %349 = load i32* %l, align 4
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds i32* %348, i64 %350
  %352 = load i32* %351, align 1
  %353 = load i32** %indxc, align 8
  %354 = load i32* %l, align 4
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds i32* %353, i64 %355
  %357 = load i32* %356, align 1
  %358 = icmp ne i32 %352, %357
  br i1 %358, label %bb45, label %bb48

bb45:                                             ; preds = %bb44
  store i32 1, i32* %k, align 4
  br label %bb47

bb46:                                             ; preds = %bb47
  %359 = load double*** %a_addr, align 8
  %360 = load i32* %k, align 4
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds double** %359, i64 %361
  %363 = load double** %362, align 1
  %364 = load i32** %indxr, align 8
  %365 = load i32* %l, align 4
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds i32* %364, i64 %366
  %368 = load i32* %367, align 1
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds double* %363, i64 %369
  %371 = load double* %370, align 1
  store double %371, double* %temp, align 8
  %372 = load double*** %a_addr, align 8
  %373 = load i32* %k, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds double** %372, i64 %374
  %376 = load double** %375, align 1
  %377 = load i32** %indxr, align 8
  %378 = load i32* %l, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i32* %377, i64 %379
  %381 = load i32* %380, align 1
  %382 = load double*** %a_addr, align 8
  %383 = load i32* %k, align 4
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds double** %382, i64 %384
  %386 = load double** %385, align 1
  %387 = load i32** %indxc, align 8
  %388 = load i32* %l, align 4
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32* %387, i64 %389
  %391 = load i32* %390, align 1
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds double* %386, i64 %392
  %394 = load double* %393, align 1
  %395 = sext i32 %381 to i64
  %396 = getelementptr inbounds double* %376, i64 %395
  store double %394, double* %396, align 1
  %397 = load double*** %a_addr, align 8
  %398 = load i32* %k, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds double** %397, i64 %399
  %401 = load double** %400, align 1
  %402 = load i32** %indxc, align 8
  %403 = load i32* %l, align 4
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i32* %402, i64 %404
  %406 = load i32* %405, align 1
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds double* %401, i64 %407
  %409 = load double* %temp, align 8
  store double %409, double* %408, align 1
  %410 = load i32* %k, align 4
  %411 = add nsw i32 %410, 1
  store i32 %411, i32* %k, align 4
  br label %bb47

bb47:                                             ; preds = %bb46, %bb45
  %412 = load i32* %k, align 4
  %413 = load i32* %n_addr, align 4
  %414 = icmp sle i32 %412, %413
  br i1 %414, label %bb46, label %bb48

bb48:                                             ; preds = %bb47, %bb44
  %415 = load i32* %l, align 4
  %416 = sub i32 %415, 1
  store i32 %416, i32* %l, align 4
  br label %bb49

bb49:                                             ; preds = %bb48, %bb43
  %417 = load i32* %l, align 4
  %418 = icmp sgt i32 %417, 0
  br i1 %418, label %bb44, label %bb50

bb50:                                             ; preds = %bb49
  %419 = load i32* %n_addr, align 4
  %420 = sext i32 %419 to i64
  %421 = load i32** %ipiv, align 8
  call void @_Z12free_ivectorPill(i32* %421, i64 1, i64 %420) nounwind
  %422 = load i32* %n_addr, align 4
  %423 = sext i32 %422 to i64
  %424 = load i32** %indxr, align 8
  call void @_Z12free_ivectorPill(i32* %424, i64 1, i64 %423) nounwind
  %425 = load i32* %n_addr, align 4
  %426 = sext i32 %425 to i64
  %427 = load i32** %indxc, align 8
  call void @_Z12free_ivectorPill(i32* %427, i64 1, i64 %426) nounwind
  br label %return

return:                                           ; preds = %bb50
  ret void
}

declare double @llvm.sqrt.f64(double) nounwind readonly

define void @_Z13icdf_baselineiPdS_(i32 %N, double* %in, double* %out) nounwind {
entry:
  %N_addr = alloca i32
  %in_addr = alloca double*
  %out_addr = alloca double*
  %u = alloca double
  %i = alloca i32
  %u_high = alloca double
  %u_low = alloca double
  %d4 = alloca double
  %d3 = alloca double
  %d2 = alloca double
  %d1 = alloca double
  %c6 = alloca double
  %c5 = alloca double
  %c4 = alloca double
  %c3 = alloca double
  %c2 = alloca double
  %c1 = alloca double
  %b5 = alloca double
  %b4 = alloca double
  %b3 = alloca double
  %b2 = alloca double
  %b1 = alloca double
  %a6 = alloca double
  %a5 = alloca double
  %a4 = alloca double
  %a3 = alloca double
  %a2 = alloca double
  %a1 = alloca double
  %r = alloca double
  %z = alloca double
  %"alloca point" = bitcast i32 0 to i32
  store i32 %N, i32* %N_addr
  store double* %in, double** %in_addr
  store double* %out, double** %out_addr
  store double 0xC043D931BC1E0525, double* %a1, align 8
  store double 0x406B9E467034039B, double* %a2, align 8
  store double 0xC0713EDB2DC53B99, double* %a3, align 8
  store double 0x40614B72B40B401B, double* %a4, align 8
  store double 0xC03EAA3034C08BCD, double* %a5, align 8
  store double 0x40040D9320575479, double* %a6, align 8
  store double 0xC04B3CF0CE3004C4, double* %b1, align 8
  store double 0x406432BF2CF04277, double* %b2, align 8
  store double 0xC063765E0B02D8D2, double* %b3, align 8
  store double 0x4050B348B1A7E9BE, double* %b4, align 8
  store double 0xC02A8FB57E147826, double* %b5, align 8
  store double 0xBF7FE30D924ACFE0, double* %c1, align 8
  store double 0xBFD4A224C0E881B8, double* %c2, align 8
  store double 0xC00334C0C1701758, double* %c3, align 8
  store double 0xC00465DA2C703A1A, double* %c4, align 8
  store double 0x40117FA7F4EA4DC7, double* %c5, align 8
  store double 0x4007815C1E3FCFA2, double* %c6, align 8
  store double 0x3F7FE2D857AC9FD4, double* %d1, align 8
  store double 0x3FD4A34D2B590364, double* %d2, align 8
  store double 0x40038FA27C8AE616, double* %d3, align 8
  store double 0x400E09076895B119, double* %d4, align 8
  store double 2.425000e-02, double* %u_low, align 8
  store double 9.757500e-01, double* %u_high, align 8
  store i32 0, i32* %i, align 4
  br label %bb6

bb:                                               ; preds = %bb6
  %0 = load double** %in_addr, align 8
  %1 = load i32* %i, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds double* %0, i64 %2
  %4 = load double* %3, align 1
  store double %4, double* %u, align 8
  %5 = load double* %u, align 8
  %6 = fcmp olt double %5, 2.425000e-02
  br i1 %6, label %bb1, label %bb2

bb1:                                              ; preds = %bb
  %7 = load double* %u, align 8
  %8 = call double @llvm.log.f64(double %7)
  %9 = fmul double %8, -2.000000e+00
  %10 = call double @llvm.sqrt.f64(double %9)
  store double %10, double* %z, align 8
  %11 = load double* %z, align 8
  %12 = fmul double %11, 0xBF7FE30D924ACFE0
  %13 = fsub double %12, 0x3FD4A224C0E881B8
  %14 = load double* %z, align 8
  %15 = fmul double %13, %14
  %16 = fsub double %15, 0x400334C0C1701758
  %17 = load double* %z, align 8
  %18 = fmul double %16, %17
  %19 = fsub double %18, 0x400465DA2C703A1A
  %20 = load double* %z, align 8
  %21 = fmul double %19, %20
  %22 = fadd double %21, 0x40117FA7F4EA4DC7
  %23 = load double* %z, align 8
  %24 = fmul double %22, %23
  %25 = fadd double %24, 0x4007815C1E3FCFA2
  %26 = load double* %z, align 8
  %27 = fmul double %26, 0x3F7FE2D857AC9FD4
  %28 = fadd double %27, 0x3FD4A34D2B590364
  %29 = load double* %z, align 8
  %30 = fmul double %28, %29
  %31 = fadd double %30, 0x40038FA27C8AE616
  %32 = load double* %z, align 8
  %33 = fmul double %31, %32
  %34 = fadd double %33, 0x400E09076895B119
  %35 = load double* %z, align 8
  %36 = fmul double %34, %35
  %37 = fadd double %36, 1.000000e+00
  %38 = fdiv double %25, %37
  store double %38, double* %z, align 8
  br label %bb5

bb2:                                              ; preds = %bb
  %39 = load double* %u, align 8
  %40 = fcmp ole double %39, 9.757500e-01
  br i1 %40, label %bb3, label %bb4

bb3:                                              ; preds = %bb2
  %41 = load double* %u, align 8
  %42 = fsub double %41, 5.000000e-01
  store double %42, double* %z, align 8
  %43 = load double* %z, align 8
  %44 = load double* %z, align 8
  %45 = fmul double %43, %44
  store double %45, double* %r, align 8
  %46 = load double* %r, align 8
  %47 = fmul double %46, 0xC043D931BC1E0525
  %48 = fadd double %47, 0x406B9E467034039B
  %49 = load double* %r, align 8
  %50 = fmul double %48, %49
  %51 = fsub double %50, 0x40713EDB2DC53B99
  %52 = load double* %r, align 8
  %53 = fmul double %51, %52
  %54 = fadd double %53, 0x40614B72B40B401B
  %55 = load double* %r, align 8
  %56 = fmul double %54, %55
  %57 = fsub double %56, 0x403EAA3034C08BCD
  %58 = load double* %r, align 8
  %59 = fmul double %57, %58
  %60 = fadd double %59, 0x40040D9320575479
  %61 = load double* %z, align 8
  %62 = fmul double %60, %61
  %63 = load double* %r, align 8
  %64 = fmul double %63, 0xC04B3CF0CE3004C4
  %65 = fadd double %64, 0x406432BF2CF04277
  %66 = load double* %r, align 8
  %67 = fmul double %65, %66
  %68 = fsub double %67, 0x4063765E0B02D8D2
  %69 = load double* %r, align 8
  %70 = fmul double %68, %69
  %71 = fadd double %70, 0x4050B348B1A7E9BE
  %72 = load double* %r, align 8
  %73 = fmul double %71, %72
  %74 = fsub double %73, 0x402A8FB57E147826
  %75 = load double* %r, align 8
  %76 = fmul double %74, %75
  %77 = fadd double %76, 1.000000e+00
  %78 = fdiv double %62, %77
  store double %78, double* %z, align 8
  br label %bb5

bb4:                                              ; preds = %bb2
  %79 = load double* %u, align 8
  %80 = fsub double 1.000000e+00, %79
  %81 = call double @llvm.log.f64(double %80)
  %82 = fmul double %81, -2.000000e+00
  %83 = call double @llvm.sqrt.f64(double %82)
  store double %83, double* %z, align 8
  %84 = load double* %z, align 8
  %85 = fmul double %84, 0xBF7FE30D924ACFE0
  %86 = fsub double %85, 0x3FD4A224C0E881B8
  %87 = load double* %z, align 8
  %88 = fmul double %86, %87
  %89 = fsub double %88, 0x400334C0C1701758
  %90 = load double* %z, align 8
  %91 = fmul double %89, %90
  %92 = fsub double %91, 0x400465DA2C703A1A
  %93 = load double* %z, align 8
  %94 = fmul double %92, %93
  %95 = fadd double %94, 0x40117FA7F4EA4DC7
  %96 = load double* %z, align 8
  %97 = fmul double %95, %96
  %98 = fadd double %97, 0x4007815C1E3FCFA2
  %99 = fsub double -0.000000e+00, %98
  %100 = load double* %z, align 8
  %101 = fmul double %100, 0x3F7FE2D857AC9FD4
  %102 = fadd double %101, 0x3FD4A34D2B590364
  %103 = load double* %z, align 8
  %104 = fmul double %102, %103
  %105 = fadd double %104, 0x40038FA27C8AE616
  %106 = load double* %z, align 8
  %107 = fmul double %105, %106
  %108 = fadd double %107, 0x400E09076895B119
  %109 = load double* %z, align 8
  %110 = fmul double %108, %109
  %111 = fadd double %110, 1.000000e+00
  %112 = fdiv double %99, %111
  store double %112, double* %z, align 8
  br label %bb5

bb5:                                              ; preds = %bb4, %bb3, %bb1
  %113 = load double** %out_addr, align 8
  %114 = load i32* %i, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double* %113, i64 %115
  %117 = load double* %z, align 8
  store double %117, double* %116, align 1
  %118 = load i32* %i, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %i, align 4
  br label %bb6

bb6:                                              ; preds = %bb5, %entry
  %120 = load i32* %i, align 4
  %121 = load i32* %N_addr, align 4
  %122 = icmp slt i32 %120, %121
  br i1 %122, label %bb, label %bb7

bb7:                                              ; preds = %bb6
  br label %return

return:                                           ; preds = %bb7
  ret void
}

define void @_Z7serialBPPdS0_iii(double** %pdZ, double** %randZ, i32 %BLOCKSIZE, i32 %iN, i32 %iFactors) nounwind {
entry:
  %pdZ_addr = alloca double**
  %randZ_addr = alloca double**
  %BLOCKSIZE_addr = alloca i32
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %j = alloca i32
  %b = alloca i32
  %l = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %pdZ, double*** %pdZ_addr
  store double** %randZ, double*** %randZ_addr
  store i32 %BLOCKSIZE, i32* %BLOCKSIZE_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store i32 0, i32* %l, align 4
  br label %bb7

bb:                                               ; preds = %bb7
  store i32 0, i32* %b, align 4
  br label %bb5

bb1:                                              ; preds = %bb5
  store i32 1, i32* %j, align 4
  br label %bb3

bb2:                                              ; preds = %bb3
  %0 = load double*** %pdZ_addr, align 8
  %1 = load i32* %l, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds double** %0, i64 %2
  %4 = load double** %3, align 1
  %5 = load i32* %BLOCKSIZE_addr, align 4
  %6 = load i32* %j, align 4
  %7 = mul i32 %5, %6
  %8 = load i32* %b, align 4
  %9 = add nsw i32 %7, %8
  %10 = load double*** %randZ_addr, align 8
  %11 = load i32* %l, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double** %10, i64 %12
  %14 = load double** %13, align 1
  %15 = load i32* %BLOCKSIZE_addr, align 4
  %16 = load i32* %j, align 4
  %17 = mul i32 %15, %16
  %18 = load i32* %b, align 4
  %19 = add nsw i32 %17, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double* %14, i64 %20
  %22 = load double* %21, align 1
  %23 = call double @_Z12CumNormalInvd(double %22) nounwind
  %24 = sext i32 %9 to i64
  %25 = getelementptr inbounds double* %4, i64 %24
  store double %23, double* %25, align 1
  %26 = load i32* %j, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %j, align 4
  br label %bb3

bb3:                                              ; preds = %bb2, %bb1
  %28 = load i32* %iN_addr, align 4
  %29 = sub i32 %28, 1
  %30 = load i32* %j, align 4
  %31 = icmp sge i32 %29, %30
  br i1 %31, label %bb2, label %bb4

bb4:                                              ; preds = %bb3
  %32 = load i32* %b, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %b, align 4
  br label %bb5

bb5:                                              ; preds = %bb4, %bb
  %34 = load i32* %b, align 4
  %35 = load i32* %BLOCKSIZE_addr, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %bb1, label %bb6

bb6:                                              ; preds = %bb5
  %37 = load i32* %l, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %l, align 4
  br label %bb7

bb7:                                              ; preds = %bb6, %entry
  %39 = load i32* %iFactors_addr, align 4
  %40 = sub i32 %39, 1
  %41 = load i32* %l, align 4
  %42 = icmp sge i32 %40, %41
  br i1 %42, label %bb, label %bb8

bb8:                                              ; preds = %bb7
  br label %return

return:                                           ; preds = %bb8
  ret void
}

define i32 @_Z28HJM_SimPath_Forward_BlockingPPdiidS_S_S0_Pli(double** %ppdHJMPath, i32 %iN, i32 %iFactors, double %dYears, double* %pdForward, double* %pdTotalDrift, double** %ppdFactors, i64* %lRndSeed, i32 %BLOCKSIZE) nounwind {
entry:
  %ppdHJMPath_addr = alloca double**
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %dYears_addr = alloca double
  %pdForward_addr = alloca double*
  %pdTotalDrift_addr = alloca double*
  %ppdFactors_addr = alloca double**
  %lRndSeed_addr = alloca i64*
  %BLOCKSIZE_addr = alloca i32
  %retval = alloca i32
  %b = alloca i32
  %s = alloca i32
  %b1 = alloca i32
  %b2 = alloca i32
  %sqrt_ddelt = alloca double
  %ddelt = alloca double
  %dTotalShock = alloca double
  %randZ = alloca double**
  %pdZ = alloca double**
  %l = alloca i32
  %j = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %ppdHJMPath, double*** %ppdHJMPath_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double %dYears, double* %dYears_addr
  store double* %pdForward, double** %pdForward_addr
  store double* %pdTotalDrift, double** %pdTotalDrift_addr
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i64* %lRndSeed, i64** %lRndSeed_addr
  store i32 %BLOCKSIZE, i32* %BLOCKSIZE_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  %5 = load double* %ddelt, align 8
  %6 = call double @llvm.sqrt.f64(double %5)
  store double %6, double* %sqrt_ddelt, align 8
  %7 = load i32* %iN_addr, align 4
  %8 = load i32* %BLOCKSIZE_addr, align 4
  %9 = mul i32 %7, %8
  %10 = sub i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = load i32* %iFactors_addr, align 4
  %13 = sub i32 %12, 1
  %14 = sext i32 %13 to i64
  %15 = call double** @_Z7dmatrixllll(i64 0, i64 %14, i64 0, i64 %11) nounwind
  store double** %15, double*** %pdZ, align 8
  %16 = load i32* %iN_addr, align 4
  %17 = load i32* %BLOCKSIZE_addr, align 4
  %18 = mul i32 %16, %17
  %19 = sub i32 %18, 1
  %20 = sext i32 %19 to i64
  %21 = load i32* %iFactors_addr, align 4
  %22 = sub i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = call double** @_Z7dmatrixllll(i64 0, i64 %23, i64 0, i64 %20) nounwind
  store double** %24, double*** %randZ, align 8
  store i32 0, i32* %b2, align 4
  br label %bb9

bb:                                               ; preds = %bb9
  store i32 0, i32* %j, align 4
  br label %bb7

bb3:                                              ; preds = %bb7
  %25 = load double*** %ppdHJMPath_addr, align 8
  %26 = getelementptr inbounds double** %25, i64 0
  %27 = load double** %26, align 1
  %28 = load i32* %BLOCKSIZE_addr, align 4
  %29 = load i32* %j, align 4
  %30 = mul i32 %28, %29
  %31 = load i32* %b2, align 4
  %32 = add nsw i32 %30, %31
  %33 = load double** %pdForward_addr, align 8
  %34 = load i32* %j, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double* %33, i64 %35
  %37 = load double* %36, align 1
  %38 = sext i32 %32 to i64
  %39 = getelementptr inbounds double* %27, i64 %38
  store double %37, double* %39, align 1
  store i32 1, i32* %i, align 4
  br label %bb5

bb4:                                              ; preds = %bb5
  %40 = load double*** %ppdHJMPath_addr, align 8
  %41 = load i32* %i, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double** %40, i64 %42
  %44 = load double** %43, align 1
  %45 = load i32* %BLOCKSIZE_addr, align 4
  %46 = load i32* %j, align 4
  %47 = mul i32 %45, %46
  %48 = load i32* %b2, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds double* %44, i64 %50
  store double 0.000000e+00, double* %51, align 1
  %52 = load i32* %i, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %i, align 4
  br label %bb5

bb5:                                              ; preds = %bb4, %bb3
  %54 = load i32* %iN_addr, align 4
  %55 = sub i32 %54, 1
  %56 = load i32* %i, align 4
  %57 = icmp sge i32 %55, %56
  br i1 %57, label %bb4, label %bb6

bb6:                                              ; preds = %bb5
  %58 = load i32* %j, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %j, align 4
  br label %bb7

bb7:                                              ; preds = %bb6, %bb
  %60 = load i32* %iN_addr, align 4
  %61 = sub i32 %60, 1
  %62 = load i32* %j, align 4
  %63 = icmp sge i32 %61, %62
  br i1 %63, label %bb3, label %bb8

bb8:                                              ; preds = %bb7
  %64 = load i32* %b2, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %b2, align 4
  br label %bb9

bb9:                                              ; preds = %bb8, %entry
  %66 = load i32* %b2, align 4
  %67 = load i32* %BLOCKSIZE_addr, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %bb, label %bb10

bb10:                                             ; preds = %bb9
  store i32 0, i32* %b1, align 4
  br label %bb21

bb11:                                             ; preds = %bb21
  store i32 0, i32* %s, align 4
  br label %bb19

bb12:                                             ; preds = %bb19
  store i32 1, i32* %j, align 4
  br label %bb17

bb13:                                             ; preds = %bb17
  store i32 0, i32* %l, align 4
  br label %bb15

bb14:                                             ; preds = %bb15
  %69 = load double*** %randZ, align 8
  %70 = load i32* %l, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double** %69, i64 %71
  %73 = load double** %72, align 1
  %74 = load i32* %BLOCKSIZE_addr, align 4
  %75 = load i32* %j, align 4
  %76 = mul i32 %74, %75
  %77 = load i32* %b1, align 4
  %78 = add nsw i32 %76, %77
  %79 = load i32* %s, align 4
  %80 = add nsw i32 %78, %79
  %81 = load i64** %lRndSeed_addr, align 8
  %82 = call double @_Z7RanUnifPl(i64* %81) nounwind
  %83 = sext i32 %80 to i64
  %84 = getelementptr inbounds double* %73, i64 %83
  store double %82, double* %84, align 1
  %85 = load i32* %l, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %l, align 4
  br label %bb15

bb15:                                             ; preds = %bb14, %bb13
  %87 = load i32* %iFactors_addr, align 4
  %88 = sub i32 %87, 1
  %89 = load i32* %l, align 4
  %90 = icmp sge i32 %88, %89
  br i1 %90, label %bb14, label %bb16

bb16:                                             ; preds = %bb15
  %91 = load i32* %j, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %j, align 4
  br label %bb17

bb17:                                             ; preds = %bb16, %bb12
  %93 = load i32* %iN_addr, align 4
  %94 = sub i32 %93, 1
  %95 = load i32* %j, align 4
  %96 = icmp sge i32 %94, %95
  br i1 %96, label %bb13, label %bb18

bb18:                                             ; preds = %bb17
  %97 = load i32* %s, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %s, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %bb11
  %99 = load i32* %s, align 4
  %100 = icmp sle i32 %99, 0
  br i1 %100, label %bb12, label %bb20

bb20:                                             ; preds = %bb19
  %101 = load i32* %b1, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %b1, align 4
  br label %bb21

bb21:                                             ; preds = %bb20, %bb10
  %103 = load i32* %b1, align 4
  %104 = load i32* %BLOCKSIZE_addr, align 4
  %105 = icmp slt i32 %103, %104
  br i1 %105, label %bb11, label %bb22

bb22:                                             ; preds = %bb21
  %106 = load double*** %pdZ, align 8
  %107 = load double*** %randZ, align 8
  %108 = load i32* %BLOCKSIZE_addr, align 4
  %109 = load i32* %iN_addr, align 4
  %110 = load i32* %iFactors_addr, align 4
  call void @_Z7serialBPPdS0_iii(double** %106, double** %107, i32 %108, i32 %109, i32 %110) nounwind
  store i32 0, i32* %b, align 4
  br label %bb33

bb23:                                             ; preds = %bb33
  store i32 1, i32* %j, align 4
  br label %bb31

bb24:                                             ; preds = %bb31
  store i32 0, i32* %l, align 4
  br label %bb29

bb25:                                             ; preds = %bb29
  store double 0.000000e+00, double* %dTotalShock, align 8
  store i32 0, i32* %i, align 4
  br label %bb27

bb26:                                             ; preds = %bb27
  %111 = load double*** %ppdFactors_addr, align 8
  %112 = load i32* %i, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds double** %111, i64 %113
  %115 = load double** %114, align 1
  %116 = load i32* %l, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds double* %115, i64 %117
  %119 = load double* %118, align 1
  %120 = load double*** %pdZ, align 8
  %121 = load i32* %i, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds double** %120, i64 %122
  %124 = load double** %123, align 1
  %125 = load i32* %BLOCKSIZE_addr, align 4
  %126 = load i32* %j, align 4
  %127 = mul i32 %125, %126
  %128 = load i32* %b, align 4
  %129 = add nsw i32 %127, %128
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double* %124, i64 %130
  %132 = load double* %131, align 1
  %133 = fmul double %119, %132
  %134 = load double* %dTotalShock, align 8
  %135 = fadd double %133, %134
  store double %135, double* %dTotalShock, align 8
  %136 = load i32* %i, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %i, align 4
  br label %bb27

bb27:                                             ; preds = %bb26, %bb25
  %138 = load i32* %iFactors_addr, align 4
  %139 = sub i32 %138, 1
  %140 = load i32* %i, align 4
  %141 = icmp sge i32 %139, %140
  br i1 %141, label %bb26, label %bb28

bb28:                                             ; preds = %bb27
  %142 = load double*** %ppdHJMPath_addr, align 8
  %143 = load i32* %j, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds double** %142, i64 %144
  %146 = load double** %145, align 1
  %147 = load i32* %BLOCKSIZE_addr, align 4
  %148 = load i32* %l, align 4
  %149 = mul i32 %147, %148
  %150 = load i32* %b, align 4
  %151 = add nsw i32 %149, %150
  %152 = load i32* %j, align 4
  %153 = sub i32 %152, 1
  %154 = load double*** %ppdHJMPath_addr, align 8
  %155 = sext i32 %153 to i64
  %156 = getelementptr inbounds double** %154, i64 %155
  %157 = load double** %156, align 1
  %158 = load i32* %l, align 4
  %159 = add nsw i32 %158, 1
  %160 = load i32* %BLOCKSIZE_addr, align 4
  %161 = mul i32 %159, %160
  %162 = load i32* %b, align 4
  %163 = add nsw i32 %161, %162
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds double* %157, i64 %164
  %166 = load double* %165, align 1
  %167 = load double** %pdTotalDrift_addr, align 8
  %168 = load i32* %l, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds double* %167, i64 %169
  %171 = load double* %170, align 1
  %172 = load double* %ddelt, align 8
  %173 = fmul double %171, %172
  %174 = fadd double %166, %173
  %175 = load double* %sqrt_ddelt, align 8
  %176 = load double* %dTotalShock, align 8
  %177 = fmul double %175, %176
  %178 = fadd double %174, %177
  %179 = sext i32 %151 to i64
  %180 = getelementptr inbounds double* %146, i64 %179
  store double %178, double* %180, align 1
  %181 = load i32* %l, align 4
  %182 = add nsw i32 %181, 1
  store i32 %182, i32* %l, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %bb24
  %183 = load i32* %j, align 4
  %184 = add nsw i32 %183, 1
  %185 = load i32* %iN_addr, align 4
  %186 = sub i32 %185, %184
  %187 = load i32* %l, align 4
  %188 = icmp sge i32 %186, %187
  br i1 %188, label %bb25, label %bb30

bb30:                                             ; preds = %bb29
  %189 = load i32* %j, align 4
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %j, align 4
  br label %bb31

bb31:                                             ; preds = %bb30, %bb23
  %191 = load i32* %iN_addr, align 4
  %192 = sub i32 %191, 1
  %193 = load i32* %j, align 4
  %194 = icmp sge i32 %192, %193
  br i1 %194, label %bb24, label %bb32

bb32:                                             ; preds = %bb31
  %195 = load i32* %b, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %b, align 4
  br label %bb33

bb33:                                             ; preds = %bb32, %bb22
  %197 = load i32* %b, align 4
  %198 = load i32* %BLOCKSIZE_addr, align 4
  %199 = icmp slt i32 %197, %198
  br i1 %199, label %bb23, label %bb34

bb34:                                             ; preds = %bb33
  %200 = load i32* %iN_addr, align 4
  %201 = load i32* %BLOCKSIZE_addr, align 4
  %202 = mul i32 %200, %201
  %203 = sub i32 %202, 1
  %204 = sext i32 %203 to i64
  %205 = load i32* %iFactors_addr, align 4
  %206 = sub i32 %205, 1
  %207 = sext i32 %206 to i64
  %208 = load double*** %pdZ, align 8
  call void @_Z12free_dmatrixPPdllll(double** %208, i64 0, i64 %207, i64 0, i64 %204) nounwind
  %209 = load i32* %iN_addr, align 4
  %210 = load i32* %BLOCKSIZE_addr, align 4
  %211 = mul i32 %209, %210
  %212 = sub i32 %211, 1
  %213 = sext i32 %212 to i64
  %214 = load i32* %iFactors_addr, align 4
  %215 = sub i32 %214, 1
  %216 = sext i32 %215 to i64
  %217 = load double*** %randZ, align 8
  call void @_Z12free_dmatrixPPdllll(double** %217, i64 0, i64 %216, i64 0, i64 %213) nounwind
  store i32 1, i32* %iSuccess, align 4
  %218 = load i32* %iSuccess, align 4
  store i32 %218, i32* %0, align 4
  %219 = load i32* %0, align 4
  store i32 %219, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb34
  %retval35 = load i32* %retval
  ret i32 %retval35
}

define i32 @_Z17HJM_SimPath_YieldPPdiidS_S0_Pl(double** %ppdHJMPath, i32 %iN, i32 %iFactors, double %dYears, double* %pdYield, double** %ppdFactors, i64* %lRndSeed) nounwind {
entry:
  %ppdHJMPath_addr = alloca double**
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %dYears_addr = alloca double
  %pdYield_addr = alloca double*
  %ppdFactors_addr = alloca double**
  %lRndSeed_addr = alloca i64*
  %retval = alloca i32
  %pdTotalDrift = alloca double*
  %ppdDrifts = alloca double**
  %pdForward = alloca double*
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %ppdHJMPath, double*** %ppdHJMPath_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double %dYears, double* %dYears_addr
  store double* %pdYield, double** %pdYield_addr
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i64* %lRndSeed, i64** %lRndSeed_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load i32* %iN_addr, align 4
  %2 = sub i32 %1, 1
  %3 = sext i32 %2 to i64
  %4 = call double* @_Z7dvectorll(i64 0, i64 %3) nounwind
  store double* %4, double** %pdForward, align 8
  %5 = load i32* %iN_addr, align 4
  %6 = sub i32 %5, 2
  %7 = sext i32 %6 to i64
  %8 = load i32* %iFactors_addr, align 4
  %9 = sub i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = call double** @_Z7dmatrixllll(i64 0, i64 %10, i64 0, i64 %7) nounwind
  store double** %11, double*** %ppdDrifts, align 8
  %12 = load i32* %iN_addr, align 4
  %13 = sub i32 %12, 2
  %14 = sext i32 %13 to i64
  %15 = call double* @_Z7dvectorll(i64 0, i64 %14) nounwind
  store double* %15, double** %pdTotalDrift, align 8
  %16 = load double** %pdForward, align 8
  %17 = load i32* %iN_addr, align 4
  %18 = load double** %pdYield_addr, align 8
  %19 = call i32 @_Z20HJM_Yield_to_ForwardPdiS_(double* %16, i32 %17, double* %18) nounwind
  store i32 %19, i32* %iSuccess, align 4
  %20 = load i32* %iSuccess, align 4
  %21 = icmp ne i32 %20, 1
  br i1 %21, label %bb, label %bb1

bb:                                               ; preds = %entry
  %22 = load i32* %iN_addr, align 4
  %23 = sub i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = load double** %pdForward, align 8
  call void @_Z12free_dvectorPdll(double* %25, i64 0, i64 %24) nounwind
  %26 = load i32* %iN_addr, align 4
  %27 = sub i32 %26, 2
  %28 = sext i32 %27 to i64
  %29 = load i32* %iFactors_addr, align 4
  %30 = sub i32 %29, 1
  %31 = sext i32 %30 to i64
  %32 = load double*** %ppdDrifts, align 8
  call void @_Z12free_dmatrixPPdllll(double** %32, i64 0, i64 %31, i64 0, i64 %28) nounwind
  %33 = load i32* %iN_addr, align 4
  %34 = sub i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = load double** %pdTotalDrift, align 8
  call void @_Z12free_dvectorPdll(double* %36, i64 0, i64 %35) nounwind
  %37 = load i32* %iSuccess, align 4
  store i32 %37, i32* %0, align 4
  br label %bb6

bb1:                                              ; preds = %entry
  %38 = load double** %pdTotalDrift, align 8
  %39 = load double*** %ppdDrifts, align 8
  %40 = load i32* %iN_addr, align 4
  %41 = load i32* %iFactors_addr, align 4
  %42 = load double* %dYears_addr, align 8
  %43 = load double*** %ppdFactors_addr, align 8
  %44 = call i32 @_Z10HJM_DriftsPdPS_iidS0_(double* %38, double** %39, i32 %40, i32 %41, double %42, double** %43) nounwind
  store i32 %44, i32* %iSuccess, align 4
  %45 = load i32* %iSuccess, align 4
  %46 = icmp ne i32 %45, 1
  br i1 %46, label %bb2, label %bb3

bb2:                                              ; preds = %bb1
  %47 = load i32* %iN_addr, align 4
  %48 = sub i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = load double** %pdForward, align 8
  call void @_Z12free_dvectorPdll(double* %50, i64 0, i64 %49) nounwind
  %51 = load i32* %iN_addr, align 4
  %52 = sub i32 %51, 2
  %53 = sext i32 %52 to i64
  %54 = load i32* %iFactors_addr, align 4
  %55 = sub i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = load double*** %ppdDrifts, align 8
  call void @_Z12free_dmatrixPPdllll(double** %57, i64 0, i64 %56, i64 0, i64 %53) nounwind
  %58 = load i32* %iN_addr, align 4
  %59 = sub i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = load double** %pdTotalDrift, align 8
  call void @_Z12free_dvectorPdll(double* %61, i64 0, i64 %60) nounwind
  %62 = load i32* %iSuccess, align 4
  store i32 %62, i32* %0, align 4
  br label %bb6

bb3:                                              ; preds = %bb1
  %63 = load double*** %ppdHJMPath_addr, align 8
  %64 = load i32* %iN_addr, align 4
  %65 = load i32* %iFactors_addr, align 4
  %66 = load double* %dYears_addr, align 8
  %67 = load double** %pdForward, align 8
  %68 = load double** %pdTotalDrift, align 8
  %69 = load double*** %ppdFactors_addr, align 8
  %70 = load i64** %lRndSeed_addr, align 8
  %71 = call i32 @_Z19HJM_SimPath_ForwardPPdiidS_S_S0_Pl(double** %63, i32 %64, i32 %65, double %66, double* %67, double* %68, double** %69, i64* %70) nounwind
  store i32 %71, i32* %iSuccess, align 4
  %72 = load i32* %iSuccess, align 4
  %73 = icmp ne i32 %72, 1
  br i1 %73, label %bb4, label %bb5

bb4:                                              ; preds = %bb3
  %74 = load i32* %iN_addr, align 4
  %75 = sub i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = load double** %pdForward, align 8
  call void @_Z12free_dvectorPdll(double* %77, i64 0, i64 %76) nounwind
  %78 = load i32* %iN_addr, align 4
  %79 = sub i32 %78, 2
  %80 = sext i32 %79 to i64
  %81 = load i32* %iFactors_addr, align 4
  %82 = sub i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = load double*** %ppdDrifts, align 8
  call void @_Z12free_dmatrixPPdllll(double** %84, i64 0, i64 %83, i64 0, i64 %80) nounwind
  %85 = load i32* %iN_addr, align 4
  %86 = sub i32 %85, 1
  %87 = sext i32 %86 to i64
  %88 = load double** %pdTotalDrift, align 8
  call void @_Z12free_dvectorPdll(double* %88, i64 0, i64 %87) nounwind
  %89 = load i32* %iSuccess, align 4
  store i32 %89, i32* %0, align 4
  br label %bb6

bb5:                                              ; preds = %bb3
  %90 = load i32* %iN_addr, align 4
  %91 = sub i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = load double** %pdForward, align 8
  call void @_Z12free_dvectorPdll(double* %93, i64 0, i64 %92) nounwind
  %94 = load i32* %iN_addr, align 4
  %95 = sub i32 %94, 2
  %96 = sext i32 %95 to i64
  %97 = load i32* %iFactors_addr, align 4
  %98 = sub i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = load double*** %ppdDrifts, align 8
  call void @_Z12free_dmatrixPPdllll(double** %100, i64 0, i64 %99, i64 0, i64 %96) nounwind
  %101 = load i32* %iN_addr, align 4
  %102 = sub i32 %101, 1
  %103 = sext i32 %102 to i64
  %104 = load double** %pdTotalDrift, align 8
  call void @_Z12free_dvectorPdll(double* %104, i64 0, i64 %103) nounwind
  store i32 1, i32* %iSuccess, align 4
  %105 = load i32* %iSuccess, align 4
  store i32 %105, i32* %0, align 4
  br label %bb6

bb6:                                              ; preds = %bb5, %bb4, %bb2, %bb
  %106 = load i32* %0, align 4
  store i32 %106, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb6
  %retval7 = load i32* %retval
  ret i32 %retval7
}

define i32 @_Z20HJM_Yield_to_ForwardPdiS_(double* %pdForward, i32 %iN, double* %pdYield) nounwind {
entry:
  %pdForward_addr = alloca double*
  %iN_addr = alloca i32
  %pdYield_addr = alloca double*
  %retval = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdForward, double** %pdForward_addr
  store i32 %iN, i32* %iN_addr
  store double* %pdYield, double** %pdYield_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load double** %pdYield_addr, align 8
  %2 = getelementptr inbounds double* %1, i64 0
  %3 = load double* %2, align 1
  %4 = load double** %pdForward_addr, align 8
  %5 = getelementptr inbounds double* %4, i64 0
  store double %3, double* %5, align 1
  store i32 1, i32* %i, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %6 = load i32* %i, align 4
  %7 = add nsw i32 %6, 1
  %8 = sitofp i32 %7 to double
  %9 = load double** %pdYield_addr, align 8
  %10 = load i32* %i, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double* %9, i64 %11
  %13 = load double* %12, align 1
  %14 = fmul double %8, %13
  %15 = load i32* %i, align 4
  %16 = sitofp i32 %15 to double
  %17 = load i32* %i, align 4
  %18 = sub i32 %17, 1
  %19 = load double** %pdYield_addr, align 8
  %20 = sext i32 %18 to i64
  %21 = getelementptr inbounds double* %19, i64 %20
  %22 = load double* %21, align 1
  %23 = fmul double %16, %22
  %24 = fsub double %14, %23
  %25 = load double** %pdForward_addr, align 8
  %26 = load i32* %i, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double* %25, i64 %27
  store double %24, double* %28, align 1
  %29 = load i32* %i, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %i, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %31 = load i32* %iN_addr, align 4
  %32 = sub i32 %31, 1
  %33 = load i32* %i, align 4
  %34 = icmp sge i32 %32, %33
  br i1 %34, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 1, i32* %iSuccess, align 4
  %35 = load i32* %iSuccess, align 4
  store i32 %35, i32* %0, align 4
  %36 = load i32* %0, align 4
  store i32 %36, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb2
  %retval3 = load i32* %retval
  ret i32 %retval3
}

define i32 @_Z10HJM_DriftsPdPS_iidS0_(double* %pdTotalDrift, double** %ppdDrifts, i32 %iN, i32 %iFactors, double %dYears, double** %ppdFactors) nounwind {
entry:
  %pdTotalDrift_addr = alloca double*
  %ppdDrifts_addr = alloca double**
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %dYears_addr = alloca double
  %ppdFactors_addr = alloca double**
  %retval = alloca i32
  %dSumVol = alloca double
  %ddelt = alloca double
  %l = alloca i32
  %j = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdTotalDrift, double** %pdTotalDrift_addr
  store double** %ppdDrifts, double*** %ppdDrifts_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double %dYears, double* %dYears_addr
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  store i32 0, i32* %i, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %5 = load double*** %ppdDrifts_addr, align 8
  %6 = load i32* %i, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds double** %5, i64 %7
  %9 = load double** %8, align 1
  %10 = load double* %ddelt, align 8
  %11 = fmul double %10, 5.000000e-01
  %12 = load double*** %ppdFactors_addr, align 8
  %13 = load i32* %i, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds double** %12, i64 %14
  %16 = load double** %15, align 1
  %17 = getelementptr inbounds double* %16, i64 0
  %18 = load double* %17, align 1
  %19 = fmul double %11, %18
  %20 = load double*** %ppdFactors_addr, align 8
  %21 = load i32* %i, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double** %20, i64 %22
  %24 = load double** %23, align 1
  %25 = getelementptr inbounds double* %24, i64 0
  %26 = load double* %25, align 1
  %27 = fmul double %19, %26
  %28 = getelementptr inbounds double* %9, i64 0
  store double %27, double* %28, align 1
  %29 = load i32* %i, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %i, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %31 = load i32* %iFactors_addr, align 4
  %32 = sub i32 %31, 1
  %33 = load i32* %i, align 4
  %34 = icmp sge i32 %32, %33
  br i1 %34, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 0, i32* %i, align 4
  br label %bb13

bb3:                                              ; preds = %bb13
  store i32 1, i32* %j, align 4
  br label %bb11

bb4:                                              ; preds = %bb11
  %35 = load double*** %ppdDrifts_addr, align 8
  %36 = load i32* %i, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double** %35, i64 %37
  %39 = load double** %38, align 1
  %40 = load i32* %j, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double* %39, i64 %41
  store double 0.000000e+00, double* %42, align 1
  store i32 0, i32* %l, align 4
  br label %bb6

bb5:                                              ; preds = %bb6
  %43 = load double*** %ppdDrifts_addr, align 8
  %44 = load i32* %i, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double** %43, i64 %45
  %47 = load double** %46, align 1
  %48 = load double*** %ppdDrifts_addr, align 8
  %49 = load i32* %i, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds double** %48, i64 %50
  %52 = load double** %51, align 1
  %53 = load i32* %j, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double* %52, i64 %54
  %56 = load double* %55, align 1
  %57 = load double*** %ppdDrifts_addr, align 8
  %58 = load i32* %i, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds double** %57, i64 %59
  %61 = load double** %60, align 1
  %62 = load i32* %l, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds double* %61, i64 %63
  %65 = load double* %64, align 1
  %66 = fsub double %56, %65
  %67 = load i32* %j, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds double* %47, i64 %68
  store double %66, double* %69, align 1
  %70 = load i32* %l, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %l, align 4
  br label %bb6

bb6:                                              ; preds = %bb5, %bb4
  %72 = load i32* %j, align 4
  %73 = sub i32 %72, 1
  %74 = load i32* %l, align 4
  %75 = icmp sge i32 %73, %74
  br i1 %75, label %bb5, label %bb7

bb7:                                              ; preds = %bb6
  store double 0.000000e+00, double* %dSumVol, align 8
  store i32 0, i32* %l, align 4
  br label %bb9

bb8:                                              ; preds = %bb9
  %76 = load double*** %ppdFactors_addr, align 8
  %77 = load i32* %i, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double** %76, i64 %78
  %80 = load double** %79, align 1
  %81 = load i32* %l, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds double* %80, i64 %82
  %84 = load double* %83, align 1
  %85 = load double* %dSumVol, align 8
  %86 = fadd double %84, %85
  store double %86, double* %dSumVol, align 8
  %87 = load i32* %l, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %l, align 4
  br label %bb9

bb9:                                              ; preds = %bb8, %bb7
  %89 = load i32* %l, align 4
  %90 = load i32* %j, align 4
  %91 = icmp sle i32 %89, %90
  br i1 %91, label %bb8, label %bb10

bb10:                                             ; preds = %bb9
  %92 = load double*** %ppdDrifts_addr, align 8
  %93 = load i32* %i, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds double** %92, i64 %94
  %96 = load double** %95, align 1
  %97 = load double*** %ppdDrifts_addr, align 8
  %98 = load i32* %i, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds double** %97, i64 %99
  %101 = load double** %100, align 1
  %102 = load i32* %j, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds double* %101, i64 %103
  %105 = load double* %104, align 1
  %106 = load double* %ddelt, align 8
  %107 = fmul double %106, 5.000000e-01
  %108 = load double* %dSumVol, align 8
  %109 = fmul double %107, %108
  %110 = load double* %dSumVol, align 8
  %111 = fmul double %109, %110
  %112 = fadd double %105, %111
  %113 = load i32* %j, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds double* %96, i64 %114
  store double %112, double* %115, align 1
  %116 = load i32* %j, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %j, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %bb3
  %118 = load i32* %iN_addr, align 4
  %119 = sub i32 %118, 2
  %120 = load i32* %j, align 4
  %121 = icmp sge i32 %119, %120
  br i1 %121, label %bb4, label %bb12

bb12:                                             ; preds = %bb11
  %122 = load i32* %i, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %i, align 4
  br label %bb13

bb13:                                             ; preds = %bb12, %bb2
  %124 = load i32* %iFactors_addr, align 4
  %125 = sub i32 %124, 1
  %126 = load i32* %i, align 4
  %127 = icmp sge i32 %125, %126
  br i1 %127, label %bb3, label %bb14

bb14:                                             ; preds = %bb13
  store i32 0, i32* %i, align 4
  br label %bb19

bb15:                                             ; preds = %bb19
  %128 = load double** %pdTotalDrift_addr, align 8
  %129 = load i32* %i, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double* %128, i64 %130
  store double 0.000000e+00, double* %131, align 1
  store i32 0, i32* %j, align 4
  br label %bb17

bb16:                                             ; preds = %bb17
  %132 = load double** %pdTotalDrift_addr, align 8
  %133 = load i32* %i, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double* %132, i64 %134
  %136 = load double* %135, align 1
  %137 = load double*** %ppdDrifts_addr, align 8
  %138 = load i32* %j, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds double** %137, i64 %139
  %141 = load double** %140, align 1
  %142 = load i32* %i, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds double* %141, i64 %143
  %145 = load double* %144, align 1
  %146 = fadd double %136, %145
  %147 = load double** %pdTotalDrift_addr, align 8
  %148 = load i32* %i, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds double* %147, i64 %149
  store double %146, double* %150, align 1
  %151 = load i32* %j, align 4
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %j, align 4
  br label %bb17

bb17:                                             ; preds = %bb16, %bb15
  %153 = load i32* %iFactors_addr, align 4
  %154 = sub i32 %153, 1
  %155 = load i32* %j, align 4
  %156 = icmp sge i32 %154, %155
  br i1 %156, label %bb16, label %bb18

bb18:                                             ; preds = %bb17
  %157 = load i32* %i, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %i, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %bb14
  %159 = load i32* %iN_addr, align 4
  %160 = sub i32 %159, 2
  %161 = load i32* %i, align 4
  %162 = icmp sge i32 %160, %161
  br i1 %162, label %bb15, label %bb20

bb20:                                             ; preds = %bb19
  store i32 1, i32* %iSuccess, align 4
  %163 = load i32* %iSuccess, align 4
  store i32 %163, i32* %0, align 4
  %164 = load i32* %0, align 4
  store i32 %164, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb20
  %retval21 = load i32* %retval
  ret i32 %retval21
}

define i32 @_Z20HJM_Forward_to_YieldPdiS_(double* %pdYield, i32 %iN, double* %pdForward) nounwind {
entry:
  %pdYield_addr = alloca double*
  %iN_addr = alloca i32
  %pdForward_addr = alloca double*
  %retval = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdYield, double** %pdYield_addr
  store i32 %iN, i32* %iN_addr
  store double* %pdForward, double** %pdForward_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load double** %pdForward_addr, align 8
  %2 = getelementptr inbounds double* %1, i64 0
  %3 = load double* %2, align 1
  %4 = load double** %pdYield_addr, align 8
  %5 = getelementptr inbounds double* %4, i64 0
  store double %3, double* %5, align 1
  store i32 1, i32* %i, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %6 = load i32* %i, align 4
  %7 = sitofp i32 %6 to double
  %8 = load i32* %i, align 4
  %9 = sub i32 %8, 1
  %10 = load double** %pdYield_addr, align 8
  %11 = sext i32 %9 to i64
  %12 = getelementptr inbounds double* %10, i64 %11
  %13 = load double* %12, align 1
  %14 = fmul double %7, %13
  %15 = load double** %pdForward_addr, align 8
  %16 = load i32* %i, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double* %15, i64 %17
  %19 = load double* %18, align 1
  %20 = fadd double %14, %19
  %21 = load i32* %i, align 4
  %22 = add nsw i32 %21, 1
  %23 = sitofp i32 %22 to double
  %24 = fdiv double %20, %23
  %25 = load double** %pdYield_addr, align 8
  %26 = load i32* %i, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double* %25, i64 %27
  store double %24, double* %28, align 1
  %29 = load i32* %i, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %i, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %31 = load i32* %iN_addr, align 4
  %32 = sub i32 %31, 1
  %33 = load i32* %i, align 4
  %34 = icmp sge i32 %32, %33
  br i1 %34, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 1, i32* %iSuccess, align 4
  %35 = load i32* %iSuccess, align 4
  store i32 %35, i32* %0, align 4
  %36 = load i32* %0, align 4
  store i32 %36, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb2
  %retval3 = load i32* %retval
  ret i32 %retval3
}

define i32 @_Z16Discount_FactorsPdidS_(double* %pdDiscountFactors, i32 %iN, double %dYears, double* %pdRatePath) nounwind {
entry:
  %pdDiscountFactors_addr = alloca double*
  %iN_addr = alloca i32
  %dYears_addr = alloca double
  %pdRatePath_addr = alloca double*
  %retval = alloca i32
  %ddelt = alloca double
  %iSuccess = alloca i32
  %j = alloca i32
  %i = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdDiscountFactors, double** %pdDiscountFactors_addr
  store i32 %iN, i32* %iN_addr
  store double %dYears, double* %dYears_addr
  store double* %pdRatePath, double** %pdRatePath_addr
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  store i32 0, i32* %i, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %5 = load double** %pdDiscountFactors_addr, align 8
  %6 = load i32* %i, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds double* %5, i64 %7
  store double 1.000000e+00, double* %8, align 1
  %9 = load i32* %i, align 4
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %i, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %11 = load i32* %iN_addr, align 4
  %12 = sub i32 %11, 1
  %13 = load i32* %i, align 4
  %14 = icmp sge i32 %12, %13
  br i1 %14, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 1, i32* %i, align 4
  br label %bb7

bb3:                                              ; preds = %bb7
  store i32 0, i32* %j, align 4
  br label %bb5

bb4:                                              ; preds = %bb5
  %15 = load double** %pdDiscountFactors_addr, align 8
  %16 = load i32* %i, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double* %15, i64 %17
  %19 = load double* %18, align 1
  %20 = load double** %pdRatePath_addr, align 8
  %21 = load i32* %j, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double* %20, i64 %22
  %24 = load double* %23, align 1
  %25 = fsub double -0.000000e+00, %24
  %26 = load double* %ddelt, align 8
  %27 = fmul double %25, %26
  %28 = call double @llvm.exp.f64(double %27)
  %29 = fmul double %19, %28
  %30 = load double** %pdDiscountFactors_addr, align 8
  %31 = load i32* %i, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double* %30, i64 %32
  store double %29, double* %33, align 1
  %34 = load i32* %j, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %j, align 4
  br label %bb5

bb5:                                              ; preds = %bb4, %bb3
  %36 = load i32* %i, align 4
  %37 = sub i32 %36, 1
  %38 = load i32* %j, align 4
  %39 = icmp sge i32 %37, %38
  br i1 %39, label %bb4, label %bb6

bb6:                                              ; preds = %bb5
  %40 = load i32* %i, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %i, align 4
  br label %bb7

bb7:                                              ; preds = %bb6, %bb2
  %42 = load i32* %iN_addr, align 4
  %43 = sub i32 %42, 1
  %44 = load i32* %i, align 4
  %45 = icmp sge i32 %43, %44
  br i1 %45, label %bb3, label %bb8

bb8:                                              ; preds = %bb7
  store i32 1, i32* %iSuccess, align 4
  %46 = load i32* %iSuccess, align 4
  store i32 %46, i32* %0, align 4
  %47 = load i32* %0, align 4
  store i32 %47, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb8
  %retval9 = load i32* %retval
  ret i32 %retval9
}

declare double @llvm.exp.f64(double) nounwind readonly

define i32 @_Z25Discount_Factors_BlockingPdidS_i(double* %pdDiscountFactors, i32 %iN, double %dYears, double* %pdRatePath, i32 %BLOCKSIZE) nounwind {
entry:
  %pdDiscountFactors_addr = alloca double*
  %iN_addr = alloca i32
  %dYears_addr = alloca double
  %pdRatePath_addr = alloca double*
  %BLOCKSIZE_addr = alloca i32
  %retval = alloca i32
  %pdexpRes = alloca double*
  %ddelt = alloca double
  %iSuccess = alloca i32
  %b = alloca i32
  %j = alloca i32
  %i = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdDiscountFactors, double** %pdDiscountFactors_addr
  store i32 %iN, i32* %iN_addr
  store double %dYears, double* %dYears_addr
  store double* %pdRatePath, double** %pdRatePath_addr
  store i32 %BLOCKSIZE, i32* %BLOCKSIZE_addr
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  %5 = load i32* %iN_addr, align 4
  %6 = sub i32 %5, 1
  %7 = load i32* %BLOCKSIZE_addr, align 4
  %8 = mul i32 %6, %7
  %9 = sub i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = call double* @_Z7dvectorll(i64 0, i64 %10) nounwind
  store double* %11, double** %pdexpRes, align 8
  store i32 0, i32* %j, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %12 = load double** %pdRatePath_addr, align 8
  %13 = load i32* %j, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds double* %12, i64 %14
  %16 = load double* %15, align 1
  %17 = fsub double -0.000000e+00, %16
  %18 = load double* %ddelt, align 8
  %19 = fmul double %17, %18
  %20 = load double** %pdexpRes, align 8
  %21 = load i32* %j, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double* %20, i64 %22
  store double %19, double* %23, align 1
  %24 = load i32* %j, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %j, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %26 = load i32* %iN_addr, align 4
  %27 = sub i32 %26, 1
  %28 = load i32* %BLOCKSIZE_addr, align 4
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, 1
  %31 = load i32* %j, align 4
  %32 = icmp sge i32 %30, %31
  br i1 %32, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 0, i32* %j, align 4
  br label %bb4

bb3:                                              ; preds = %bb4
  %33 = load double** %pdexpRes, align 8
  %34 = load i32* %j, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double* %33, i64 %35
  %37 = load double* %36, align 1
  %38 = call double @llvm.exp.f64(double %37)
  %39 = load double** %pdexpRes, align 8
  %40 = load i32* %j, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double* %39, i64 %41
  store double %38, double* %42, align 1
  %43 = load i32* %j, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %j, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %bb2
  %45 = load i32* %iN_addr, align 4
  %46 = sub i32 %45, 1
  %47 = load i32* %BLOCKSIZE_addr, align 4
  %48 = mul i32 %46, %47
  %49 = sub i32 %48, 1
  %50 = load i32* %j, align 4
  %51 = icmp sge i32 %49, %50
  br i1 %51, label %bb3, label %bb5

bb5:                                              ; preds = %bb4
  store i32 0, i32* %i, align 4
  br label %bb7

bb6:                                              ; preds = %bb7
  %52 = load double** %pdDiscountFactors_addr, align 8
  %53 = load i32* %i, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double* %52, i64 %54
  store double 1.000000e+00, double* %55, align 1
  %56 = load i32* %i, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %i, align 4
  br label %bb7

bb7:                                              ; preds = %bb6, %bb5
  %58 = load i32* %iN_addr, align 4
  %59 = load i32* %BLOCKSIZE_addr, align 4
  %60 = mul i32 %58, %59
  %61 = load i32* %i, align 4
  %62 = icmp sgt i32 %60, %61
  br i1 %62, label %bb6, label %bb8

bb8:                                              ; preds = %bb7
  store i32 1, i32* %i, align 4
  br label %bb16

bb9:                                              ; preds = %bb16
  store i32 0, i32* %b, align 4
  br label %bb14

bb10:                                             ; preds = %bb14
  store i32 0, i32* %j, align 4
  br label %bb12

bb11:                                             ; preds = %bb12
  %63 = load i32* %i, align 4
  %64 = load i32* %BLOCKSIZE_addr, align 4
  %65 = mul i32 %63, %64
  %66 = load i32* %b, align 4
  %67 = add nsw i32 %65, %66
  %68 = load i32* %i, align 4
  %69 = load i32* %BLOCKSIZE_addr, align 4
  %70 = mul i32 %68, %69
  %71 = load i32* %b, align 4
  %72 = add nsw i32 %70, %71
  %73 = load double** %pdDiscountFactors_addr, align 8
  %74 = sext i32 %72 to i64
  %75 = getelementptr inbounds double* %73, i64 %74
  %76 = load double* %75, align 1
  %77 = load i32* %j, align 4
  %78 = load i32* %BLOCKSIZE_addr, align 4
  %79 = mul i32 %77, %78
  %80 = load i32* %b, align 4
  %81 = add nsw i32 %79, %80
  %82 = load double** %pdexpRes, align 8
  %83 = sext i32 %81 to i64
  %84 = getelementptr inbounds double* %82, i64 %83
  %85 = load double* %84, align 1
  %86 = fmul double %76, %85
  %87 = load double** %pdDiscountFactors_addr, align 8
  %88 = sext i32 %67 to i64
  %89 = getelementptr inbounds double* %87, i64 %88
  store double %86, double* %89, align 1
  %90 = load i32* %j, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %j, align 4
  br label %bb12

bb12:                                             ; preds = %bb11, %bb10
  %92 = load i32* %i, align 4
  %93 = sub i32 %92, 1
  %94 = load i32* %j, align 4
  %95 = icmp sge i32 %93, %94
  br i1 %95, label %bb11, label %bb13

bb13:                                             ; preds = %bb12
  %96 = load i32* %b, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %b, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %bb9
  %98 = load i32* %b, align 4
  %99 = load i32* %BLOCKSIZE_addr, align 4
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %bb10, label %bb15

bb15:                                             ; preds = %bb14
  %101 = load i32* %i, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %i, align 4
  br label %bb16

bb16:                                             ; preds = %bb15, %bb8
  %103 = load i32* %iN_addr, align 4
  %104 = sub i32 %103, 1
  %105 = load i32* %i, align 4
  %106 = icmp sge i32 %104, %105
  br i1 %106, label %bb9, label %bb17

bb17:                                             ; preds = %bb16
  %107 = load i32* %iN_addr, align 4
  %108 = sub i32 %107, 1
  %109 = load i32* %BLOCKSIZE_addr, align 4
  %110 = mul i32 %108, %109
  %111 = sub i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = load double** %pdexpRes, align 8
  call void @_Z12free_dvectorPdll(double* %113, i64 0, i64 %112) nounwind
  store i32 1, i32* %iSuccess, align 4
  %114 = load i32* %iSuccess, align 4
  store i32 %114, i32* %0, align 4
  %115 = load i32* %0, align 4
  store i32 %115, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb17
  %retval18 = load i32* %retval
  ret i32 %retval18
}

define i32 @_Z20Discount_Factors_optPdidS_(double* %pdDiscountFactors, i32 %iN, double %dYears, double* %pdRatePath) nounwind {
entry:
  %pdDiscountFactors_addr = alloca double*
  %iN_addr = alloca i32
  %dYears_addr = alloca double
  %pdRatePath_addr = alloca double*
  %retval = alloca i32
  %pdexpRes = alloca double*
  %ddelt = alloca double
  %iSuccess = alloca i32
  %j = alloca i32
  %i = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdDiscountFactors, double** %pdDiscountFactors_addr
  store i32 %iN, i32* %iN_addr
  store double %dYears, double* %dYears_addr
  store double* %pdRatePath, double** %pdRatePath_addr
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  %5 = load i32* %iN_addr, align 4
  %6 = sub i32 %5, 2
  %7 = sext i32 %6 to i64
  %8 = call double* @_Z7dvectorll(i64 0, i64 %7) nounwind
  store double* %8, double** %pdexpRes, align 8
  store i32 0, i32* %i, align 4
  br label %bb1

bb:                                               ; preds = %bb1
  %9 = load double** %pdDiscountFactors_addr, align 8
  %10 = load i32* %i, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double* %9, i64 %11
  store double 1.000000e+00, double* %12, align 1
  %13 = load i32* %i, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %i, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %15 = load i32* %iN_addr, align 4
  %16 = sub i32 %15, 1
  %17 = load i32* %i, align 4
  %18 = icmp sge i32 %16, %17
  br i1 %18, label %bb, label %bb2

bb2:                                              ; preds = %bb1
  store i32 0, i32* %j, align 4
  br label %bb4

bb3:                                              ; preds = %bb4
  %19 = load double** %pdRatePath_addr, align 8
  %20 = load i32* %j, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds double* %19, i64 %21
  %23 = load double* %22, align 1
  %24 = fsub double -0.000000e+00, %23
  %25 = load double* %ddelt, align 8
  %26 = fmul double %24, %25
  %27 = load double** %pdexpRes, align 8
  %28 = load i32* %j, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double* %27, i64 %29
  store double %26, double* %30, align 1
  %31 = load i32* %j, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %j, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %bb2
  %33 = load i32* %i, align 4
  %34 = sub i32 %33, 2
  %35 = load i32* %j, align 4
  %36 = icmp sge i32 %34, %35
  br i1 %36, label %bb3, label %bb5

bb5:                                              ; preds = %bb4
  store i32 0, i32* %j, align 4
  br label %bb7

bb6:                                              ; preds = %bb7
  %37 = load double** %pdexpRes, align 8
  %38 = load i32* %j, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double* %37, i64 %39
  %41 = load double* %40, align 1
  %42 = call double @llvm.exp.f64(double %41)
  %43 = load double** %pdexpRes, align 8
  %44 = load i32* %j, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double* %43, i64 %45
  store double %42, double* %46, align 1
  %47 = load i32* %j, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %j, align 4
  br label %bb7

bb7:                                              ; preds = %bb6, %bb5
  %49 = load i32* %i, align 4
  %50 = sub i32 %49, 2
  %51 = load i32* %j, align 4
  %52 = icmp sge i32 %50, %51
  br i1 %52, label %bb6, label %bb8

bb8:                                              ; preds = %bb7
  store i32 1, i32* %i, align 4
  br label %bb13

bb9:                                              ; preds = %bb13
  store i32 0, i32* %j, align 4
  br label %bb11

bb10:                                             ; preds = %bb11
  %53 = load double** %pdDiscountFactors_addr, align 8
  %54 = load i32* %i, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double* %53, i64 %55
  %57 = load double* %56, align 1
  %58 = load double** %pdexpRes, align 8
  %59 = load i32* %j, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds double* %58, i64 %60
  %62 = load double* %61, align 1
  %63 = fmul double %57, %62
  %64 = load double** %pdDiscountFactors_addr, align 8
  %65 = load i32* %i, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds double* %64, i64 %66
  store double %63, double* %67, align 1
  %68 = load i32* %j, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %j, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %bb9
  %70 = load i32* %i, align 4
  %71 = sub i32 %70, 1
  %72 = load i32* %j, align 4
  %73 = icmp sge i32 %71, %72
  br i1 %73, label %bb10, label %bb12

bb12:                                             ; preds = %bb11
  %74 = load i32* %i, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %i, align 4
  br label %bb13

bb13:                                             ; preds = %bb12, %bb8
  %76 = load i32* %iN_addr, align 4
  %77 = sub i32 %76, 1
  %78 = load i32* %i, align 4
  %79 = icmp sge i32 %77, %78
  br i1 %79, label %bb9, label %bb14

bb14:                                             ; preds = %bb13
  %80 = load i32* %iN_addr, align 4
  %81 = sub i32 %80, 2
  %82 = sext i32 %81 to i64
  %83 = load double** %pdexpRes, align 8
  call void @_Z12free_dvectorPdll(double* %83, i64 0, i64 %82) nounwind
  store i32 1, i32* %iSuccess, align 4
  %84 = load i32* %iSuccess, align 4
  store i32 %84, i32* %0, align 4
  %85 = load i32* %0, align 4
  store i32 %85, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb14
  %retval15 = load i32* %retval
  ret i32 %retval15
}

define i32 @_Z11HJM_FactorsPPdiiS_S0_(double** %ppdFactors, i32 %iN, i32 %iFactors, double* %pdVol, double** %ppdFacBreak) nounwind {
entry:
  %ppdFactors_addr = alloca double**
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %pdVol_addr = alloca double*
  %ppdFacBreak_addr = alloca double**
  %retval = alloca i32
  %iSuccess = alloca i32
  %j = alloca i32
  %i = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double* %pdVol, double** %pdVol_addr
  store double** %ppdFacBreak, double*** %ppdFacBreak_addr
  store i32 0, i32* %iSuccess, align 4
  store i32 0, i32* %i, align 4
  br label %bb4

bb:                                               ; preds = %bb4
  store i32 0, i32* %j, align 4
  br label %bb2

bb1:                                              ; preds = %bb2
  %1 = load double*** %ppdFactors_addr, align 8
  %2 = load i32* %i, align 4
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds double** %1, i64 %3
  %5 = load double** %4, align 1
  %6 = load double*** %ppdFacBreak_addr, align 8
  %7 = load i32* %i, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds double** %6, i64 %8
  %10 = load double** %9, align 1
  %11 = load i32* %j, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double* %10, i64 %12
  %14 = load double* %13, align 1
  %15 = load double** %pdVol_addr, align 8
  %16 = load i32* %j, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double* %15, i64 %17
  %19 = load double* %18, align 1
  %20 = fmul double %14, %19
  %21 = load double** %pdVol_addr, align 8
  %22 = load i32* %j, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds double* %21, i64 %23
  %25 = load double* %24, align 1
  %26 = fmul double %20, %25
  %27 = call double @llvm.sqrt.f64(double %26)
  %28 = load i32* %j, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double* %5, i64 %29
  store double %27, double* %30, align 1
  %31 = load i32* %j, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %j, align 4
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %33 = load i32* %iN_addr, align 4
  %34 = sub i32 %33, 2
  %35 = load i32* %j, align 4
  %36 = icmp sge i32 %34, %35
  br i1 %36, label %bb1, label %bb3

bb3:                                              ; preds = %bb2
  %37 = load i32* %i, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %i, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %entry
  %39 = load i32* %iFactors_addr, align 4
  %40 = sub i32 %39, 1
  %41 = load i32* %i, align 4
  %42 = icmp sge i32 %40, %41
  br i1 %42, label %bb, label %bb5

bb5:                                              ; preds = %bb4
  store i32 1, i32* %iSuccess, align 4
  %43 = load i32* %iSuccess, align 4
  store i32 %43, i32* %0, align 4
  %44 = load i32* %0, align 4
  store i32 %44, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb5
  %retval6 = load i32* %retval
  ret i32 %retval6
}

define i32 @_Z16HJM_CorrelationsPPdiiS0_(double** %ppdHJMCorr, i32 %iN, i32 %iFactors, double** %ppdFactors) nounwind {
entry:
  %ppdHJMCorr_addr = alloca double**
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %ppdFactors_addr = alloca double**
  %retval = alloca i32
  %ppdWeights = alloca double**
  %pdTotalVol = alloca double*
  %l = alloca i32
  %j = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %ppdHJMCorr, double*** %ppdHJMCorr_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load i32* %iN_addr, align 4
  %2 = sub i32 %1, 2
  %3 = sext i32 %2 to i64
  %4 = call double* @_Z7dvectorll(i64 0, i64 %3) nounwind
  store double* %4, double** %pdTotalVol, align 8
  %5 = load i32* %iN_addr, align 4
  %6 = sub i32 %5, 2
  %7 = sext i32 %6 to i64
  %8 = load i32* %iFactors_addr, align 4
  %9 = sub i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = call double** @_Z7dmatrixllll(i64 0, i64 %10, i64 0, i64 %7) nounwind
  store double** %11, double*** %ppdWeights, align 8
  store i32 0, i32* %i, align 4
  br label %bb4

bb:                                               ; preds = %bb4
  %12 = load double** %pdTotalVol, align 8
  %13 = load i32* %i, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds double* %12, i64 %14
  store double 0.000000e+00, double* %15, align 1
  store i32 0, i32* %j, align 4
  br label %bb2

bb1:                                              ; preds = %bb2
  %16 = load double** %pdTotalVol, align 8
  %17 = load i32* %i, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double* %16, i64 %18
  %20 = load double* %19, align 1
  %21 = load double*** %ppdFactors_addr, align 8
  %22 = load i32* %j, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds double** %21, i64 %23
  %25 = load double** %24, align 1
  %26 = load i32* %i, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double* %25, i64 %27
  %29 = load double* %28, align 1
  %30 = load double*** %ppdFactors_addr, align 8
  %31 = load i32* %j, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double** %30, i64 %32
  %34 = load double** %33, align 1
  %35 = load i32* %i, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds double* %34, i64 %36
  %38 = load double* %37, align 1
  %39 = fmul double %29, %38
  %40 = fadd double %20, %39
  %41 = load double** %pdTotalVol, align 8
  %42 = load i32* %i, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds double* %41, i64 %43
  store double %40, double* %44, align 1
  %45 = load i32* %j, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %j, align 4
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %47 = load i32* %iFactors_addr, align 4
  %48 = sub i32 %47, 1
  %49 = load i32* %j, align 4
  %50 = icmp sge i32 %48, %49
  br i1 %50, label %bb1, label %bb3

bb3:                                              ; preds = %bb2
  %51 = load double** %pdTotalVol, align 8
  %52 = load i32* %i, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds double* %51, i64 %53
  %55 = load double* %54, align 1
  %56 = call double @llvm.sqrt.f64(double %55)
  %57 = load double** %pdTotalVol, align 8
  %58 = load i32* %i, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds double* %57, i64 %59
  store double %56, double* %60, align 1
  %61 = load i32* %i, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %i, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %entry
  %63 = load i32* %iN_addr, align 4
  %64 = sub i32 %63, 2
  %65 = load i32* %i, align 4
  %66 = icmp sge i32 %64, %65
  br i1 %66, label %bb, label %bb5

bb5:                                              ; preds = %bb4
  store i32 0, i32* %i, align 4
  br label %bb10

bb6:                                              ; preds = %bb10
  store i32 0, i32* %j, align 4
  br label %bb8

bb7:                                              ; preds = %bb8
  %67 = load double*** %ppdWeights, align 8
  %68 = load i32* %j, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds double** %67, i64 %69
  %71 = load double** %70, align 1
  %72 = load double*** %ppdFactors_addr, align 8
  %73 = load i32* %j, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds double** %72, i64 %74
  %76 = load double** %75, align 1
  %77 = load i32* %i, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double* %76, i64 %78
  %80 = load double* %79, align 1
  %81 = load double** %pdTotalVol, align 8
  %82 = load i32* %i, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double* %81, i64 %83
  %85 = load double* %84, align 1
  %86 = fdiv double %80, %85
  %87 = load i32* %i, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds double* %71, i64 %88
  store double %86, double* %89, align 1
  %90 = load i32* %j, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %j, align 4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb6
  %92 = load i32* %iFactors_addr, align 4
  %93 = sub i32 %92, 1
  %94 = load i32* %j, align 4
  %95 = icmp sge i32 %93, %94
  br i1 %95, label %bb7, label %bb9

bb9:                                              ; preds = %bb8
  %96 = load i32* %i, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %i, align 4
  br label %bb10

bb10:                                             ; preds = %bb9, %bb5
  %98 = load i32* %iN_addr, align 4
  %99 = sub i32 %98, 2
  %100 = load i32* %i, align 4
  %101 = icmp sge i32 %99, %100
  br i1 %101, label %bb6, label %bb11

bb11:                                             ; preds = %bb10
  store i32 0, i32* %i, align 4
  br label %bb16

bb12:                                             ; preds = %bb16
  store i32 0, i32* %j, align 4
  br label %bb14

bb13:                                             ; preds = %bb14
  %102 = load double*** %ppdHJMCorr_addr, align 8
  %103 = load i32* %i, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds double** %102, i64 %104
  %106 = load double** %105, align 1
  %107 = load i32* %j, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds double* %106, i64 %108
  store double 0.000000e+00, double* %109, align 1
  %110 = load i32* %j, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %j, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %bb12
  %112 = load i32* %iN_addr, align 4
  %113 = sub i32 %112, 2
  %114 = load i32* %j, align 4
  %115 = icmp sge i32 %113, %114
  br i1 %115, label %bb13, label %bb15

bb15:                                             ; preds = %bb14
  %116 = load i32* %i, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %i, align 4
  br label %bb16

bb16:                                             ; preds = %bb15, %bb11
  %118 = load i32* %iN_addr, align 4
  %119 = sub i32 %118, 2
  %120 = load i32* %i, align 4
  %121 = icmp sge i32 %119, %120
  br i1 %121, label %bb12, label %bb17

bb17:                                             ; preds = %bb16
  store i32 0, i32* %i, align 4
  br label %bb25

bb18:                                             ; preds = %bb25
  %122 = load i32* %i, align 4
  store i32 %122, i32* %j, align 4
  br label %bb23

bb19:                                             ; preds = %bb23
  store i32 0, i32* %l, align 4
  br label %bb21

bb20:                                             ; preds = %bb21
  %123 = load double*** %ppdHJMCorr_addr, align 8
  %124 = load i32* %i, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds double** %123, i64 %125
  %127 = load double** %126, align 1
  %128 = load double*** %ppdHJMCorr_addr, align 8
  %129 = load i32* %i, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double** %128, i64 %130
  %132 = load double** %131, align 1
  %133 = load i32* %j, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double* %132, i64 %134
  %136 = load double* %135, align 1
  %137 = load double*** %ppdWeights, align 8
  %138 = load i32* %l, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds double** %137, i64 %139
  %141 = load double** %140, align 1
  %142 = load i32* %i, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds double* %141, i64 %143
  %145 = load double* %144, align 1
  %146 = load double*** %ppdWeights, align 8
  %147 = load i32* %l, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds double** %146, i64 %148
  %150 = load double** %149, align 1
  %151 = load i32* %j, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds double* %150, i64 %152
  %154 = load double* %153, align 1
  %155 = fmul double %145, %154
  %156 = fadd double %136, %155
  %157 = load i32* %j, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds double* %127, i64 %158
  store double %156, double* %159, align 1
  %160 = load i32* %l, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %l, align 4
  br label %bb21

bb21:                                             ; preds = %bb20, %bb19
  %162 = load i32* %iFactors_addr, align 4
  %163 = sub i32 %162, 1
  %164 = load i32* %l, align 4
  %165 = icmp sge i32 %163, %164
  br i1 %165, label %bb20, label %bb22

bb22:                                             ; preds = %bb21
  %166 = load i32* %j, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %j, align 4
  br label %bb23

bb23:                                             ; preds = %bb22, %bb18
  %168 = load i32* %iN_addr, align 4
  %169 = sub i32 %168, 2
  %170 = load i32* %j, align 4
  %171 = icmp sge i32 %169, %170
  br i1 %171, label %bb19, label %bb24

bb24:                                             ; preds = %bb23
  %172 = load i32* %i, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %i, align 4
  br label %bb25

bb25:                                             ; preds = %bb24, %bb17
  %174 = load i32* %iN_addr, align 4
  %175 = sub i32 %174, 2
  %176 = load i32* %i, align 4
  %177 = icmp sge i32 %175, %176
  br i1 %177, label %bb18, label %bb26

bb26:                                             ; preds = %bb25
  %178 = load i32* %iN_addr, align 4
  %179 = sub i32 %178, 2
  %180 = sext i32 %179 to i64
  %181 = load double** %pdTotalVol, align 8
  call void @_Z12free_dvectorPdll(double* %181, i64 0, i64 %180) nounwind
  %182 = load i32* %iN_addr, align 4
  %183 = sub i32 %182, 2
  %184 = sext i32 %183 to i64
  %185 = load i32* %iFactors_addr, align 4
  %186 = sub i32 %185, 1
  %187 = sext i32 %186 to i64
  %188 = load double*** %ppdWeights, align 8
  call void @_Z12free_dmatrixPPdllll(double** %188, i64 0, i64 %187, i64 0, i64 %184) nounwind
  store i32 1, i32* %iSuccess, align 4
  %189 = load i32* %iSuccess, align 4
  store i32 %189, i32* %0, align 4
  %190 = load i32* %0, align 4
  store i32 %190, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb26
  %retval27 = load i32* %retval
  ret i32 %retval27
}

define i32 @_Z19HJM_SimPath_ForwardPPdiidS_S_S0_Pl(double** %ppdHJMPath, i32 %iN, i32 %iFactors, double %dYears, double* %pdForward, double* %pdTotalDrift, double** %ppdFactors, i64* %lRndSeed) nounwind {
entry:
  %ppdHJMPath_addr = alloca double**
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %dYears_addr = alloca double
  %pdForward_addr = alloca double*
  %pdTotalDrift_addr = alloca double*
  %ppdFactors_addr = alloca double**
  %lRndSeed_addr = alloca i64*
  %retval = alloca i32
  %pdZ = alloca double*
  %dTotalShock = alloca double
  %ddelt = alloca double
  %l = alloca i32
  %j = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double** %ppdHJMPath, double*** %ppdHJMPath_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double %dYears, double* %dYears_addr
  store double* %pdForward, double** %pdForward_addr
  store double* %pdTotalDrift, double** %pdTotalDrift_addr
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i64* %lRndSeed, i64** %lRndSeed_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  %5 = load i32* %iFactors_addr, align 4
  %6 = sub i32 %5, 1
  %7 = sext i32 %6 to i64
  %8 = call double* @_Z7dvectorll(i64 0, i64 %7) nounwind
  store double* %8, double** %pdZ, align 8
  store i32 0, i32* %i, align 4
  br label %bb4

bb:                                               ; preds = %bb4
  store i32 0, i32* %j, align 4
  br label %bb2

bb1:                                              ; preds = %bb2
  %9 = load double*** %ppdHJMPath_addr, align 8
  %10 = load i32* %i, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double** %9, i64 %11
  %13 = load double** %12, align 1
  %14 = load i32* %j, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds double* %13, i64 %15
  store double 0.000000e+00, double* %16, align 1
  %17 = load i32* %j, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %j, align 4
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %19 = load i32* %iN_addr, align 4
  %20 = sub i32 %19, 1
  %21 = load i32* %j, align 4
  %22 = icmp sge i32 %20, %21
  br i1 %22, label %bb1, label %bb3

bb3:                                              ; preds = %bb2
  %23 = load i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %entry
  %25 = load i32* %iN_addr, align 4
  %26 = sub i32 %25, 1
  %27 = load i32* %i, align 4
  %28 = icmp sge i32 %26, %27
  br i1 %28, label %bb, label %bb5

bb5:                                              ; preds = %bb4
  store i32 0, i32* %i, align 4
  br label %bb7

bb6:                                              ; preds = %bb7
  %29 = load double*** %ppdHJMPath_addr, align 8
  %30 = getelementptr inbounds double** %29, i64 0
  %31 = load double** %30, align 1
  %32 = load double** %pdForward_addr, align 8
  %33 = load i32* %i, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds double* %32, i64 %34
  %36 = load double* %35, align 1
  %37 = load i32* %i, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds double* %31, i64 %38
  store double %36, double* %39, align 1
  %40 = load i32* %i, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %i, align 4
  br label %bb7

bb7:                                              ; preds = %bb6, %bb5
  %42 = load i32* %iN_addr, align 4
  %43 = sub i32 %42, 1
  %44 = load i32* %i, align 4
  %45 = icmp sge i32 %43, %44
  br i1 %45, label %bb6, label %bb8

bb8:                                              ; preds = %bb7
  store i32 1, i32* %j, align 4
  br label %bb19

bb9:                                              ; preds = %bb19
  store i32 0, i32* %l, align 4
  br label %bb11

bb10:                                             ; preds = %bb11
  %46 = load i64** %lRndSeed_addr, align 8
  %47 = call double @_Z7RanUnifPl(i64* %46) nounwind
  %48 = call double @_Z12CumNormalInvd(double %47) nounwind
  %49 = load double** %pdZ, align 8
  %50 = load i32* %l, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double* %49, i64 %51
  store double %48, double* %52, align 1
  %53 = load i32* %l, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %l, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %bb9
  %55 = load i32* %iFactors_addr, align 4
  %56 = sub i32 %55, 1
  %57 = load i32* %l, align 4
  %58 = icmp sge i32 %56, %57
  br i1 %58, label %bb10, label %bb12

bb12:                                             ; preds = %bb11
  store i32 0, i32* %l, align 4
  br label %bb17

bb13:                                             ; preds = %bb17
  store double 0.000000e+00, double* %dTotalShock, align 8
  store i32 0, i32* %i, align 4
  br label %bb15

bb14:                                             ; preds = %bb15
  %59 = load double*** %ppdFactors_addr, align 8
  %60 = load i32* %i, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double** %59, i64 %61
  %63 = load double** %62, align 1
  %64 = load i32* %l, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds double* %63, i64 %65
  %67 = load double* %66, align 1
  %68 = load double** %pdZ, align 8
  %69 = load i32* %i, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds double* %68, i64 %70
  %72 = load double* %71, align 1
  %73 = fmul double %67, %72
  %74 = load double* %dTotalShock, align 8
  %75 = fadd double %73, %74
  store double %75, double* %dTotalShock, align 8
  %76 = load i32* %i, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %i, align 4
  br label %bb15

bb15:                                             ; preds = %bb14, %bb13
  %78 = load i32* %iFactors_addr, align 4
  %79 = sub i32 %78, 1
  %80 = load i32* %i, align 4
  %81 = icmp sge i32 %79, %80
  br i1 %81, label %bb14, label %bb16

bb16:                                             ; preds = %bb15
  %82 = load double*** %ppdHJMPath_addr, align 8
  %83 = load i32* %j, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds double** %82, i64 %84
  %86 = load double** %85, align 1
  %87 = load i32* %j, align 4
  %88 = sub i32 %87, 1
  %89 = load double*** %ppdHJMPath_addr, align 8
  %90 = sext i32 %88 to i64
  %91 = getelementptr inbounds double** %89, i64 %90
  %92 = load double** %91, align 1
  %93 = load i32* %l, align 4
  %94 = add nsw i32 %93, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double* %92, i64 %95
  %97 = load double* %96, align 1
  %98 = load double** %pdTotalDrift_addr, align 8
  %99 = load i32* %l, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds double* %98, i64 %100
  %102 = load double* %101, align 1
  %103 = load double* %ddelt, align 8
  %104 = fmul double %102, %103
  %105 = fadd double %97, %104
  %106 = load double* %ddelt, align 8
  %107 = call double @llvm.sqrt.f64(double %106)
  %108 = load double* %dTotalShock, align 8
  %109 = fmul double %107, %108
  %110 = fadd double %105, %109
  %111 = load i32* %l, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds double* %86, i64 %112
  store double %110, double* %113, align 1
  %114 = load i32* %l, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %l, align 4
  br label %bb17

bb17:                                             ; preds = %bb16, %bb12
  %116 = load i32* %j, align 4
  %117 = add nsw i32 %116, 1
  %118 = load i32* %iN_addr, align 4
  %119 = sub i32 %118, %117
  %120 = load i32* %l, align 4
  %121 = icmp sge i32 %119, %120
  br i1 %121, label %bb13, label %bb18

bb18:                                             ; preds = %bb17
  %122 = load i32* %j, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %j, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %bb8
  %124 = load i32* %iN_addr, align 4
  %125 = sub i32 %124, 1
  %126 = load i32* %j, align 4
  %127 = icmp sge i32 %125, %126
  br i1 %127, label %bb9, label %bb20

bb20:                                             ; preds = %bb19
  %128 = load i32* %iFactors_addr, align 4
  %129 = sub i32 %128, 1
  %130 = sext i32 %129 to i64
  %131 = load double** %pdZ, align 8
  call void @_Z12free_dvectorPdll(double* %131, i64 0, i64 %130) nounwind
  store i32 1, i32* %iSuccess, align 4
  %132 = load i32* %iSuccess, align 4
  store i32 %132, i32* %0, align 4
  %133 = load i32* %0, align 4
  store i32 %133, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb20
  %retval21 = load i32* %retval
  ret i32 %retval21
}

define i32 @_Z21HJM_Swaption_BlockingPddddddiidS_PS_llii(double* %pdSwaptionPrice, double %dStrike, double %dCompounding, double %dMaturity, double %dTenor, double %dPaymentInterval, i32 %iN, i32 %iFactors, double %dYears, double* %pdYield, double** %ppdFactors, i64 %iRndSeed, i64 %lTrials, i32 %BLOCKSIZE, i32 %tid) nounwind {
entry:
  %pdSwaptionPrice_addr = alloca double*
  %dStrike_addr = alloca double
  %dCompounding_addr = alloca double
  %dMaturity_addr = alloca double
  %dTenor_addr = alloca double
  %dPaymentInterval_addr = alloca double
  %iN_addr = alloca i32
  %iFactors_addr = alloca i32
  %dYears_addr = alloca double
  %pdYield_addr = alloca double*
  %ppdFactors_addr = alloca double**
  %iRndSeed_addr = alloca i64
  %lTrials_addr = alloca i64
  %BLOCKSIZE_addr = alloca i32
  %tid_addr = alloca i32
  %retval = alloca i32
  %dSimSwaptionStdError = alloca double
  %dSimSwaptionMeanPrice = alloca double
  %dSumSquareSimSwaptionPrice = alloca double
  %dSumSimSwaptionPrice = alloca double
  %dFixedLegValue = alloca double
  %dDiscSwaptionPayoff = alloca double
  %dSwaptionPayoff = alloca double
  %dSwapVectorYears = alloca double
  %iSwapTimePoints = alloca i32
  %iSwapStartTimeIndex = alloca i32
  %pdSwapPayoffs = alloca double*
  %pdSwapDiscountFactors = alloca double*
  %pdSwapRatePath = alloca double*
  %pdPayoffDiscountFactors = alloca double*
  %pdDiscountingRatePath = alloca double*
  %pdTotalDrift = alloca double*
  %ppdDrifts = alloca double**
  %pdForward = alloca double*
  %ppdHJMPath = alloca double**
  %iSwapVectorLength = alloca i32
  %dStrikeCont = alloca double
  %iFreqRatio = alloca i32
  %ddelt = alloca double
  %l = alloca i64
  %b = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %0 = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store double* %pdSwaptionPrice, double** %pdSwaptionPrice_addr
  store double %dStrike, double* %dStrike_addr
  store double %dCompounding, double* %dCompounding_addr
  store double %dMaturity, double* %dMaturity_addr
  store double %dTenor, double* %dTenor_addr
  store double %dPaymentInterval, double* %dPaymentInterval_addr
  store i32 %iN, i32* %iN_addr
  store i32 %iFactors, i32* %iFactors_addr
  store double %dYears, double* %dYears_addr
  store double* %pdYield, double** %pdYield_addr
  store double** %ppdFactors, double*** %ppdFactors_addr
  store i64 %iRndSeed, i64* %iRndSeed_addr
  store i64 %lTrials, i64* %lTrials_addr
  store i32 %BLOCKSIZE, i32* %BLOCKSIZE_addr
  store i32 %tid, i32* %tid_addr
  store i32 0, i32* %iSuccess, align 4
  %1 = load i32* %iN_addr, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double* %dYears_addr, align 8
  %4 = fdiv double %3, %2
  store double %4, double* %ddelt, align 8
  %5 = load double* %dPaymentInterval_addr, align 8
  %6 = load double* %ddelt, align 8
  %7 = fdiv double %5, %6
  %8 = fadd double %7, 5.000000e-01
  %9 = fptosi double %8 to i32
  store i32 %9, i32* %iFreqRatio, align 4
  %10 = load double* %dCompounding_addr, align 8
  %11 = fcmp oeq double %10, 0.000000e+00
  br i1 %11, label %bb, label %bb1

bb:                                               ; preds = %entry
  %12 = load double* %dStrike_addr, align 8
  store double %12, double* %dStrikeCont, align 8
  br label %bb2

bb1:                                              ; preds = %entry
  %13 = load double* %dCompounding_addr, align 8
  %14 = fdiv double 1.000000e+00, %13
  %15 = load double* %dStrike_addr, align 8
  %16 = load double* %dCompounding_addr, align 8
  %17 = fmul double %15, %16
  %18 = fadd double %17, 1.000000e+00
  %19 = call double @llvm.log.f64(double %18)
  %20 = fmul double %14, %19
  store double %20, double* %dStrikeCont, align 8
  br label %bb2

bb2:                                              ; preds = %bb1, %bb
  %21 = load i32* %iN_addr, align 4
  %22 = load i32* %BLOCKSIZE_addr, align 4
  %23 = mul i32 %21, %22
  %24 = sub i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = load i32* %iN_addr, align 4
  %27 = sub i32 %26, 1
  %28 = sext i32 %27 to i64
  %29 = call double** @_Z7dmatrixllll(i64 0, i64 %28, i64 0, i64 %25) nounwind
  store double** %29, double*** %ppdHJMPath, align 8
  %30 = load i32* %iN_addr, align 4
  %31 = sub i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = call double* @_Z7dvectorll(i64 0, i64 %32) nounwind
  store double* %33, double** %pdForward, align 8
  %34 = load i32* %iN_addr, align 4
  %35 = sub i32 %34, 2
  %36 = sext i32 %35 to i64
  %37 = load i32* %iFactors_addr, align 4
  %38 = sub i32 %37, 1
  %39 = sext i32 %38 to i64
  %40 = call double** @_Z7dmatrixllll(i64 0, i64 %39, i64 0, i64 %36) nounwind
  store double** %40, double*** %ppdDrifts, align 8
  %41 = load i32* %iN_addr, align 4
  %42 = sub i32 %41, 2
  %43 = sext i32 %42 to i64
  %44 = call double* @_Z7dvectorll(i64 0, i64 %43) nounwind
  store double* %44, double** %pdTotalDrift, align 8
  %45 = load i32* %iN_addr, align 4
  %46 = load i32* %BLOCKSIZE_addr, align 4
  %47 = mul i32 %45, %46
  %48 = sub i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = call double* @_Z7dvectorll(i64 0, i64 %49) nounwind
  store double* %50, double** %pdPayoffDiscountFactors, align 8
  %51 = load i32* %iN_addr, align 4
  %52 = load i32* %BLOCKSIZE_addr, align 4
  %53 = mul i32 %51, %52
  %54 = sub i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = call double* @_Z7dvectorll(i64 0, i64 %55) nounwind
  store double* %56, double** %pdDiscountingRatePath, align 8
  %57 = load i32* %iN_addr, align 4
  %58 = sitofp i32 %57 to double
  %59 = load double* %dMaturity_addr, align 8
  %60 = load double* %ddelt, align 8
  %61 = fdiv double %59, %60
  %62 = fsub double %58, %61
  %63 = fadd double %62, 5.000000e-01
  %64 = fptosi double %63 to i32
  store i32 %64, i32* %iSwapVectorLength, align 4
  %65 = load i32* %iSwapVectorLength, align 4
  %66 = load i32* %BLOCKSIZE_addr, align 4
  %67 = mul i32 %65, %66
  %68 = sub i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = call double* @_Z7dvectorll(i64 0, i64 %69) nounwind
  store double* %70, double** %pdSwapRatePath, align 8
  %71 = load i32* %iSwapVectorLength, align 4
  %72 = load i32* %BLOCKSIZE_addr, align 4
  %73 = mul i32 %71, %72
  %74 = sub i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = call double* @_Z7dvectorll(i64 0, i64 %75) nounwind
  store double* %76, double** %pdSwapDiscountFactors, align 8
  %77 = load i32* %iSwapVectorLength, align 4
  %78 = sub i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = call double* @_Z7dvectorll(i64 0, i64 %79) nounwind
  store double* %80, double** %pdSwapPayoffs, align 8
  %81 = load double* %dMaturity_addr, align 8
  %82 = load double* %ddelt, align 8
  %83 = fdiv double %81, %82
  %84 = fadd double %83, 5.000000e-01
  %85 = fptosi double %84 to i32
  store i32 %85, i32* %iSwapStartTimeIndex, align 4
  %86 = load double* %dTenor_addr, align 8
  %87 = load double* %ddelt, align 8
  %88 = fdiv double %86, %87
  %89 = fadd double %88, 5.000000e-01
  %90 = fptosi double %89 to i32
  store i32 %90, i32* %iSwapTimePoints, align 4
  %91 = load i32* %iSwapVectorLength, align 4
  %92 = sitofp i32 %91 to double
  %93 = load double* %ddelt, align 8
  %94 = fmul double %92, %93
  store double %94, double* %dSwapVectorYears, align 8
  store i32 0, i32* %i, align 4
  br label %bb4

bb3:                                              ; preds = %bb4
  %95 = load double** %pdSwapPayoffs, align 8
  %96 = load i32* %i, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds double* %95, i64 %97
  store double 0.000000e+00, double* %98, align 1
  %99 = load i32* %i, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %i, align 4
  br label %bb4

bb4:                                              ; preds = %bb3, %bb2
  %101 = load i32* %iSwapVectorLength, align 4
  %102 = sub i32 %101, 1
  %103 = load i32* %i, align 4
  %104 = icmp sge i32 %102, %103
  br i1 %104, label %bb3, label %bb5

bb5:                                              ; preds = %bb4
  %105 = load i32* %iFreqRatio, align 4
  store i32 %105, i32* %i, align 4
  br label %bb11

bb6:                                              ; preds = %bb11
  %106 = load i32* %i, align 4
  %107 = load i32* %iSwapTimePoints, align 4
  %108 = icmp ne i32 %106, %107
  br i1 %108, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %109 = load double* %dStrikeCont, align 8
  %110 = load double* %dPaymentInterval_addr, align 8
  %111 = fmul double %109, %110
  %112 = call double @llvm.exp.f64(double %111)
  %113 = fsub double %112, 1.000000e+00
  %114 = load double** %pdSwapPayoffs, align 8
  %115 = load i32* %i, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds double* %114, i64 %116
  store double %113, double* %117, align 1
  br label %bb8

bb8:                                              ; preds = %bb7, %bb6
  %118 = load i32* %i, align 4
  %119 = load i32* %iSwapTimePoints, align 4
  %120 = icmp eq i32 %118, %119
  br i1 %120, label %bb9, label %bb10

bb9:                                              ; preds = %bb8
  %121 = load double* %dStrikeCont, align 8
  %122 = load double* %dPaymentInterval_addr, align 8
  %123 = fmul double %121, %122
  %124 = call double @llvm.exp.f64(double %123)
  %125 = load double** %pdSwapPayoffs, align 8
  %126 = load i32* %i, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds double* %125, i64 %127
  store double %124, double* %128, align 1
  br label %bb10

bb10:                                             ; preds = %bb9, %bb8
  %129 = load i32* %i, align 4
  %130 = load i32* %iFreqRatio, align 4
  %131 = add nsw i32 %129, %130
  store i32 %131, i32* %i, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %bb5
  %132 = load i32* %i, align 4
  %133 = load i32* %iSwapTimePoints, align 4
  %134 = icmp sle i32 %132, %133
  br i1 %134, label %bb6, label %bb12

bb12:                                             ; preds = %bb11
  %135 = load double** %pdForward, align 8
  %136 = load i32* %iN_addr, align 4
  %137 = load double** %pdYield_addr, align 8
  %138 = call i32 @_Z20HJM_Yield_to_ForwardPdiS_(double* %135, i32 %136, double* %137) nounwind
  store i32 %138, i32* %iSuccess, align 4
  %139 = load i32* %iSuccess, align 4
  %140 = icmp ne i32 %139, 1
  br i1 %140, label %bb13, label %bb14

bb13:                                             ; preds = %bb12
  %141 = load i32* %iSuccess, align 4
  store i32 %141, i32* %0, align 4
  br label %bb44

bb14:                                             ; preds = %bb12
  %142 = load double** %pdTotalDrift, align 8
  %143 = load double*** %ppdDrifts, align 8
  %144 = load i32* %iN_addr, align 4
  %145 = load i32* %iFactors_addr, align 4
  %146 = load double* %dYears_addr, align 8
  %147 = load double*** %ppdFactors_addr, align 8
  %148 = call i32 @_Z10HJM_DriftsPdPS_iidS0_(double* %142, double** %143, i32 %144, i32 %145, double %146, double** %147) nounwind
  store i32 %148, i32* %iSuccess, align 4
  %149 = load i32* %iSuccess, align 4
  %150 = icmp ne i32 %149, 1
  br i1 %150, label %bb15, label %bb16

bb15:                                             ; preds = %bb14
  %151 = load i32* %iSuccess, align 4
  store i32 %151, i32* %0, align 4
  br label %bb44

bb16:                                             ; preds = %bb14
  store double 0.000000e+00, double* %dSumSimSwaptionPrice, align 8
  store double 0.000000e+00, double* %dSumSquareSimSwaptionPrice, align 8
  store i64 0, i64* %l, align 8
  br label %bb42

bb17:                                             ; preds = %bb42
  %152 = load double*** %ppdHJMPath, align 8
  %153 = load i32* %iN_addr, align 4
  %154 = load i32* %iFactors_addr, align 4
  %155 = load double* %dYears_addr, align 8
  %156 = load double** %pdForward, align 8
  %157 = load double** %pdTotalDrift, align 8
  %158 = load double*** %ppdFactors_addr, align 8
  %159 = load i32* %BLOCKSIZE_addr, align 4
  %160 = call i32 @_Z28HJM_SimPath_Forward_BlockingPPdiidS_S_S0_Pli(double** %152, i32 %153, i32 %154, double %155, double* %156, double* %157, double** %158, i64* %iRndSeed_addr, i32 %159) nounwind
  store i32 %160, i32* %iSuccess, align 4
  %161 = load i32* %iSuccess, align 4
  %162 = icmp ne i32 %161, 1
  br i1 %162, label %bb18, label %bb19

bb18:                                             ; preds = %bb17
  %163 = load i32* %iSuccess, align 4
  store i32 %163, i32* %0, align 4
  br label %bb44

bb19:                                             ; preds = %bb17
  store i32 0, i32* %i, align 4
  br label %bb24

bb20:                                             ; preds = %bb24
  store i32 0, i32* %b, align 4
  br label %bb22

bb21:                                             ; preds = %bb22
  %164 = load i32* %BLOCKSIZE_addr, align 4
  %165 = load i32* %i, align 4
  %166 = mul i32 %164, %165
  %167 = load i32* %b, align 4
  %168 = add nsw i32 %166, %167
  %169 = load double*** %ppdHJMPath, align 8
  %170 = load i32* %i, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds double** %169, i64 %171
  %173 = load double** %172, align 1
  %174 = load i32* %b, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds double* %173, i64 %175
  %177 = load double* %176, align 1
  %178 = load double** %pdDiscountingRatePath, align 8
  %179 = sext i32 %168 to i64
  %180 = getelementptr inbounds double* %178, i64 %179
  store double %177, double* %180, align 1
  %181 = load i32* %b, align 4
  %182 = add nsw i32 %181, 1
  store i32 %182, i32* %b, align 4
  br label %bb22

bb22:                                             ; preds = %bb21, %bb20
  %183 = load i32* %BLOCKSIZE_addr, align 4
  %184 = sub i32 %183, 1
  %185 = load i32* %b, align 4
  %186 = icmp sge i32 %184, %185
  br i1 %186, label %bb21, label %bb23

bb23:                                             ; preds = %bb22
  %187 = load i32* %i, align 4
  %188 = add nsw i32 %187, 1
  store i32 %188, i32* %i, align 4
  br label %bb24

bb24:                                             ; preds = %bb23, %bb19
  %189 = load i32* %iN_addr, align 4
  %190 = sub i32 %189, 1
  %191 = load i32* %i, align 4
  %192 = icmp sge i32 %190, %191
  br i1 %192, label %bb20, label %bb25

bb25:                                             ; preds = %bb24
  %193 = load double** %pdPayoffDiscountFactors, align 8
  %194 = load i32* %iN_addr, align 4
  %195 = load double* %dYears_addr, align 8
  %196 = load double** %pdDiscountingRatePath, align 8
  %197 = load i32* %BLOCKSIZE_addr, align 4
  %198 = call i32 @_Z25Discount_Factors_BlockingPdidS_i(double* %193, i32 %194, double %195, double* %196, i32 %197) nounwind
  store i32 %198, i32* %iSuccess, align 4
  %199 = load i32* %iSuccess, align 4
  %200 = icmp ne i32 %199, 1
  br i1 %200, label %bb26, label %bb27

bb26:                                             ; preds = %bb25
  %201 = load i32* %iSuccess, align 4
  store i32 %201, i32* %0, align 4
  br label %bb44

bb27:                                             ; preds = %bb25
  store i32 0, i32* %i, align 4
  br label %bb32

bb28:                                             ; preds = %bb32
  store i32 0, i32* %b, align 4
  br label %bb30

bb29:                                             ; preds = %bb30
  %202 = load i32* %i, align 4
  %203 = load i32* %BLOCKSIZE_addr, align 4
  %204 = mul i32 %202, %203
  %205 = load i32* %b, align 4
  %206 = add nsw i32 %204, %205
  %207 = load double*** %ppdHJMPath, align 8
  %208 = load i32* %iSwapStartTimeIndex, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds double** %207, i64 %209
  %211 = load double** %210, align 1
  %212 = load i32* %i, align 4
  %213 = load i32* %BLOCKSIZE_addr, align 4
  %214 = mul i32 %212, %213
  %215 = load i32* %b, align 4
  %216 = add nsw i32 %214, %215
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds double* %211, i64 %217
  %219 = load double* %218, align 1
  %220 = load double** %pdSwapRatePath, align 8
  %221 = sext i32 %206 to i64
  %222 = getelementptr inbounds double* %220, i64 %221
  store double %219, double* %222, align 1
  %223 = load i32* %b, align 4
  %224 = add nsw i32 %223, 1
  store i32 %224, i32* %b, align 4
  br label %bb30

bb30:                                             ; preds = %bb29, %bb28
  %225 = load i32* %b, align 4
  %226 = load i32* %BLOCKSIZE_addr, align 4
  %227 = icmp slt i32 %225, %226
  br i1 %227, label %bb29, label %bb31

bb31:                                             ; preds = %bb30
  %228 = load i32* %i, align 4
  %229 = add nsw i32 %228, 1
  store i32 %229, i32* %i, align 4
  br label %bb32

bb32:                                             ; preds = %bb31, %bb27
  %230 = load i32* %iSwapVectorLength, align 4
  %231 = sub i32 %230, 1
  %232 = load i32* %i, align 4
  %233 = icmp sge i32 %231, %232
  br i1 %233, label %bb28, label %bb33

bb33:                                             ; preds = %bb32
  %234 = load double** %pdSwapDiscountFactors, align 8
  %235 = load i32* %iSwapVectorLength, align 4
  %236 = load double* %dSwapVectorYears, align 8
  %237 = load double** %pdSwapRatePath, align 8
  %238 = load i32* %BLOCKSIZE_addr, align 4
  %239 = call i32 @_Z25Discount_Factors_BlockingPdidS_i(double* %234, i32 %235, double %236, double* %237, i32 %238) nounwind
  store i32 %239, i32* %iSuccess, align 4
  %240 = load i32* %iSuccess, align 4
  %241 = icmp ne i32 %240, 1
  br i1 %241, label %bb34, label %bb35

bb34:                                             ; preds = %bb33
  %242 = load i32* %iSuccess, align 4
  store i32 %242, i32* %0, align 4
  br label %bb44

bb35:                                             ; preds = %bb33
  store i32 0, i32* %b, align 4
  br label %bb40

bb36:                                             ; preds = %bb40
  store double 0.000000e+00, double* %dFixedLegValue, align 8
  store i32 0, i32* %i, align 4
  br label %bb38

bb37:                                             ; preds = %bb38
  %243 = load double** %pdSwapPayoffs, align 8
  %244 = load i32* %i, align 4
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds double* %243, i64 %245
  %247 = load double* %246, align 1
  %248 = load i32* %i, align 4
  %249 = load i32* %BLOCKSIZE_addr, align 4
  %250 = mul i32 %248, %249
  %251 = load i32* %b, align 4
  %252 = add nsw i32 %250, %251
  %253 = load double** %pdSwapDiscountFactors, align 8
  %254 = sext i32 %252 to i64
  %255 = getelementptr inbounds double* %253, i64 %254
  %256 = load double* %255, align 1
  %257 = fmul double %247, %256
  %258 = load double* %dFixedLegValue, align 8
  %259 = fadd double %257, %258
  store double %259, double* %dFixedLegValue, align 8
  %260 = load i32* %i, align 4
  %261 = add nsw i32 %260, 1
  store i32 %261, i32* %i, align 4
  br label %bb38

bb38:                                             ; preds = %bb37, %bb36
  %262 = load i32* %iSwapVectorLength, align 4
  %263 = sub i32 %262, 1
  %264 = load i32* %i, align 4
  %265 = icmp sge i32 %263, %264
  br i1 %265, label %bb37, label %bb39

bb39:                                             ; preds = %bb38
  %266 = load double* %dFixedLegValue, align 8
  %267 = fsub double %266, 1.000000e+00
  %268 = call double @_Z4dMaxdd(double %267, double 0.000000e+00) nounwind
  store double %268, double* %dSwaptionPayoff, align 8
  %269 = load i32* %iSwapStartTimeIndex, align 4
  %270 = load i32* %BLOCKSIZE_addr, align 4
  %271 = mul i32 %269, %270
  %272 = load i32* %b, align 4
  %273 = add nsw i32 %271, %272
  %274 = load double** %pdPayoffDiscountFactors, align 8
  %275 = sext i32 %273 to i64
  %276 = getelementptr inbounds double* %274, i64 %275
  %277 = load double* %276, align 1
  %278 = load double* %dSwaptionPayoff, align 8
  %279 = fmul double %277, %278
  store double %279, double* %dDiscSwaptionPayoff, align 8
  %280 = load double* %dSumSimSwaptionPrice, align 8
  %281 = load double* %dDiscSwaptionPayoff, align 8
  %282 = fadd double %280, %281
  store double %282, double* %dSumSimSwaptionPrice, align 8
  %283 = load double* %dDiscSwaptionPayoff, align 8
  %284 = load double* %dDiscSwaptionPayoff, align 8
  %285 = fmul double %283, %284
  %286 = load double* %dSumSquareSimSwaptionPrice, align 8
  %287 = fadd double %285, %286
  store double %287, double* %dSumSquareSimSwaptionPrice, align 8
  %288 = load i32* %b, align 4
  %289 = add nsw i32 %288, 1
  store i32 %289, i32* %b, align 4
  br label %bb40

bb40:                                             ; preds = %bb39, %bb35
  %290 = load i32* %b, align 4
  %291 = load i32* %BLOCKSIZE_addr, align 4
  %292 = icmp slt i32 %290, %291
  br i1 %292, label %bb36, label %bb41

bb41:                                             ; preds = %bb40
  %293 = load i32* %BLOCKSIZE_addr, align 4
  %294 = sext i32 %293 to i64
  %295 = load i64* %l, align 8
  %296 = add nsw i64 %294, %295
  store i64 %296, i64* %l, align 8
  br label %bb42

bb42:                                             ; preds = %bb41, %bb16
  %297 = load i64* %lTrials_addr, align 8
  %298 = sub i64 %297, 1
  %299 = load i64* %l, align 8
  %300 = icmp sge i64 %298, %299
  br i1 %300, label %bb17, label %bb43

bb43:                                             ; preds = %bb42
  %301 = load i64* %lTrials_addr, align 8
  %302 = sitofp i64 %301 to double
  %303 = load double* %dSumSimSwaptionPrice, align 8
  %304 = fdiv double %303, %302
  store double %304, double* %dSimSwaptionMeanPrice, align 8
  %305 = load double* %dSumSimSwaptionPrice, align 8
  %306 = load double* %dSumSimSwaptionPrice, align 8
  %307 = fmul double %305, %306
  %308 = load i64* %lTrials_addr, align 8
  %309 = sitofp i64 %308 to double
  %310 = fdiv double %307, %309
  %311 = load double* %dSumSquareSimSwaptionPrice, align 8
  %312 = fsub double %311, %310
  %313 = load i64* %lTrials_addr, align 8
  %314 = sitofp i64 %313 to double
  %315 = fsub double %314, 1.000000e+00
  %316 = fdiv double %312, %315
  %317 = call double @llvm.sqrt.f64(double %316)
  %318 = load i64* %lTrials_addr, align 8
  %319 = sitofp i64 %318 to double
  %320 = call double @llvm.sqrt.f64(double %319)
  %321 = fdiv double %317, %320
  store double %321, double* %dSimSwaptionStdError, align 8
  %322 = load double** %pdSwaptionPrice_addr, align 8
  %323 = getelementptr inbounds double* %322, i64 0
  %324 = load double* %dSimSwaptionMeanPrice, align 8
  store double %324, double* %323, align 1
  %325 = load double** %pdSwaptionPrice_addr, align 8
  %326 = getelementptr inbounds double* %325, i64 1
  %327 = load double* %dSimSwaptionStdError, align 8
  store double %327, double* %326, align 1
  store i32 1, i32* %iSuccess, align 4
  %328 = load i32* %iSuccess, align 4
  store i32 %328, i32* %0, align 4
  br label %bb44

bb44:                                             ; preds = %bb43, %bb34, %bb26, %bb18, %bb15, %bb13
  %329 = load i32* %0, align 4
  store i32 %329, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb44
  %retval45 = load i32* %retval
  ret i32 %retval45
}

define internal void @_GLOBAL__I_NUM_TRIALS() nounwind {
entry:
  call void @_Z41__static_initialization_and_destruction_0ii(i32 1, i32 65535) nounwind
  br label %return

return:                                           ; preds = %entry
  ret void
}

define internal void @_Z41__static_initialization_and_destruction_0ii(i32 %__initialize_p, i32 %__priority) nounwind {
entry:
  %__initialize_p_addr = alloca i32
  %__priority_addr = alloca i32
  %"alloca point" = bitcast i32 0 to i32
  store i32 %__initialize_p, i32* %__initialize_p_addr
  store i32 %__priority, i32* %__priority_addr
  %0 = load i32* %__initialize_p_addr, align 4
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %bb, label %bb2

bb:                                               ; preds = %entry
  %2 = load i32* %__priority_addr, align 4
  %3 = icmp eq i32 %2, 65535
  br i1 %3, label %bb1, label %bb2

bb1:                                              ; preds = %bb
  call void @_ZNSt8ios_base4InitC1Ev(%"struct.std::ios_base::Init"* @_ZStL8__ioinit) nounwind
  %4 = call i32 @__cxa_atexit(void (i8*)* @__tcf_0, i8* null, i8* bitcast (i8** @__dso_handle to i8*)) nounwind
  br label %bb2

bb2:                                              ; preds = %bb1, %bb, %entry
  br label %return

return:                                           ; preds = %bb2
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"struct.std::ios_base::Init"*)

declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) nounwind

define internal void @__tcf_0(i8* %unnamed_arg) nounwind {
entry:
  %unnamed_arg_addr = alloca i8*
  %"alloca point" = bitcast i32 0 to i32
  store i8* %unnamed_arg, i8** %unnamed_arg_addr
  call void @_ZNSt8ios_base4InitD1Ev(%"struct.std::ios_base::Init"* @_ZStL8__ioinit) nounwind
  br label %return

return:                                           ; preds = %entry
  ret void
}

declare void @_ZNSt8ios_base4InitD1Ev(%"struct.std::ios_base::Init"*)

define i32 @main(i32 %argc, i8** %argv) nounwind {
entry:
  %argc_addr = alloca i32
  %argv_addr = alloca i8**
  %retval = alloca i32
  %j = alloca i32
  %k = alloca i32
  %pthread_custom_attr = alloca %struct.pthread_attr_t
  %threads = alloca i64*
  %factors = alloca double**
  %j1 = alloca i32
  %i = alloca i32
  %iSuccess = alloca i32
  %saved_stack.163 = alloca i8*
  %0 = alloca i32
  %threadIDs.147 = alloca [0 x i32]*
  %1 = alloca i64
  %"alloca point" = bitcast i32 0 to i32
  store i32 %argc, i32* %argc_addr
  store i8** %argv, i8*** %argv_addr
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack.163, align 8
  store i32 0, i32* %iSuccess, align 4
  store double** null, double*** %factors, align 8
  %3 = call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @.str9, i64 0, i64 0)) nounwind
  %4 = call i32 @fflush(%struct.FILE* null) nounwind
  %5 = load i32* %argc_addr, align 4
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %bb, label %bb2

bb:                                               ; preds = %entry
  %7 = load %struct.FILE** @stderr, align 8
  %8 = call i64 @fwrite(i8* getelementptr inbounds ([122 x i8]* @.str110, i64 0, i64 0), i64 1, i64 121, %struct.FILE* %7) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb2:                                              ; preds = %entry
  store i32 1, i32* %j, align 4
  br label %bb11

bb3:                                              ; preds = %bb11
  %9 = load i8*** %argv_addr, align 8
  %10 = load i32* %j, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8** %9, i64 %11
  %13 = load i8** %12, align 1
  %14 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8]* @.str211, i64 0, i64 0), i8* %13) nounwind readonly
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %bb4, label %bb5

bb4:                                              ; preds = %bb3
  %16 = load i32* %j, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %j, align 4
  %18 = load i8*** %argv_addr, align 8
  %19 = load i32* %j, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8** %18, i64 %20
  %22 = load i8** %21, align 1
  %23 = call i32 @atoi(i8* %22) nounwind readonly
  store i32 %23, i32* @NUM_TRIALS, align 4
  br label %bb10

bb5:                                              ; preds = %bb3
  %24 = load i8*** %argv_addr, align 8
  %25 = load i32* %j, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8** %24, i64 %26
  %28 = load i8** %27, align 1
  %29 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8]* @.str312, i64 0, i64 0), i8* %28) nounwind readonly
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %31 = load i32* %j, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %j, align 4
  %33 = load i8*** %argv_addr, align 8
  %34 = load i32* %j, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8** %33, i64 %35
  %37 = load i8** %36, align 1
  %38 = call i32 @atoi(i8* %37) nounwind readonly
  store i32 %38, i32* @nThreads, align 4
  br label %bb10

bb7:                                              ; preds = %bb5
  %39 = load i8*** %argv_addr, align 8
  %40 = load i32* %j, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8** %39, i64 %41
  %43 = load i8** %42, align 1
  %44 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8]* @.str413, i64 0, i64 0), i8* %43) nounwind readonly
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %46 = load i32* %j, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %j, align 4
  %48 = load i8*** %argv_addr, align 8
  %49 = load i32* %j, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8** %48, i64 %50
  %52 = load i8** %51, align 1
  %53 = call i32 @atoi(i8* %52) nounwind readonly
  store i32 %53, i32* @nSwaptions, align 4
  br label %bb10

bb9:                                              ; preds = %bb7
  %54 = load %struct.FILE** @stderr, align 8
  %55 = call i64 @fwrite(i8* getelementptr inbounds ([122 x i8]* @.str110, i64 0, i64 0), i64 1, i64 121, %struct.FILE* %54) nounwind
  br label %bb10

bb10:                                             ; preds = %bb9, %bb8, %bb6, %bb4
  %56 = load i32* %j, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %j, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %bb2
  %58 = load i32* %j, align 4
  %59 = load i32* %argc_addr, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %bb3, label %bb12

bb12:                                             ; preds = %bb11
  %61 = load i32* @nSwaptions, align 4
  %62 = load i32* @nThreads, align 4
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %bb13, label %bb14

bb13:                                             ; preds = %bb12
  %64 = load i32* @nThreads, align 4
  store i32 %64, i32* @nSwaptions, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %bb12
  %65 = load i32* @nSwaptions, align 4
  %66 = load i32* @nThreads, align 4
  %67 = load i32* @NUM_TRIALS, align 4
  %68 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([75 x i8]* @.str514, i64 0, i64 0), i32 %67, i32 %66, i32 %65) nounwind
  %69 = load i32* @nThreads, align 4
  %70 = icmp sle i32 %69, 0
  br i1 %70, label %bb16, label %bb15

bb15:                                             ; preds = %bb14
  %71 = load i32* @nThreads, align 4
  %72 = icmp sgt i32 %71, 1024
  br i1 %72, label %bb16, label %bb17

bb16:                                             ; preds = %bb15, %bb14
  %73 = load %struct.FILE** @stderr, align 8
  %74 = call i32 (%struct.FILE*, i8*, ...)* @fprintf(%struct.FILE* noalias %73, i8* noalias getelementptr inbounds ([45 x i8]* @.str615, i64 0, i64 0), i32 1024) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb17:                                             ; preds = %bb15
  %75 = load i32* @nThreads, align 4
  %76 = sext i32 %75 to i64
  %77 = mul i64 %76, 8
  %78 = call noalias i8* @malloc(i64 %77) nounwind
  %79 = bitcast i8* %78 to i64*
  store i64* %79, i64** %threads, align 8
  %80 = call i32 @pthread_attr_init(%struct.pthread_attr_t* %pthread_custom_attr) nounwind
  %81 = load i32* @nThreads, align 4
  %82 = icmp sle i32 %81, 0
  br i1 %82, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  %83 = load i32* @nThreads, align 4
  %84 = icmp sgt i32 %83, 1024
  br i1 %84, label %bb19, label %bb20

bb19:                                             ; preds = %bb18, %bb17
  %85 = load %struct.FILE** @stderr, align 8
  %86 = call i32 (%struct.FILE*, i8*, ...)* @fprintf(%struct.FILE* noalias %85, i8* noalias getelementptr inbounds ([45 x i8]* @.str615, i64 0, i64 0), i32 1024) nounwind
  call void @exit(i32 1) noreturn nounwind
  unreachable

bb20:                                             ; preds = %bb18
  %87 = load i32* @iN, align 4
  %88 = sub i32 %87, 2
  %89 = sext i32 %88 to i64
  %90 = load i32* @iFactors, align 4
  %91 = sub i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = call double** @_Z7dmatrixllll(i64 0, i64 %92, i64 0, i64 %89) nounwind
  store double** %93, double*** %factors, align 8
  %94 = load double*** %factors, align 8
  %95 = getelementptr inbounds double** %94, i64 0
  %96 = load double** %95, align 1
  %97 = getelementptr inbounds double* %96, i64 0
  store double 1.000000e-02, double* %97, align 1
  %98 = load double*** %factors, align 8
  %99 = getelementptr inbounds double** %98, i64 0
  %100 = load double** %99, align 1
  %101 = getelementptr inbounds double* %100, i64 1
  store double 1.000000e-02, double* %101, align 1
  %102 = load double*** %factors, align 8
  %103 = getelementptr inbounds double** %102, i64 0
  %104 = load double** %103, align 1
  %105 = getelementptr inbounds double* %104, i64 2
  store double 1.000000e-02, double* %105, align 1
  %106 = load double*** %factors, align 8
  %107 = getelementptr inbounds double** %106, i64 0
  %108 = load double** %107, align 1
  %109 = getelementptr inbounds double* %108, i64 3
  store double 1.000000e-02, double* %109, align 1
  %110 = load double*** %factors, align 8
  %111 = getelementptr inbounds double** %110, i64 0
  %112 = load double** %111, align 1
  %113 = getelementptr inbounds double* %112, i64 4
  store double 1.000000e-02, double* %113, align 1
  %114 = load double*** %factors, align 8
  %115 = getelementptr inbounds double** %114, i64 0
  %116 = load double** %115, align 1
  %117 = getelementptr inbounds double* %116, i64 5
  store double 1.000000e-02, double* %117, align 1
  %118 = load double*** %factors, align 8
  %119 = getelementptr inbounds double** %118, i64 0
  %120 = load double** %119, align 1
  %121 = getelementptr inbounds double* %120, i64 6
  store double 1.000000e-02, double* %121, align 1
  %122 = load double*** %factors, align 8
  %123 = getelementptr inbounds double** %122, i64 0
  %124 = load double** %123, align 1
  %125 = getelementptr inbounds double* %124, i64 7
  store double 1.000000e-02, double* %125, align 1
  %126 = load double*** %factors, align 8
  %127 = getelementptr inbounds double** %126, i64 0
  %128 = load double** %127, align 1
  %129 = getelementptr inbounds double* %128, i64 8
  store double 1.000000e-02, double* %129, align 1
  %130 = load double*** %factors, align 8
  %131 = getelementptr inbounds double** %130, i64 0
  %132 = load double** %131, align 1
  %133 = getelementptr inbounds double* %132, i64 9
  store double 1.000000e-02, double* %133, align 1
  %134 = load double*** %factors, align 8
  %135 = getelementptr inbounds double** %134, i64 1
  %136 = load double** %135, align 1
  %137 = getelementptr inbounds double* %136, i64 0
  store double 9.048000e-03, double* %137, align 1
  %138 = load double*** %factors, align 8
  %139 = getelementptr inbounds double** %138, i64 1
  %140 = load double** %139, align 1
  %141 = getelementptr inbounds double* %140, i64 1
  store double 8.187000e-03, double* %141, align 1
  %142 = load double*** %factors, align 8
  %143 = getelementptr inbounds double** %142, i64 1
  %144 = load double** %143, align 1
  %145 = getelementptr inbounds double* %144, i64 2
  store double 7.408000e-03, double* %145, align 1
  %146 = load double*** %factors, align 8
  %147 = getelementptr inbounds double** %146, i64 1
  %148 = load double** %147, align 1
  %149 = getelementptr inbounds double* %148, i64 3
  store double 6.703000e-03, double* %149, align 1
  %150 = load double*** %factors, align 8
  %151 = getelementptr inbounds double** %150, i64 1
  %152 = load double** %151, align 1
  %153 = getelementptr inbounds double* %152, i64 4
  store double 6.065000e-03, double* %153, align 1
  %154 = load double*** %factors, align 8
  %155 = getelementptr inbounds double** %154, i64 1
  %156 = load double** %155, align 1
  %157 = getelementptr inbounds double* %156, i64 5
  store double 5.488000e-03, double* %157, align 1
  %158 = load double*** %factors, align 8
  %159 = getelementptr inbounds double** %158, i64 1
  %160 = load double** %159, align 1
  %161 = getelementptr inbounds double* %160, i64 6
  store double 4.966000e-03, double* %161, align 1
  %162 = load double*** %factors, align 8
  %163 = getelementptr inbounds double** %162, i64 1
  %164 = load double** %163, align 1
  %165 = getelementptr inbounds double* %164, i64 7
  store double 4.493000e-03, double* %165, align 1
  %166 = load double*** %factors, align 8
  %167 = getelementptr inbounds double** %166, i64 1
  %168 = load double** %167, align 1
  %169 = getelementptr inbounds double* %168, i64 8
  store double 4.066000e-03, double* %169, align 1
  %170 = load double*** %factors, align 8
  %171 = getelementptr inbounds double** %170, i64 1
  %172 = load double** %171, align 1
  %173 = getelementptr inbounds double* %172, i64 9
  store double 3.679000e-03, double* %173, align 1
  %174 = load double*** %factors, align 8
  %175 = getelementptr inbounds double** %174, i64 2
  %176 = load double** %175, align 1
  %177 = getelementptr inbounds double* %176, i64 0
  store double 1.000000e-03, double* %177, align 1
  %178 = load double*** %factors, align 8
  %179 = getelementptr inbounds double** %178, i64 2
  %180 = load double** %179, align 1
  %181 = getelementptr inbounds double* %180, i64 1
  store double 7.500000e-04, double* %181, align 1
  %182 = load double*** %factors, align 8
  %183 = getelementptr inbounds double** %182, i64 2
  %184 = load double** %183, align 1
  %185 = getelementptr inbounds double* %184, i64 2
  store double 5.000000e-04, double* %185, align 1
  %186 = load double*** %factors, align 8
  %187 = getelementptr inbounds double** %186, i64 2
  %188 = load double** %187, align 1
  %189 = getelementptr inbounds double* %188, i64 3
  store double 2.500000e-04, double* %189, align 1
  %190 = load double*** %factors, align 8
  %191 = getelementptr inbounds double** %190, i64 2
  %192 = load double** %191, align 1
  %193 = getelementptr inbounds double* %192, i64 4
  store double 0.000000e+00, double* %193, align 1
  %194 = load double*** %factors, align 8
  %195 = getelementptr inbounds double** %194, i64 2
  %196 = load double** %195, align 1
  %197 = getelementptr inbounds double* %196, i64 5
  store double -2.500000e-04, double* %197, align 1
  %198 = load double*** %factors, align 8
  %199 = getelementptr inbounds double** %198, i64 2
  %200 = load double** %199, align 1
  %201 = getelementptr inbounds double* %200, i64 6
  store double -5.000000e-04, double* %201, align 1
  %202 = load double*** %factors, align 8
  %203 = getelementptr inbounds double** %202, i64 2
  %204 = load double** %203, align 1
  %205 = getelementptr inbounds double* %204, i64 7
  store double -7.500000e-04, double* %205, align 1
  %206 = load double*** %factors, align 8
  %207 = getelementptr inbounds double** %206, i64 2
  %208 = load double** %207, align 1
  %209 = getelementptr inbounds double* %208, i64 8
  store double -1.000000e-03, double* %209, align 1
  %210 = load double*** %factors, align 8
  %211 = getelementptr inbounds double** %210, i64 2
  %212 = load double** %211, align 1
  %213 = getelementptr inbounds double* %212, i64 9
  store double -1.250000e-03, double* %213, align 1
  %214 = load i32* @nSwaptions, align 4
  %215 = sext i32 %214 to i64
  %216 = mul i64 %215, 104
  %217 = call noalias i8* @malloc(i64 %216) nounwind
  %218 = bitcast i8* %217 to %struct.parm*
  store %struct.parm* %218, %struct.parm** @swaptions, align 8
  store i32 0, i32* %i, align 4
  br label %bb31

bb21:                                             ; preds = %bb31
  %219 = load %struct.parm** @swaptions, align 8
  %220 = load i32* %i, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds %struct.parm* %219, i64 %221
  %223 = getelementptr inbounds %struct.parm* %222, i32 0, i32 0
  %224 = load i32* %i, align 4
  store i32 %224, i32* %223, align 8
  %225 = load %struct.parm** @swaptions, align 8
  %226 = load i32* %i, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds %struct.parm* %225, i64 %227
  %229 = load i32* @iN, align 4
  %230 = getelementptr inbounds %struct.parm* %228, i32 0, i32 8
  store i32 %229, i32* %230, align 8
  %231 = load %struct.parm** @swaptions, align 8
  %232 = load i32* %i, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds %struct.parm* %231, i64 %233
  %235 = load i32* @iFactors, align 4
  %236 = getelementptr inbounds %struct.parm* %234, i32 0, i32 10
  store i32 %235, i32* %236, align 8
  %237 = load %struct.parm** @swaptions, align 8
  %238 = load i32* %i, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds %struct.parm* %237, i64 %239
  %241 = load double* @dYears, align 8
  %242 = getelementptr inbounds %struct.parm* %240, i32 0, i32 9
  store double %241, double* %242, align 8
  %243 = load %struct.parm** @swaptions, align 8
  %244 = load i32* %i, align 4
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds %struct.parm* %243, i64 %245
  %247 = getelementptr inbounds %struct.parm* %246, i32 0, i32 3
  store double 1.000000e-01, double* %247, align 8
  %248 = load %struct.parm** @swaptions, align 8
  %249 = load i32* %i, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds %struct.parm* %248, i64 %250
  %252 = getelementptr inbounds %struct.parm* %251, i32 0, i32 4
  store double 0.000000e+00, double* %252, align 8
  %253 = load %struct.parm** @swaptions, align 8
  %254 = load i32* %i, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds %struct.parm* %253, i64 %255
  %257 = getelementptr inbounds %struct.parm* %256, i32 0, i32 5
  store double 1.000000e+00, double* %257, align 8
  %258 = load %struct.parm** @swaptions, align 8
  %259 = load i32* %i, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds %struct.parm* %258, i64 %260
  %262 = getelementptr inbounds %struct.parm* %261, i32 0, i32 6
  store double 2.000000e+00, double* %262, align 8
  %263 = load %struct.parm** @swaptions, align 8
  %264 = load i32* %i, align 4
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds %struct.parm* %263, i64 %265
  %267 = getelementptr inbounds %struct.parm* %266, i32 0, i32 7
  store double 1.000000e+00, double* %267, align 8
  %268 = load %struct.parm** @swaptions, align 8
  %269 = load i32* %i, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds %struct.parm* %268, i64 %270
  %272 = load i32* @iN, align 4
  %273 = sub i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = call double* @_Z7dvectorll(i64 0, i64 %274) nounwind
  %276 = getelementptr inbounds %struct.parm* %271, i32 0, i32 11
  store double* %275, double** %276, align 8
  %277 = load %struct.parm** @swaptions, align 8
  %278 = load i32* %i, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds %struct.parm* %277, i64 %279
  %281 = getelementptr inbounds %struct.parm* %280, i32 0, i32 11
  %282 = load double** %281, align 8
  %283 = getelementptr inbounds double* %282, i64 0
  store double 1.000000e-01, double* %283, align 1
  store i32 1, i32* %j1, align 4
  br label %bb23

bb22:                                             ; preds = %bb23
  %284 = load %struct.parm** @swaptions, align 8
  %285 = load i32* %i, align 4
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds %struct.parm* %284, i64 %286
  %288 = getelementptr inbounds %struct.parm* %287, i32 0, i32 11
  %289 = load double** %288, align 8
  %290 = load %struct.parm** @swaptions, align 8
  %291 = load i32* %i, align 4
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds %struct.parm* %290, i64 %292
  %294 = getelementptr inbounds %struct.parm* %293, i32 0, i32 11
  %295 = load double** %294, align 8
  %296 = load i32* %j1, align 4
  %297 = sub i32 %296, 1
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds double* %295, i64 %298
  %300 = load double* %299, align 1
  %301 = fadd double %300, 5.000000e-03
  %302 = load i32* %j1, align 4
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds double* %289, i64 %303
  store double %301, double* %304, align 1
  %305 = load i32* %j1, align 4
  %306 = add nsw i32 %305, 1
  store i32 %306, i32* %j1, align 4
  br label %bb23

bb23:                                             ; preds = %bb22, %bb21
  %307 = load %struct.parm** @swaptions, align 8
  %308 = load i32* %i, align 4
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds %struct.parm* %307, i64 %309
  %311 = getelementptr inbounds %struct.parm* %310, i32 0, i32 8
  %312 = load i32* %311, align 8
  %313 = sub i32 %312, 1
  %314 = load i32* %j1, align 4
  %315 = icmp sge i32 %313, %314
  br i1 %315, label %bb22, label %bb24

bb24:                                             ; preds = %bb23
  %316 = load %struct.parm** @swaptions, align 8
  %317 = load i32* %i, align 4
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.parm* %316, i64 %318
  %320 = load %struct.parm** @swaptions, align 8
  %321 = load i32* %i, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds %struct.parm* %320, i64 %322
  %324 = getelementptr inbounds %struct.parm* %323, i32 0, i32 8
  %325 = load i32* %324, align 8
  %326 = sub i32 %325, 2
  %327 = sext i32 %326 to i64
  %328 = load %struct.parm** @swaptions, align 8
  %329 = load i32* %i, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds %struct.parm* %328, i64 %330
  %332 = getelementptr inbounds %struct.parm* %331, i32 0, i32 10
  %333 = load i32* %332, align 8
  %334 = sub i32 %333, 1
  %335 = sext i32 %334 to i64
  %336 = call double** @_Z7dmatrixllll(i64 0, i64 %335, i64 0, i64 %327) nounwind
  %337 = getelementptr inbounds %struct.parm* %319, i32 0, i32 12
  store double** %336, double*** %337, align 8
  store i32 0, i32* %k, align 4
  br label %bb29

bb25:                                             ; preds = %bb29
  store i32 0, i32* %j1, align 4
  br label %bb27

bb26:                                             ; preds = %bb27
  %338 = load %struct.parm** @swaptions, align 8
  %339 = load i32* %i, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds %struct.parm* %338, i64 %340
  %342 = getelementptr inbounds %struct.parm* %341, i32 0, i32 12
  %343 = load double*** %342, align 8
  %344 = load i32* %k, align 4
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds double** %343, i64 %345
  %347 = load double** %346, align 1
  %348 = load double*** %factors, align 8
  %349 = load i32* %k, align 4
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds double** %348, i64 %350
  %352 = load double** %351, align 1
  %353 = load i32* %j1, align 4
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds double* %352, i64 %354
  %356 = load double* %355, align 1
  %357 = load i32* %j1, align 4
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds double* %347, i64 %358
  store double %356, double* %359, align 1
  %360 = load i32* %j1, align 4
  %361 = add nsw i32 %360, 1
  store i32 %361, i32* %j1, align 4
  br label %bb27

bb27:                                             ; preds = %bb26, %bb25
  %362 = load %struct.parm** @swaptions, align 8
  %363 = load i32* %i, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds %struct.parm* %362, i64 %364
  %366 = getelementptr inbounds %struct.parm* %365, i32 0, i32 8
  %367 = load i32* %366, align 8
  %368 = sub i32 %367, 2
  %369 = load i32* %j1, align 4
  %370 = icmp sge i32 %368, %369
  br i1 %370, label %bb26, label %bb28

bb28:                                             ; preds = %bb27
  %371 = load i32* %k, align 4
  %372 = add nsw i32 %371, 1
  store i32 %372, i32* %k, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %bb24
  %373 = load %struct.parm** @swaptions, align 8
  %374 = load i32* %i, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds %struct.parm* %373, i64 %375
  %377 = getelementptr inbounds %struct.parm* %376, i32 0, i32 10
  %378 = load i32* %377, align 8
  %379 = sub i32 %378, 1
  %380 = load i32* %k, align 4
  %381 = icmp sge i32 %379, %380
  br i1 %381, label %bb25, label %bb30

bb30:                                             ; preds = %bb29
  %382 = load i32* %i, align 4
  %383 = add nsw i32 %382, 1
  store i32 %383, i32* %i, align 4
  br label %bb31

bb31:                                             ; preds = %bb30, %bb20
  %384 = load i32* @nSwaptions, align 4
  %385 = load i32* %i, align 4
  %386 = icmp slt i32 %385, %384
  br i1 %386, label %bb21, label %bb32

bb32:                                             ; preds = %bb31
  %387 = load i32* @nThreads, align 4
  %388 = sext i32 %387 to i64
  %389 = sub i64 %388, 1
  store i64 %389, i64* %1, align 8
  %390 = load i64* %1, align 8
  %391 = load i64* %1, align 8
  %392 = add i64 %391, 1
  %393 = mul i64 %392, 32
  %394 = load i64* %1, align 8
  %395 = add i64 %394, 1
  %396 = mul i64 %395, 4
  %397 = load i64* %1, align 8
  %398 = add i64 %397, 1
  %399 = mul i64 %398, 32
  %400 = load i64* %1, align 8
  %401 = add i64 %400, 1
  %402 = mul i64 %401, 4
  %403 = trunc i64 %402 to i32
  %404 = alloca i8, i32 %403
  %405 = bitcast i8* %404 to [0 x i32]*
  store [0 x i32]* %405, [0 x i32]** %threadIDs.147, align 8
  store i32 0, i32* %i, align 4
  br label %bb34

bb33:                                             ; preds = %bb34
  %406 = load i32* %i, align 4
  %407 = load [0 x i32]** %threadIDs.147, align 8
  %408 = sext i32 %406 to i64
  %409 = getelementptr inbounds [0 x i32]* %407, i64 0, i64 %408
  %410 = load i32* %i, align 4
  store i32 %410, i32* %409, align 4
  %411 = load i32* %i, align 4
  %412 = load [0 x i32]** %threadIDs.147, align 8
  %413 = sext i32 %411 to i64
  %414 = getelementptr inbounds [0 x i32]* %412, i64 0, i64 %413
  %415 = load i64** %threads, align 8
  %416 = load i32* %i, align 4
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i64* %415, i64 %417
  %419 = bitcast i32* %414 to i8*
  %420 = call i32 @pthread_create(i64* noalias %418, %struct.pthread_attr_t* noalias %pthread_custom_attr, i8* (i8*)* @_Z6workerPv, i8* noalias %419) nounwind
  %421 = load i32* %i, align 4
  %422 = add nsw i32 %421, 1
  store i32 %422, i32* %i, align 4
  br label %bb34

bb34:                                             ; preds = %bb33, %bb32
  %423 = load i32* @nThreads, align 4
  %424 = load i32* %i, align 4
  %425 = icmp slt i32 %424, %423
  br i1 %425, label %bb33, label %bb35

bb35:                                             ; preds = %bb34
  store i32 0, i32* %i, align 4
  br label %bb37

bb36:                                             ; preds = %bb37
  %426 = load i64** %threads, align 8
  %427 = load i32* %i, align 4
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i64* %426, i64 %428
  %430 = load i64* %429, align 1
  %431 = call i32 @pthread_join(i64 %430, i8** null) nounwind
  %432 = load i32* %i, align 4
  %433 = add nsw i32 %432, 1
  store i32 %433, i32* %i, align 4
  br label %bb37

bb37:                                             ; preds = %bb36, %bb35
  %434 = load i32* @nThreads, align 4
  %435 = load i32* %i, align 4
  %436 = icmp slt i32 %435, %434
  br i1 %436, label %bb36, label %bb38

bb38:                                             ; preds = %bb37
  %437 = load i64** %threads, align 8
  %438 = bitcast i64* %437 to i8*
  call void @free(i8* %438) nounwind
  store i32 0, i32* %i, align 4
  br label %bb40

bb39:                                             ; preds = %bb40
  %439 = load %struct.parm** @swaptions, align 8
  %440 = load i32* %i, align 4
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds %struct.parm* %439, i64 %441
  %443 = getelementptr inbounds %struct.parm* %442, i32 0, i32 2
  %444 = load double* %443, align 8
  %445 = load %struct.parm** @swaptions, align 8
  %446 = load i32* %i, align 4
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds %struct.parm* %445, i64 %447
  %449 = getelementptr inbounds %struct.parm* %448, i32 0, i32 1
  %450 = load double* %449, align 8
  %451 = load %struct.FILE** @stderr, align 8
  %452 = load i32* %i, align 4
  %453 = call i32 (%struct.FILE*, i8*, ...)* @fprintf(%struct.FILE* noalias %451, i8* noalias getelementptr inbounds ([55 x i8]* @.str716, i64 0, i64 0), i32 %452, double %450, double %444) nounwind
  %454 = load i32* %i, align 4
  %455 = add nsw i32 %454, 1
  store i32 %455, i32* %i, align 4
  br label %bb40

bb40:                                             ; preds = %bb39, %bb38
  %456 = load i32* @nSwaptions, align 4
  %457 = load i32* %i, align 4
  %458 = icmp slt i32 %457, %456
  br i1 %458, label %bb39, label %bb41

bb41:                                             ; preds = %bb40
  store i32 0, i32* %i, align 4
  br label %bb43

bb42:                                             ; preds = %bb43
  %459 = load %struct.parm** @swaptions, align 8
  %460 = load i32* %i, align 4
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds %struct.parm* %459, i64 %461
  %463 = getelementptr inbounds %struct.parm* %462, i32 0, i32 8
  %464 = load i32* %463, align 8
  %465 = sub i32 %464, 1
  %466 = sext i32 %465 to i64
  %467 = load %struct.parm** @swaptions, align 8
  %468 = load i32* %i, align 4
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds %struct.parm* %467, i64 %469
  %471 = getelementptr inbounds %struct.parm* %470, i32 0, i32 11
  %472 = load double** %471, align 8
  call void @_Z12free_dvectorPdll(double* %472, i64 0, i64 %466) nounwind
  %473 = load %struct.parm** @swaptions, align 8
  %474 = load i32* %i, align 4
  %475 = sext i32 %474 to i64
  %476 = getelementptr inbounds %struct.parm* %473, i64 %475
  %477 = getelementptr inbounds %struct.parm* %476, i32 0, i32 8
  %478 = load i32* %477, align 8
  %479 = sub i32 %478, 2
  %480 = sext i32 %479 to i64
  %481 = load %struct.parm** @swaptions, align 8
  %482 = load i32* %i, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.parm* %481, i64 %483
  %485 = getelementptr inbounds %struct.parm* %484, i32 0, i32 10
  %486 = load i32* %485, align 8
  %487 = sub i32 %486, 1
  %488 = sext i32 %487 to i64
  %489 = load %struct.parm** @swaptions, align 8
  %490 = load i32* %i, align 4
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds %struct.parm* %489, i64 %491
  %493 = getelementptr inbounds %struct.parm* %492, i32 0, i32 12
  %494 = load double*** %493, align 8
  call void @_Z12free_dmatrixPPdllll(double** %494, i64 0, i64 %488, i64 0, i64 %480) nounwind
  %495 = load i32* %i, align 4
  %496 = add nsw i32 %495, 1
  store i32 %496, i32* %i, align 4
  br label %bb43

bb43:                                             ; preds = %bb42, %bb41
  %497 = load i32* @nSwaptions, align 4
  %498 = load i32* %i, align 4
  %499 = icmp slt i32 %498, %497
  br i1 %499, label %bb42, label %bb44

bb44:                                             ; preds = %bb43
  %500 = load %struct.parm** @swaptions, align 8
  %501 = bitcast %struct.parm* %500 to i8*
  call void @free(i8* %501) nounwind
  %502 = load i32* %iSuccess, align 4
  store i32 %502, i32* %0, align 4
  %503 = load i8** %saved_stack.163, align 8
  call void @llvm.stackrestore(i8* %503)
  %504 = load i32* %0, align 4
  store i32 %504, i32* %retval, align 4
  br label %return

return:                                           ; preds = %bb44
  %retval45 = load i32* %retval
  ret i32 %retval45
}

declare i8* @llvm.stacksave() nounwind

declare i32 @puts(i8*)

declare i32 @fflush(%struct.FILE*)

declare i32 @strcmp(i8*, i8*) nounwind readonly

declare i32 @atoi(i8*) nounwind readonly

declare i32 @printf(i8* noalias, ...)

declare i32 @pthread_attr_init(%struct.pthread_attr_t*) nounwind

declare i32 @pthread_create(i64* noalias, %struct.pthread_attr_t* noalias, i8* (i8*)*, i8* noalias) nounwind

define i8* @_Z6workerPv(i8* %arg) nounwind {
entry:
  %arg_addr = alloca i8*
  %retval = alloca i8*
  %iSuccess = alloca i32
  %i = alloca i32
  %end = alloca i32
  %beg = alloca i32
  %chunksize = alloca i32
  %pdSwaptionPrice = alloca [2 x double]
  %tid = alloca i32
  %0 = alloca i8*
  %"alloca point" = bitcast i32 0 to i32
  store i8* %arg, i8** %arg_addr
  %1 = load i8** %arg_addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  store i32 %3, i32* %tid, align 4
  %4 = load i32* @nSwaptions, align 4
  %5 = load i32* @nThreads, align 4
  %6 = sdiv i32 %4, %5
  store i32 %6, i32* %chunksize, align 4
  %7 = load i32* %tid, align 4
  %8 = load i32* %chunksize, align 4
  %9 = mul i32 %7, %8
  store i32 %9, i32* %beg, align 4
  %10 = load i32* %tid, align 4
  %11 = add nsw i32 %10, 1
  %12 = load i32* %chunksize, align 4
  %13 = mul i32 %11, %12
  store i32 %13, i32* %end, align 4
  %14 = load i32* @nThreads, align 4
  %15 = sub i32 %14, 1
  %16 = load i32* %tid, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %bb, label %bb1

bb:                                               ; preds = %entry
  %18 = load i32* @nSwaptions, align 4
  store i32 %18, i32* %end, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %entry
  %19 = load i32* %beg, align 4
  store i32 %19, i32* %i, align 4
  br label %bb5

bb2:                                              ; preds = %bb5
  %20 = load i32* @NUM_TRIALS, align 4
  %21 = sext i32 %20 to i64
  %22 = load %struct.parm** @swaptions, align 8
  %23 = load i32* %i, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.parm* %22, i64 %24
  %26 = getelementptr inbounds %struct.parm* %25, i32 0, i32 12
  %27 = load double*** %26, align 8
  %28 = load %struct.parm** @swaptions, align 8
  %29 = load i32* %i, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.parm* %28, i64 %30
  %32 = getelementptr inbounds %struct.parm* %31, i32 0, i32 11
  %33 = load double** %32, align 8
  %34 = load %struct.parm** @swaptions, align 8
  %35 = load i32* %i, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.parm* %34, i64 %36
  %38 = getelementptr inbounds %struct.parm* %37, i32 0, i32 9
  %39 = load double* %38, align 8
  %40 = load %struct.parm** @swaptions, align 8
  %41 = load i32* %i, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.parm* %40, i64 %42
  %44 = getelementptr inbounds %struct.parm* %43, i32 0, i32 10
  %45 = load i32* %44, align 8
  %46 = load %struct.parm** @swaptions, align 8
  %47 = load i32* %i, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.parm* %46, i64 %48
  %50 = getelementptr inbounds %struct.parm* %49, i32 0, i32 8
  %51 = load i32* %50, align 8
  %52 = load %struct.parm** @swaptions, align 8
  %53 = load i32* %i, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.parm* %52, i64 %54
  %56 = getelementptr inbounds %struct.parm* %55, i32 0, i32 7
  %57 = load double* %56, align 8
  %58 = load %struct.parm** @swaptions, align 8
  %59 = load i32* %i, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.parm* %58, i64 %60
  %62 = getelementptr inbounds %struct.parm* %61, i32 0, i32 6
  %63 = load double* %62, align 8
  %64 = load %struct.parm** @swaptions, align 8
  %65 = load i32* %i, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.parm* %64, i64 %66
  %68 = getelementptr inbounds %struct.parm* %67, i32 0, i32 5
  %69 = load double* %68, align 8
  %70 = load %struct.parm** @swaptions, align 8
  %71 = load i32* %i, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.parm* %70, i64 %72
  %74 = getelementptr inbounds %struct.parm* %73, i32 0, i32 4
  %75 = load double* %74, align 8
  %76 = load %struct.parm** @swaptions, align 8
  %77 = load i32* %i, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.parm* %76, i64 %78
  %80 = getelementptr inbounds %struct.parm* %79, i32 0, i32 3
  %81 = load double* %80, align 8
  %82 = getelementptr inbounds [2 x double]* %pdSwaptionPrice, i64 0, i64 0
  %83 = call i32 @_Z21HJM_Swaption_BlockingPddddddiidS_PS_llii(double* %82, double %81, double %75, double %69, double %63, double %57, i32 %51, i32 %45, double %39, double* %33, double** %27, i64 100, i64 %21, i32 16, i32 0) nounwind
  store i32 %83, i32* %iSuccess, align 4
  %84 = load i32* %iSuccess, align 4
  %85 = icmp ne i32 %84, 1
  br i1 %85, label %bb3, label %bb4

bb3:                                              ; preds = %bb2
  call void @__assert_fail(i8* getelementptr inbounds ([14 x i8]* @.str817, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8]* @.str918, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([20 x i8]* @_ZZ6workerPvE19__PRETTY_FUNCTION__, i64 0, i64 0)) noreturn nounwind
  unreachable

bb4:                                              ; preds = %bb2
  %86 = load %struct.parm** @swaptions, align 8
  %87 = load i32* %i, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.parm* %86, i64 %88
  %90 = getelementptr inbounds [2 x double]* %pdSwaptionPrice, i64 0, i64 0
  %91 = load double* %90, align 8
  %92 = getelementptr inbounds %struct.parm* %89, i32 0, i32 1
  store double %91, double* %92, align 8
  %93 = load %struct.parm** @swaptions, align 8
  %94 = load i32* %i, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.parm* %93, i64 %95
  %97 = getelementptr inbounds [2 x double]* %pdSwaptionPrice, i64 0, i64 1
  %98 = load double* %97, align 8
  %99 = getelementptr inbounds %struct.parm* %96, i32 0, i32 2
  store double %98, double* %99, align 8
  %100 = load i32* %i, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %i, align 4
  br label %bb5

bb5:                                              ; preds = %bb4, %bb1
  %102 = load i32* %i, align 4
  %103 = load i32* %end, align 4
  %104 = icmp slt i32 %102, %103
  br i1 %104, label %bb2, label %bb6

bb6:                                              ; preds = %bb5
  store i8* null, i8** %0, align 8
  %105 = load i8** %0, align 8
  store i8* %105, i8** %retval, align 8
  br label %return

return:                                           ; preds = %bb6
  %retval7 = load i8** %retval
  ret i8* %retval7
}

declare i32 @pthread_join(i64, i8**)

declare void @llvm.stackrestore(i8*) nounwind

declare void @__assert_fail(i8*, i8*, i32, i8*) noreturn nounwind

declare extern_weak i32 @pthread_once(i32*, void ()*)

declare extern_weak i8* @pthread_getspecific(i32)

declare extern_weak i32 @pthread_setspecific(i32, i8*)

declare extern_weak i32 @pthread_cancel(i64)

declare extern_weak i32 @pthread_mutex_lock(%struct.pthread_mutex_t*)

declare extern_weak i32 @pthread_mutex_trylock(%struct.pthread_mutex_t*)

declare extern_weak i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*)

declare extern_weak i32 @pthread_mutex_init(%struct.pthread_mutex_t*, %struct.pthread_mutexattr_t*)

declare extern_weak i32 @pthread_key_create(i32*, void (i8*)*)

declare extern_weak i32 @pthread_key_delete(i32)

declare extern_weak i32 @pthread_mutexattr_init(%struct.pthread_mutexattr_t*)

declare extern_weak i32 @pthread_mutexattr_settype(%struct.pthread_mutexattr_t*, i32)

declare extern_weak i32 @pthread_mutexattr_destroy(%struct.pthread_mutexattr_t*)
